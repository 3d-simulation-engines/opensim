using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+96
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 96; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+97
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 97; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+98
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 98; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+99
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 99; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+100
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 100; }}
public States(Parser yyp):base(yyp){}}
//%+State+101
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 101; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+102
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 102; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+103
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< adl . kids . Count ) kids . Add ( adl );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 103; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+VoidArgStateEvent+104
public class VoidArgStateEvent : StateEvent{
 public  VoidArgStateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , cs ){}

public override string yyname { get { return "VoidArgStateEvent"; }}
public override int yynum { get { return 104; }}
public VoidArgStateEvent(Parser yyp):base(yyp){}}
//%+KeyArgStateEvent+105
public class KeyArgStateEvent : StateEvent{
 public  KeyArgStateEvent (Parser yyp, string  name , KeyArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "KeyArgStateEvent"; }}
public override int yynum { get { return 105; }}
public KeyArgStateEvent(Parser yyp):base(yyp){}}
//%+IntArgStateEvent+106
public class IntArgStateEvent : StateEvent{
 public  IntArgStateEvent (Parser yyp, string  name , IntArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntArgStateEvent"; }}
public override int yynum { get { return 106; }}
public IntArgStateEvent(Parser yyp):base(yyp){}}
//%+VectorArgStateEvent+107
public class VectorArgStateEvent : StateEvent{
 public  VectorArgStateEvent (Parser yyp, string  name , VectorArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "VectorArgStateEvent"; }}
public override int yynum { get { return 107; }}
public VectorArgStateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+108
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 108; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+KeyArgumentDeclarationList+109
public class KeyArgumentDeclarationList : ArgumentDeclarationList{
 public  KeyArgumentDeclarationList (Parser yyp, KeyDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "KeyArgumentDeclarationList"; }}
public override int yynum { get { return 109; }}
public KeyArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntArgumentDeclarationList+110
public class IntArgumentDeclarationList : ArgumentDeclarationList{
 public  IntArgumentDeclarationList (Parser yyp, IntDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "IntArgumentDeclarationList"; }}
public override int yynum { get { return 110; }}
public IntArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+VectorArgumentDeclarationList+111
public class VectorArgumentDeclarationList : ArgumentDeclarationList{
 public  VectorArgumentDeclarationList (Parser yyp, VectorDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "VectorArgumentDeclarationList"; }}
public override int yynum { get { return 111; }}
public VectorArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+112
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 112; }}
public Declaration(Parser yyp):base(yyp){}}
//%+KeyDeclaration+113
public class KeyDeclaration : Declaration{
 public  KeyDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "KeyDeclaration"; }}
public override int yynum { get { return 113; }}
public KeyDeclaration(Parser yyp):base(yyp){}}
//%+IntDeclaration+114
public class IntDeclaration : Declaration{
 public  IntDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "IntDeclaration"; }}
public override int yynum { get { return 114; }}
public IntDeclaration(Parser yyp):base(yyp){}}
//%+VectorDeclaration+115
public class VectorDeclaration : Declaration{
 public  VectorDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "VectorDeclaration"; }}
public override int yynum { get { return 115; }}
public VectorDeclaration(Parser yyp):base(yyp){}}
//%+Typename+116
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 116; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+117
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 117; }}
public Event(Parser yyp):base(yyp){}}
//%+VoidArgEvent+118
public class VoidArgEvent : Event{
 public  VoidArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VoidArgEvent"; }}
public override int yynum { get { return 118; }}
public VoidArgEvent(Parser yyp):base(yyp){}}
//%+KeyArgEvent+119
public class KeyArgEvent : Event{
 public  KeyArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "KeyArgEvent"; }}
public override int yynum { get { return 119; }}
public KeyArgEvent(Parser yyp):base(yyp){}}
//%+IntArgEvent+120
public class IntArgEvent : Event{
 public  IntArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntArgEvent"; }}
public override int yynum { get { return 120; }}
public IntArgEvent(Parser yyp):base(yyp){}}
//%+VectorArgEvent+121
public class VectorArgEvent : Event{
 public  VectorArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VectorArgEvent"; }}
public override int yynum { get { return 121; }}
public VectorArgEvent(Parser yyp):base(yyp){}}
//%+CompoundStatement+122
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 122; }}
}
//%+StatementList+123
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 123; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+124
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}
 public  Statement (Parser yyp, EmptyStatement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( es );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 124; }}
public Statement(Parser yyp):base(yyp){}}
//%+EmptyStatement+125
public class EmptyStatement : SYMBOL{
 public  EmptyStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  override  string  ToString (){ return  base . ToString ();
}

public override string yyname { get { return "EmptyStatement"; }}
public override int yynum { get { return 125; }}
}
//%+Assignment+126
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 126; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+127
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 127; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+128
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 128; }}
}
//%+JumpLabel+129
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 129; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+130
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 130; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+131
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 131; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+132
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 132; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+133
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 133; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+134
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 134; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+135
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 135; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+136
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 136; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+137
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 137; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+138
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 138; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+139
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 139; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+140
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 140; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+141
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 141; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+142
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 142; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+143
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 143; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+144
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 144; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+145
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 145; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+146
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 146; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+147
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 147; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+148
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 148; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+149
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 149; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+150
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 150; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+151
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 151; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+152
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 152; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+153
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 153; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+154
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 154; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_3 : StateBody {
  public StateBody_3(Parser yyq):base(yyq,
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_4 : StateBody {
  public StateBody_4(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_5 : StateBody {
  public StateBody_5(Parser yyq):base(yyq,
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_6 : StateBody {
  public StateBody_6(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_7 : StateBody {
  public StateBody_7(Parser yyq):base(yyq,
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_8 : StateBody {
  public StateBody_8(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_9 : StateBody {
  public StateBody_9(Parser yyq):base(yyq,
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_10 : StateBody {
  public StateBody_10(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VoidArgStateEvent_1 : VoidArgStateEvent {
  public VoidArgStateEvent_1(Parser yyq):base(yyq,
	((VoidArgEvent)(yyq.StackAt(3).m_value))
	.yytext, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgStateEvent_1 : KeyArgStateEvent {
  public KeyArgStateEvent_1(Parser yyq):base(yyq,
	((KeyArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((KeyArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntArgStateEvent_1 : IntArgStateEvent {
  public IntArgStateEvent_1(Parser yyq):base(yyq,
	((IntArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgStateEvent_1 : VectorArgStateEvent {
  public VectorArgStateEvent_1(Parser yyq):base(yyq,
	((VectorArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((VectorArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgumentDeclarationList_1 : KeyArgumentDeclarationList {
  public KeyArgumentDeclarationList_1(Parser yyq):base(yyq,
	((KeyDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntArgumentDeclarationList_1 : IntArgumentDeclarationList {
  public IntArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgumentDeclarationList_1 : VectorArgumentDeclarationList {
  public VectorArgumentDeclarationList_1(Parser yyq):base(yyq,
	((VectorDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyDeclaration_1 : KeyDeclaration {
  public KeyDeclaration_1(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntDeclaration_1 : IntDeclaration {
  public IntDeclaration_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorDeclaration_1 : VectorDeclaration {
  public VectorDeclaration_1(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class EmptyStatement_1 : EmptyStatement {
  public EmptyStatement_1(Parser yyq):base(yyq){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((EmptyStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoop_2 : ForLoop {
  public ForLoop_2(Parser yyq):base(yyq,null, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((HTTP_REQUEST_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_1 : VoidArgEvent {
  public VoidArgEvent_1(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_2 : VoidArgEvent {
  public VoidArgEvent_2(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_3 : VoidArgEvent {
  public VoidArgEvent_3(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_4 : VoidArgEvent {
  public VoidArgEvent_4(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_5 : VoidArgEvent {
  public VoidArgEvent_5(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_6 : VoidArgEvent {
  public VoidArgEvent_6(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_7 : VoidArgEvent {
  public VoidArgEvent_7(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_8 : VoidArgEvent {
  public VoidArgEvent_8(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_1 : KeyArgEvent {
  public KeyArgEvent_1(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_2 : KeyArgEvent {
  public KeyArgEvent_2(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_1 : IntArgEvent {
  public IntArgEvent_1(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_2 : IntArgEvent {
  public IntArgEvent_2(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_3 : IntArgEvent {
  public IntArgEvent_3(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_4 : IntArgEvent {
  public IntArgEvent_4(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_5 : IntArgEvent {
  public IntArgEvent_5(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_6 : IntArgEvent {
  public IntArgEvent_6(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_7 : IntArgEvent {
  public IntArgEvent_7(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_8 : IntArgEvent {
  public IntArgEvent_8(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_9 : IntArgEvent {
  public IntArgEvent_9(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_10 : IntArgEvent {
  public IntArgEvent_10(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_1 : VectorArgEvent {
  public VectorArgEvent_1(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_2 : VectorArgEvent {
  public VectorArgEvent_2(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_3 : VectorArgEvent {
  public VectorArgEvent_3(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,96,1,
2,104,18,1,2777,
102,2,0,105,5,
356,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
116,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,92,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
108,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,1694,145,
18,1,1694,146,20,
147,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,136,1,2,2,
0,1,1695,148,18,
1,1695,143,2,0,
1,2645,149,18,1,
2645,150,20,151,4,
18,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,1,
102,1,2,2,0,
1,30,152,18,1,
30,153,20,154,4,
22,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,112,
1,2,2,0,1,
31,155,18,1,31,
156,20,157,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,80,0,65,
0,82,0,69,0,
78,0,1,17,1,
1,2,0,1,32,
158,18,1,32,159,
20,160,4,20,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,69,0,1,
12,1,1,2,0,
1,1114,161,18,1,
1114,132,2,0,1,
1152,162,18,1,1152,
163,20,164,4,32,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,127,1,
2,2,0,1,1117,
165,18,1,1117,166,
20,167,4,28,80,
0,69,0,82,0,
67,0,69,0,78,
0,84,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,10,1,
1,2,0,1,40,
168,18,1,40,132,
2,0,1,41,169,
18,1,41,135,2,
0,1,42,170,18,
1,42,171,20,172,
4,20,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,145,1,
2,2,0,1,43,
173,18,1,43,174,
20,175,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,41,1,1,
2,0,1,44,176,
18,1,44,132,2,
0,1,1159,177,18,
1,1159,171,2,0,
1,46,178,18,1,
46,179,20,180,4,
12,80,0,69,0,
82,0,73,0,79,
0,68,0,1,24,
1,1,2,0,1,
47,181,18,1,47,
132,2,0,1,48,
182,18,1,48,183,
20,184,4,18,68,
0,69,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,5,1,
1,2,0,1,49,
185,18,1,49,186,
20,187,4,18,73,
0,78,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,4,1,
1,2,0,1,50,
188,18,1,50,183,
2,0,1,51,189,
18,1,51,186,2,
0,1,52,190,18,
1,52,135,2,0,
1,2281,191,18,1,
2281,163,2,0,1,
2754,192,18,1,2754,
193,20,194,4,18,
83,0,69,0,77,
0,73,0,67,0,
79,0,76,0,79,
0,78,0,1,11,
1,1,2,0,1,
2755,195,18,1,2755,
196,20,197,4,34,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,1,
97,1,2,2,0,
1,1730,198,18,1,
1730,163,2,0,1,
1731,199,18,1,1731,
193,2,0,1,61,
200,18,1,61,129,
2,0,1,62,201,
18,1,62,156,2,
0,1,63,202,18,
1,63,132,2,0,
1,65,203,18,1,
65,179,2,0,1,
66,204,18,1,66,
132,2,0,1,67,
205,18,1,67,183,
2,0,1,68,206,
18,1,68,186,2,
0,1,69,207,18,
1,69,183,2,0,
1,70,208,18,1,
70,186,2,0,1,
71,209,18,1,71,
135,2,0,1,73,
210,18,1,73,171,
2,0,1,74,211,
18,1,74,156,2,
0,1,1189,212,18,
1,1189,213,20,214,
4,22,83,0,84,
0,65,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
8,1,1,2,0,
1,76,215,18,1,
76,216,20,217,4,
20,76,0,69,0,
70,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,40,1,1,
2,0,1,1153,218,
18,1,1153,219,20,
220,4,24,83,0,
76,0,65,0,83,
0,72,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,9,1,
1,2,0,1,79,
221,18,1,79,222,
20,223,4,10,84,
0,73,0,76,0,
68,0,69,0,1,
36,1,1,2,0,
1,1195,224,18,1,
1195,171,2,0,1,
82,225,18,1,82,
171,2,0,1,1123,
226,18,1,1123,171,
2,0,1,85,227,
18,1,85,228,20,
229,4,26,83,0,
84,0,82,0,79,
0,75,0,69,0,
95,0,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
39,1,1,2,0,
1,2547,230,18,1,
2547,140,2,0,1,
89,231,18,1,89,
232,20,233,4,10,
77,0,73,0,78,
0,85,0,83,0,
1,19,1,1,2,
0,1,2318,234,18,
1,2318,193,2,0,
1,93,235,18,1,
93,171,2,0,1,
97,236,18,1,97,
237,20,238,4,14,
65,0,77,0,80,
0,95,0,65,0,
77,0,80,0,1,
38,1,1,2,0,
1,102,239,18,1,
102,240,20,241,4,
22,69,0,88,0,
67,0,76,0,65,
0,77,0,65,0,
84,0,73,0,79,
0,78,0,1,37,
1,1,2,0,1,
1775,242,18,1,1775,
156,2,0,1,107,
243,18,1,107,171,
2,0,1,2337,244,
18,1,2337,156,2,
0,1,1224,245,18,
1,1224,163,2,0,
1,1225,246,18,1,
1225,247,20,248,4,
24,77,0,73,0,
78,0,85,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,7,1,1,2,
0,1,112,249,18,
1,112,250,20,251,
4,28,71,0,82,
0,69,0,65,0,
84,0,69,0,82,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,32,1,1,2,
0,1,1188,252,18,
1,1188,163,2,0,
1,1231,253,18,1,
1231,171,2,0,1,
118,254,18,1,118,
171,2,0,1,1737,
255,18,1,1737,171,
2,0,1,124,256,
18,1,124,257,20,
258,4,22,76,0,
69,0,83,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,31,1,1,2,
0,1,130,259,18,
1,130,171,2,0,
1,1803,260,18,1,
1803,261,20,262,4,
18,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
124,1,2,2,0,
1,1804,263,18,1,
1804,264,20,265,4,
4,68,0,79,0,
1,44,1,1,2,
0,1,2364,266,18,
1,2364,261,2,0,
1,137,267,18,1,
137,268,20,269,4,
36,69,0,88,0,
67,0,76,0,65,
0,77,0,65,0,
84,0,73,0,79,
0,78,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,30,1,
1,2,0,1,2293,
270,18,1,2293,193,
2,0,1,1701,271,
18,1,1701,171,2,
0,1,1756,272,18,
1,1756,193,2,0,
1,2527,273,18,1,
2527,274,20,275,4,
28,75,0,101,0,
121,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
113,1,2,2,0,
1,143,276,18,1,
143,171,2,0,1,
2299,277,18,1,2299,
171,2,0,1,1260,
278,18,1,1260,163,
2,0,1,1261,279,
18,1,1261,280,20,
281,4,22,80,0,
76,0,85,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,6,1,1,2,
0,1,2528,282,18,
1,2528,283,20,284,
4,52,75,0,101,
0,121,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
109,1,2,2,0,
1,151,285,18,1,
151,286,20,287,4,
26,69,0,81,0,
85,0,65,0,76,
0,83,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,29,1,
1,2,0,1,2605,
288,18,1,2605,159,
2,0,1,1267,289,
18,1,1267,171,2,
0,1,157,290,18,
1,157,171,2,0,
1,1773,291,18,1,
1773,146,2,0,1,
1832,292,18,1,1832,
261,2,0,1,1833,
293,18,1,1833,294,
20,295,4,10,87,
0,72,0,73,0,
76,0,69,0,1,
45,1,1,2,0,
1,1834,296,18,1,
1834,135,2,0,1,
2773,297,18,1,2773,
298,20,299,4,48,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,1,99,
1,2,2,0,1,
166,300,18,1,166,
301,20,302,4,20,
76,0,69,0,70,
0,84,0,95,0,
65,0,78,0,71,
0,76,0,69,0,
1,25,1,1,2,
0,1,2776,303,18,
1,2776,304,20,305,
4,50,71,0,108,
0,111,0,98,0,
97,0,108,0,86,
0,97,0,114,0,
105,0,97,0,98,
0,108,0,101,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,98,1,
2,2,0,1,1840,
306,18,1,1840,171,
2,0,1,172,307,
18,1,172,171,2,
0,1,2335,308,18,
1,2335,146,2,0,
1,1296,309,18,1,
1296,163,2,0,1,
1297,310,18,1,1297,
311,20,312,4,12,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,15,1,
1,2,0,1,2413,
313,18,1,2413,314,
20,315,4,26,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,123,1,2,2,
0,1,1859,316,18,
1,1859,156,2,0,
1,1860,317,18,1,
1860,193,2,0,1,
188,318,18,1,188,
171,2,0,1,182,
319,18,1,182,320,
20,321,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,65,0,78,0,
71,0,76,0,69,
0,1,26,1,1,
2,0,1,199,322,
18,1,199,323,20,
324,4,10,67,0,
65,0,82,0,69,
0,84,0,1,35,
1,1,2,0,1,
1871,325,18,1,1871,
163,2,0,1,1872,
326,18,1,1872,156,
2,0,1,1873,327,
18,1,1873,193,2,
0,1,1875,328,18,
1,1875,294,2,0,
1,205,329,18,1,
205,171,2,0,1,
2515,330,18,1,2515,
135,2,0,1,1882,
331,18,1,1882,171,
2,0,1,2227,332,
18,1,2227,261,2,
0,1,217,333,18,
1,217,334,20,335,
4,12,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
34,1,1,2,0,
1,1332,336,18,1,
1332,163,2,0,1,
2743,337,18,1,2743,
193,2,0,1,1335,
338,18,1,1335,166,
2,0,1,223,339,
18,1,223,171,2,
0,1,1341,340,18,
1,1341,171,2,0,
1,2599,341,18,1,
2599,342,20,343,4,
38,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
107,1,2,2,0,
1,1901,344,18,1,
1901,156,2,0,1,
1303,345,18,1,1303,
171,2,0,1,2462,
346,18,1,2462,261,
2,0,1,236,347,
18,1,236,348,20,
349,4,6,65,0,
77,0,80,0,1,
33,1,1,2,0,
1,2466,350,18,1,
2466,351,20,352,4,
34,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,122,1,2,2,
0,1,2467,353,18,
1,2467,153,2,0,
1,2468,354,18,1,
2468,355,20,356,4,
10,83,0,84,0,
65,0,84,0,69,
0,1,48,1,1,
2,0,1,2469,357,
18,1,2469,132,2,
0,1,242,358,18,
1,242,171,2,0,
1,2471,359,18,1,
2471,360,20,361,4,
52,76,0,65,0,
78,0,68,0,95,
0,67,0,79,0,
76,0,76,0,73,
0,83,0,73,0,
79,0,78,0,95,
0,83,0,84,0,
65,0,82,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,71,
1,1,2,0,1,
2472,362,18,1,2472,
363,20,364,4,48,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,70,
1,1,2,0,1,
2473,365,18,1,2473,
366,20,367,4,40,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,69,1,1,2,
0,1,2474,368,18,
1,2474,369,20,370,
4,34,84,0,79,
0,85,0,67,0,
72,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,89,1,1,
2,0,1,2475,371,
18,1,2475,372,20,
373,4,30,84,0,
79,0,85,0,67,
0,72,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,90,
1,1,2,0,1,
2476,374,18,1,2476,
375,20,376,4,22,
84,0,79,0,85,
0,67,0,72,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,88,1,
1,2,0,1,2477,
377,18,1,2477,378,
20,379,4,24,83,
0,69,0,78,0,
83,0,79,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,84,
1,1,2,0,1,
2478,380,18,1,2478,
381,20,382,4,52,
82,0,85,0,78,
0,95,0,84,0,
73,0,77,0,69,
0,95,0,80,0,
69,0,82,0,77,
0,73,0,83,0,
83,0,73,0,79,
0,78,0,83,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,83,1,
1,2,0,1,2479,
383,18,1,2479,384,
20,385,4,24,79,
0,78,0,95,0,
82,0,69,0,90,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,81,
1,1,2,0,1,
2480,386,18,1,2480,
387,20,388,4,42,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,64,1,
1,2,0,1,2481,
389,18,1,2481,390,
20,391,4,38,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,63,1,
1,2,0,1,2482,
392,18,1,2482,393,
20,394,4,30,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
62,1,1,2,0,
1,2483,395,18,1,
2483,396,20,397,4,
26,67,0,72,0,
65,0,78,0,71,
0,69,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,61,1,
1,2,0,1,256,
398,18,1,256,399,
20,400,4,14,80,
0,69,0,82,0,
67,0,69,0,78,
0,84,0,1,22,
1,1,2,0,1,
1371,401,18,1,1371,
219,2,0,1,2486,
402,18,1,2486,403,
20,404,4,22,84,
0,73,0,77,0,
69,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,87,1,1,
2,0,1,2487,405,
18,1,2487,406,20,
407,4,38,78,0,
79,0,84,0,95,
0,65,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,79,1,1,
2,0,1,1931,408,
18,1,1931,261,2,
0,1,1932,409,18,
1,1932,410,20,411,
4,4,73,0,70,
0,1,42,1,1,
2,0,1,262,412,
18,1,262,171,2,
0,1,1377,413,18,
1,1377,171,2,0,
1,2492,414,18,1,
2492,415,20,416,4,
32,83,0,84,0,
65,0,84,0,69,
0,95,0,69,0,
88,0,73,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,86,
1,1,2,0,1,
1876,417,18,1,1876,
135,2,0,1,2494,
418,18,1,2494,419,
20,420,4,36,72,
0,84,0,84,0,
80,0,95,0,82,
0,69,0,81,0,
85,0,69,0,83,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,91,1,1,2,
0,1,2495,421,18,
1,2495,422,20,423,
4,34,82,0,69,
0,77,0,79,0,
84,0,69,0,95,
0,68,0,65,0,
84,0,65,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,82,1,1,
2,0,1,1939,424,
18,1,1939,171,2,
0,1,2497,425,18,
1,2497,426,20,427,
4,24,76,0,73,
0,83,0,84,0,
69,0,78,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,73,1,1,
2,0,1,827,428,
18,1,827,171,2,
0,1,2499,429,18,
1,2499,430,20,431,
4,38,72,0,84,
0,84,0,80,0,
95,0,82,0,69,
0,83,0,80,0,
79,0,78,0,83,
0,69,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,68,1,1,2,
0,1,2500,432,18,
1,2500,433,20,434,
4,22,69,0,77,
0,65,0,73,0,
76,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
67,1,1,2,0,
1,2501,435,18,1,
2501,436,20,437,4,
32,68,0,65,0,
84,0,65,0,83,
0,69,0,82,0,
86,0,69,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,66,
1,1,2,0,1,
2502,438,18,1,2502,
439,20,440,4,26,
67,0,79,0,78,
0,84,0,82,0,
79,0,76,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,65,1,1,
2,0,1,2503,441,
18,1,2503,442,20,
443,4,30,65,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,59,
1,1,2,0,1,
2504,444,18,1,2504,
445,20,446,4,38,
65,0,84,0,95,
0,82,0,79,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,58,
1,1,2,0,1,
277,447,18,1,277,
448,20,449,4,10,
83,0,76,0,65,
0,83,0,72,0,
1,21,1,1,2,
0,1,2506,450,18,
1,2506,135,2,0,
1,2507,451,18,1,
2507,114,2,0,1,
2508,452,18,1,2508,
132,2,0,1,2509,
453,18,1,2509,454,
20,455,4,34,86,
0,101,0,99,0,
116,0,111,0,114,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,115,
1,2,2,0,1,
2510,456,18,1,2510,
457,20,458,4,58,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,111,
1,2,2,0,1,
283,459,18,1,283,
171,2,0,1,2513,
460,18,1,2513,351,
2,0,1,2514,461,
18,1,2514,462,20,
463,4,22,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,120,1,2,2,
0,1,1958,464,18,
1,1958,156,2,0,
1,2516,465,18,1,
2516,126,2,0,1,
2517,466,18,1,2517,
132,2,0,1,2518,
467,18,1,2518,468,
20,469,4,28,73,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,114,1,
2,2,0,1,2519,
470,18,1,2519,471,
20,472,4,52,73,
0,110,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,110,1,2,
2,0,1,1406,473,
18,1,1406,163,2,
0,1,1407,474,18,
1,1407,213,2,0,
1,2522,475,18,1,
2522,351,2,0,1,
2523,476,18,1,2523,
477,20,478,4,22,
75,0,101,0,121,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,119,1,
2,2,0,1,2524,
479,18,1,2524,135,
2,0,1,2525,480,
18,1,2525,117,2,
0,1,2526,481,18,
1,2526,132,2,0,
1,299,482,18,1,
299,483,20,484,4,
8,83,0,84,0,
65,0,82,0,1,
20,1,1,2,0,
1,1370,485,18,1,
1370,163,2,0,1,
2529,486,18,1,2529,
156,2,0,1,2531,
487,18,1,2531,351,
2,0,1,2532,488,
18,1,2532,489,20,
490,4,24,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,118,1,
2,2,0,1,305,
491,18,1,305,171,
2,0,1,2534,492,
18,1,2534,156,2,
0,1,2458,493,18,
1,2458,261,2,0,
1,2459,494,18,1,
2459,495,20,496,4,
22,82,0,73,0,
71,0,72,0,84,
0,95,0,66,0,
82,0,65,0,67,
0,69,0,1,13,
1,1,2,0,1,
2538,497,18,1,2538,
135,2,0,1,2601,
498,18,1,2601,499,
20,500,4,32,75,
0,101,0,121,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,105,1,2,
2,0,1,2464,501,
18,1,2464,495,2,
0,1,1989,502,18,
1,1989,261,2,0,
1,1990,503,18,1,
1990,504,20,505,4,
8,69,0,76,0,
83,0,69,0,1,
43,1,1,2,0,
1,2470,506,18,1,
2470,159,2,0,1,
322,507,18,1,322,
232,2,0,1,2551,
508,18,1,2551,351,
2,0,1,1933,509,
18,1,1933,135,2,
0,1,2553,510,18,
1,2553,150,2,0,
1,883,511,18,1,
883,171,2,0,1,
328,512,18,1,328,
171,2,0,1,1443,
513,18,1,1443,247,
2,0,1,2766,514,
18,1,2766,515,20,
516,4,12,83,0,
116,0,97,0,116,
0,101,0,115,0,
1,100,1,2,2,
0,1,1449,517,18,
1,1449,171,2,0,
1,2485,518,18,1,
2485,519,20,520,4,
24,65,0,84,0,
84,0,65,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,60,1,1,2,
0,1,2488,521,18,
1,2488,522,20,523,
4,46,78,0,79,
0,84,0,95,0,
65,0,84,0,95,
0,82,0,79,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,78,
1,1,2,0,1,
2489,524,18,1,2489,
525,20,526,4,30,
78,0,79,0,95,
0,83,0,69,0,
78,0,83,0,79,
0,82,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,77,1,1,2,
0,1,2490,527,18,
1,2490,528,20,529,
4,36,77,0,79,
0,86,0,73,0,
78,0,71,0,95,
0,83,0,84,0,
65,0,82,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,76,
1,1,2,0,1,
2491,530,18,1,2491,
531,20,532,4,32,
77,0,79,0,86,
0,73,0,78,0,
71,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,75,1,
1,2,0,1,2493,
533,18,1,2493,534,
20,535,4,34,83,
0,84,0,65,0,
84,0,69,0,95,
0,69,0,78,0,
84,0,82,0,89,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,85,
1,1,2,0,1,
1413,536,18,1,1413,
171,2,0,1,346,
537,18,1,346,538,
20,539,4,8,80,
0,76,0,85,0,
83,0,1,18,1,
1,2,0,1,2496,
540,18,1,2496,541,
20,542,4,22,77,
0,79,0,78,0,
69,0,89,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,74,1,1,
2,0,1,2021,543,
18,1,2021,261,2,
0,1,2022,544,18,
1,2022,355,2,0,
1,352,545,18,1,
352,171,2,0,1,
2024,546,18,1,2024,
132,2,0,1,2025,
547,18,1,2025,548,
20,549,4,8,74,
0,85,0,77,0,
80,0,1,49,1,
1,2,0,1,2026,
550,18,1,2026,132,
2,0,1,2027,551,
18,1,2027,552,20,
553,4,4,65,0,
84,0,1,23,1,
1,2,0,1,2028,
554,18,1,2028,132,
2,0,1,2029,555,
18,1,2029,351,2,
0,1,2030,556,18,
1,2030,557,20,558,
4,14,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,1,135,1,2,
2,0,1,2031,559,
18,1,2031,560,20,
561,4,32,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,134,1,2,2,
0,1,2032,562,18,
1,2032,563,20,564,
4,28,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,133,1,2,2,
0,1,2033,565,18,
1,2033,566,20,567,
4,22,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
132,1,2,2,0,
1,2034,568,18,1,
2034,569,20,570,4,
22,83,0,116,0,
97,0,116,0,101,
0,67,0,104,0,
97,0,110,0,103,
0,101,0,1,131,
1,2,2,0,1,
1478,571,18,1,1478,
163,2,0,1,1479,
572,18,1,1479,280,
2,0,1,2037,573,
18,1,2037,193,2,
0,1,2038,574,18,
1,2038,575,20,576,
4,18,74,0,117,
0,109,0,112,0,
76,0,97,0,98,
0,101,0,108,0,
1,129,1,2,2,
0,1,2039,577,18,
1,2039,193,2,0,
1,2040,578,18,1,
2040,579,20,580,4,
30,82,0,101,0,
116,0,117,0,114,
0,110,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,128,1,2,
2,0,1,2041,581,
18,1,2041,193,2,
0,1,1485,582,18,
1,1485,171,2,0,
1,372,583,18,1,
372,183,2,0,1,
373,584,18,1,373,
132,2,0,1,374,
585,18,1,374,179,
2,0,1,375,586,
18,1,375,132,2,
0,1,376,587,18,
1,376,186,2,0,
1,377,588,18,1,
377,132,2,0,1,
378,589,18,1,378,
179,2,0,1,379,
590,18,1,379,132,
2,0,1,380,591,
18,1,380,592,20,
593,4,16,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
141,1,2,2,0,
1,381,594,18,1,
381,301,2,0,1,
371,595,18,1,371,
596,20,597,4,24,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,1,
137,1,2,2,0,
1,942,598,18,1,
942,171,2,0,1,
2533,599,18,1,2533,
135,2,0,1,387,
600,18,1,387,171,
2,0,1,2536,601,
18,1,2536,351,2,
0,1,2537,602,18,
1,2537,603,20,604,
4,10,69,0,118,
0,101,0,110,0,
116,0,1,117,1,
2,2,0,1,1514,
605,18,1,1514,163,
2,0,1,1515,606,
18,1,1515,311,2,
0,1,2549,607,18,
1,2549,156,2,0,
1,2074,608,18,1,
2074,163,2,0,1,
2075,609,18,1,2075,
156,2,0,1,406,
610,18,1,406,143,
2,0,1,1521,611,
18,1,1521,171,2,
0,1,412,612,18,
1,412,171,2,0,
1,2484,613,18,1,
2484,614,20,615,4,
32,79,0,66,0,
74,0,69,0,67,
0,84,0,95,0,
82,0,69,0,90,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,80,
1,1,2,0,1,
2023,616,18,1,2023,
617,20,618,4,26,
68,0,69,0,70,
0,65,0,85,0,
76,0,84,0,95,
0,83,0,84,0,
65,0,84,0,69,
0,1,47,1,1,
2,0,1,1442,619,
18,1,1442,163,2,
0,1,2035,620,18,
1,2035,193,2,0,
1,2036,621,18,1,
2036,622,20,623,4,
26,74,0,117,0,
109,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,130,1,
2,2,0,1,431,
624,18,1,431,143,
2,0,1,2105,625,
18,1,2105,261,2,
0,1,2106,626,18,
1,2106,504,2,0,
1,1550,627,18,1,
1550,163,2,0,1,
437,628,18,1,437,
171,2,0,1,2044,
629,18,1,2044,630,
20,631,4,28,69,
0,109,0,112,0,
116,0,121,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,125,1,
2,2,0,1,2045,
632,18,1,2045,193,
2,0,1,1555,633,
18,1,1555,171,2,
0,1,2511,634,18,
1,2511,156,2,0,
1,1001,635,18,1,
1001,596,2,0,1,
1002,636,18,1,1002,
592,2,0,1,447,
637,18,1,447,320,
2,0,1,2593,638,
18,1,2593,342,2,
0,1,2594,639,18,
1,2594,640,20,641,
4,32,73,0,110,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
106,1,2,2,0,
1,2595,642,18,1,
2595,499,2,0,1,
2596,643,18,1,2596,
644,20,645,4,34,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
104,1,2,2,0,
1,2520,646,18,1,
2520,156,2,0,1,
1010,647,18,1,1010,
163,2,0,1,1011,
648,18,1,1011,156,
2,0,1,1012,649,
18,1,1012,171,2,
0,1,1013,650,18,
1,1013,156,2,0,
1,2602,651,18,1,
2602,644,2,0,1,
2603,652,18,1,2603,
653,20,654,4,20,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,103,1,2,2,
0,1,459,655,18,
1,459,656,20,657,
4,24,76,0,69,
0,70,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
75,0,69,0,84,
0,1,27,1,1,
2,0,1,1574,658,
18,1,1574,193,2,
0,1,461,659,18,
1,461,660,20,661,
4,24,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,138,1,2,
2,0,1,462,662,
18,1,462,143,2,
0,1,464,663,18,
1,464,664,20,665,
4,16,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,139,
1,2,2,0,1,
2136,666,18,1,2136,
261,2,0,1,2696,
667,18,1,2696,515,
2,0,1,1585,668,
18,1,1585,669,20,
670,4,12,82,0,
69,0,84,0,85,
0,82,0,78,0,
1,50,1,1,2,
0,1,2700,671,18,
1,2700,672,20,673,
4,10,83,0,116,
0,97,0,116,0,
101,0,1,101,1,
2,2,0,1,2701,
674,18,1,2701,132,
2,0,1,2702,675,
18,1,2702,135,2,
0,1,476,676,18,
1,476,677,20,678,
4,30,83,0,84,
0,82,0,73,0,
78,0,71,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,3,1,
1,2,0,1,477,
679,18,1,477,680,
20,681,4,28,70,
0,76,0,79,0,
65,0,84,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,95,1,
1,2,0,1,478,
682,18,1,478,683,
20,684,4,40,72,
0,69,0,88,0,
95,0,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,67,0,
79,0,78,0,83,
0,84,0,65,0,
78,0,84,0,1,
94,1,1,2,0,
1,479,685,18,1,
479,686,20,687,4,
32,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,93,
1,1,2,0,1,
480,688,18,1,480,
689,20,690,4,26,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
75,0,69,0,84,
0,1,28,1,1,
2,0,1,481,691,
18,1,481,664,2,
0,1,2711,692,18,
1,2711,140,2,0,
1,2713,693,18,1,
2713,156,2,0,1,
2715,694,18,1,2715,
351,2,0,1,2717,
695,18,1,2717,153,
2,0,1,2718,696,
18,1,2718,311,2,
0,1,1048,697,18,
1,1048,171,2,0,
1,2724,698,18,1,
2724,171,2,0,1,
2042,699,18,1,2042,
700,20,701,4,20,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,126,1,2,2,
0,1,2043,702,18,
1,2043,193,2,0,
1,1620,703,18,1,
1620,163,2,0,1,
1621,704,18,1,1621,
153,2,0,1,1622,
705,18,1,1622,311,
2,0,1,509,706,
18,1,509,143,2,
0,1,2498,707,18,
1,2498,708,20,709,
4,36,76,0,73,
0,78,0,75,0,
95,0,77,0,69,
0,83,0,83,0,
65,0,71,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,72,
1,1,2,0,1,
1628,710,18,1,1628,
171,2,0,1,515,
711,18,1,515,171,
2,0,1,2699,712,
18,1,2699,672,2,
0,1,2505,713,18,
1,2505,714,20,715,
4,28,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,121,1,2,2,
0,1,525,716,18,
1,525,320,2,0,
1,2197,717,18,1,
2197,163,2,0,1,
2198,718,18,1,2198,
156,2,0,1,1591,
719,18,1,1591,171,
2,0,1,2597,720,
18,1,2597,653,2,
0,1,2598,721,18,
1,2598,495,2,0,
1,1094,722,18,1,
1094,660,2,0,1,
2600,723,18,1,2600,
640,2,0,1,1096,
724,18,1,1096,156,
2,0,1,2604,725,
18,1,2604,617,2,
0,1,1657,726,18,
1,1657,193,2,0,
1,1658,727,18,1,
1658,728,20,729,4,
6,70,0,79,0,
82,0,1,46,1,
1,2,0,1,1659,
730,18,1,1659,135,
2,0,1,2774,731,
18,1,2774,304,2,
0,1,2775,732,18,
1,2775,298,2,0,
1,2690,733,18,1,
2690,495,2,0,1,
2777,104,1,2778,734,
18,1,2778,735,23,
736,4,6,69,0,
79,0,70,0,1,
2,1,6,2,0,
1,1665,737,18,1,
1665,171,2,0,1,
1113,738,18,1,1113,
179,2,0,739,5,
0,740,5,356,1,
2,741,19,736,1,
2,742,5,6,1,
2700,743,17,744,15,
745,4,14,37,0,
83,0,116,0,97,
0,116,0,101,0,
115,0,1,-1,1,
5,746,20,747,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,166,1,
3,1,2,1,1,
748,22,1,11,1,
2696,749,17,750,15,
751,4,30,37,0,
76,0,83,0,76,
0,80,0,114,0,
111,0,103,0,114,
0,97,0,109,0,
82,0,111,0,111,
0,116,0,1,-1,
1,5,752,20,753,
4,32,76,0,83,
0,76,0,80,0,
114,0,111,0,103,
0,114,0,97,0,
109,0,82,0,111,
0,111,0,116,0,
95,0,50,0,1,
157,1,3,1,2,
1,1,754,22,1,
2,1,2598,755,17,
756,15,757,4,12,
37,0,83,0,116,
0,97,0,116,0,
101,0,1,-1,1,
5,758,20,759,4,
14,83,0,116,0,
97,0,116,0,101,
0,95,0,50,0,
1,169,1,3,1,
6,1,5,760,22,
1,14,1,2699,761,
17,762,15,745,1,
-1,1,5,763,20,
764,4,16,83,0,
116,0,97,0,116,
0,101,0,115,0,
95,0,50,0,1,
167,1,3,1,3,
1,2,765,22,1,
12,1,2766,766,17,
767,15,751,1,-1,
1,5,768,20,769,
4,32,76,0,83,
0,76,0,80,0,
114,0,111,0,103,
0,114,0,97,0,
109,0,82,0,111,
0,111,0,116,0,
95,0,49,0,1,
156,1,3,1,3,
1,2,770,22,1,
1,1,2690,771,17,
772,15,757,1,-1,
1,5,773,20,774,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,49,
0,1,168,1,3,
1,5,1,4,775,
22,1,13,1,3,
776,19,678,1,3,
777,5,95,1,256,
778,16,0,676,1,
1261,779,16,0,676,
1,509,780,16,0,
676,1,1515,781,16,
0,676,1,2021,782,
17,783,15,784,4,
24,37,0,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,785,
20,786,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,217,1,3,1,
8,1,7,787,22,
1,63,1,1775,788,
16,0,676,1,2029,
789,17,790,15,791,
4,20,37,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,792,20,793,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,211,1,3,1,
2,1,1,794,22,
1,57,1,2030,795,
17,796,15,791,1,
-1,1,5,797,20,
798,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
50,0,1,210,1,
3,1,2,1,1,
799,22,1,56,1,
2031,800,17,801,15,
791,1,-1,1,5,
802,20,803,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,49,0,1,
209,1,3,1,2,
1,1,804,22,1,
55,1,2032,805,17,
806,15,791,1,-1,
1,5,807,20,808,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,208,1,3,
1,2,1,1,809,
22,1,54,1,2033,
810,17,811,15,791,
1,-1,1,5,812,
20,813,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,57,
0,1,207,1,3,
1,2,1,1,814,
22,1,53,1,277,
815,16,0,676,1,
2035,816,17,817,15,
791,1,-1,1,5,
818,20,819,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
56,0,1,206,1,
3,1,3,1,2,
820,22,1,52,1,
2037,821,17,822,15,
791,1,-1,1,5,
823,20,824,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
55,0,1,205,1,
3,1,3,1,2,
825,22,1,51,1,
2039,826,17,827,15,
791,1,-1,1,5,
828,20,829,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
54,0,1,204,1,
3,1,3,1,2,
830,22,1,50,1,
32,831,16,0,676,
1,2041,832,17,833,
15,791,1,-1,1,
5,834,20,835,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,53,0,1,203,
1,3,1,3,1,
2,836,22,1,49,
1,2293,837,16,0,
676,1,2043,838,17,
839,15,791,1,-1,
1,5,840,20,841,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
201,1,3,1,3,
1,2,842,22,1,
47,1,2045,843,17,
844,15,791,1,-1,
1,5,845,20,846,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
199,1,3,1,3,
1,2,847,22,1,
45,1,41,848,16,
0,676,1,1297,849,
16,0,676,1,43,
850,16,0,676,1,
1803,851,17,852,15,
853,4,16,37,0,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
-1,1,5,854,20,
855,4,18,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,95,0,49,
0,1,224,1,3,
1,10,1,9,856,
22,1,70,1,1804,
857,16,0,676,1,
299,858,16,0,676,
1,52,859,16,0,
676,1,2318,860,16,
0,676,1,62,861,
16,0,676,1,2075,
862,16,0,676,1,
1574,863,17,864,15,
791,1,-1,1,5,
865,20,866,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,202,1,
3,1,3,1,2,
867,22,1,48,1,
71,868,16,0,676,
1,76,869,16,0,
676,1,1834,870,16,
0,676,1,2337,871,
16,0,676,1,79,
872,16,0,676,1,
1335,873,16,0,676,
1,322,874,16,0,
676,1,85,875,16,
0,676,1,89,876,
16,0,676,1,346,
877,16,0,676,1,
2105,878,17,879,15,
784,1,-1,1,5,
880,20,881,4,26,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,51,
0,1,218,1,3,
1,6,1,5,882,
22,1,64,1,2106,
883,16,0,676,1,
97,884,16,0,676,
1,1860,885,17,886,
15,887,4,34,37,
0,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,888,20,889,
4,36,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,222,
1,3,1,8,1,
7,890,22,1,68,
1,2364,891,17,892,
15,853,1,-1,1,
5,893,20,894,4,
18,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
95,0,50,0,1,
225,1,3,1,9,
1,8,895,22,1,
71,1,102,896,16,
0,676,1,112,897,
16,0,676,1,1117,
898,16,0,676,1,
1873,899,17,900,15,
887,1,-1,1,5,
901,20,902,4,36,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,223,1,3,
1,8,1,7,903,
22,1,69,1,1876,
904,16,0,676,1,
124,905,16,0,676,
1,2136,906,17,907,
15,784,1,-1,1,
5,908,20,909,4,
26,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,219,1,
3,1,8,1,7,
910,22,1,65,1,
2718,911,16,0,676,
1,381,912,16,0,
676,1,525,913,16,
0,676,1,137,914,
16,0,676,1,1901,
915,16,0,676,1,
1153,916,16,0,676,
1,151,917,16,0,
676,1,1407,918,16,
0,676,1,1659,919,
16,0,676,1,2413,
920,16,0,676,1,
406,921,16,0,676,
1,1371,922,16,0,
676,1,166,923,16,
0,676,1,1622,924,
16,0,676,1,1931,
925,17,926,15,927,
4,30,37,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,928,20,929,4,
32,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,220,
1,3,1,6,1,
5,930,22,1,66,
1,1933,931,16,0,
676,1,431,932,16,
0,676,1,1585,933,
16,0,676,1,182,
934,16,0,676,1,
1189,935,16,0,676,
1,1443,936,16,0,
676,1,1695,937,16,
0,676,1,2198,938,
16,0,676,1,447,
939,16,0,676,1,
2458,940,17,941,15,
942,4,28,37,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
943,20,944,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,197,1,3,1,
3,1,2,945,22,
1,43,1,2459,946,
17,947,15,948,4,
36,37,0,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,949,20,950,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
195,1,3,1,4,
1,3,951,22,1,
41,1,1958,952,16,
0,676,1,2462,953,
17,954,15,942,1,
-1,1,5,955,20,
956,4,30,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,196,
1,3,1,2,1,
1,957,22,1,42,
1,1657,958,17,959,
15,791,1,-1,1,
5,960,20,961,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,200,
1,3,1,3,1,
2,962,22,1,46,
1,2464,963,17,964,
15,948,1,-1,1,
5,965,20,966,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
194,1,3,1,3,
1,2,967,22,1,
40,1,199,968,16,
0,676,1,459,969,
16,0,676,1,462,
970,16,0,676,1,
217,971,16,0,676,
1,2227,972,17,973,
15,927,1,-1,1,
5,974,20,975,4,
32,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,221,
1,3,1,6,1,
5,976,22,1,67,
1,1225,977,16,0,
676,1,1479,978,16,
0,676,1,1731,979,
16,0,676,1,1989,
980,17,981,15,784,
1,-1,1,5,982,
20,983,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,216,1,3,1,
6,1,5,984,22,
1,62,1,1990,985,
16,0,676,1,236,
986,16,0,676,1,
1756,987,16,0,676,
1,4,988,19,187,
1,4,989,5,100,
1,256,990,16,0,
587,1,1261,991,16,
0,587,1,509,992,
16,0,587,1,1515,
993,16,0,587,1,
2021,782,1,1775,994,
16,0,587,1,2029,
789,1,2030,795,1,
2031,800,1,2032,805,
1,2033,810,1,277,
995,16,0,587,1,
2035,816,1,2037,821,
1,2039,826,1,32,
996,16,0,587,1,
2041,832,1,2293,997,
16,0,587,1,2043,
838,1,2045,843,1,
40,998,16,0,189,
1,41,999,16,0,
587,1,1297,1000,16,
0,587,1,43,1001,
16,0,587,1,44,
1002,16,0,189,1,
1803,851,1,1804,1003,
16,0,587,1,299,
1004,16,0,587,1,
47,1005,16,0,185,
1,52,1006,16,0,
587,1,2318,1007,16,
0,587,1,63,1008,
16,0,208,1,66,
1009,16,0,206,1,
2075,1010,16,0,587,
1,1574,863,1,71,
1011,16,0,587,1,
76,1012,16,0,587,
1,1834,1013,16,0,
587,1,2337,1014,16,
0,587,1,79,1015,
16,0,587,1,1335,
1016,16,0,587,1,
322,1017,16,0,587,
1,85,1018,16,0,
587,1,89,1019,16,
0,587,1,346,1020,
16,0,587,1,97,
1021,16,0,587,1,
2106,1022,16,0,587,
1,102,1023,16,0,
587,1,1860,885,1,
2364,891,1,1114,1024,
16,0,185,1,112,
1025,16,0,587,1,
1117,1026,16,0,587,
1,1873,899,1,1876,
1027,16,0,587,1,
124,1028,16,0,587,
1,2136,906,1,2718,
1029,16,0,587,1,
381,1030,16,0,587,
1,525,1031,16,0,
587,1,137,1032,16,
0,587,1,1901,1033,
16,0,587,1,1153,
1034,16,0,587,1,
151,1035,16,0,587,
1,1407,1036,16,0,
587,1,1659,1037,16,
0,587,1,2413,1038,
16,0,587,1,406,
1039,16,0,587,1,
1371,1040,16,0,587,
1,2105,878,1,166,
1041,16,0,587,1,
1622,1042,16,0,587,
1,1931,925,1,1933,
1043,16,0,587,1,
431,1044,16,0,587,
1,1585,1045,16,0,
587,1,182,1046,16,
0,587,1,1189,1047,
16,0,587,1,1443,
1048,16,0,587,1,
1695,1049,16,0,587,
1,2198,1050,16,0,
587,1,447,1051,16,
0,587,1,2458,940,
1,2459,946,1,1958,
1052,16,0,587,1,
2462,953,1,1657,958,
1,2464,963,1,199,
1053,16,0,587,1,
459,1054,16,0,587,
1,462,1055,16,0,
587,1,217,1056,16,
0,587,1,2227,972,
1,1225,1057,16,0,
587,1,1479,1058,16,
0,587,1,1731,1059,
16,0,587,1,1989,
980,1,1990,1060,16,
0,587,1,236,1061,
16,0,587,1,1756,
1062,16,0,587,1,
5,1063,19,184,1,
5,1064,5,100,1,
256,1065,16,0,583,
1,1261,1066,16,0,
583,1,509,1067,16,
0,583,1,1515,1068,
16,0,583,1,2021,
782,1,1775,1069,16,
0,583,1,2029,789,
1,2030,795,1,2031,
800,1,2032,805,1,
2033,810,1,277,1070,
16,0,583,1,2035,
816,1,2037,821,1,
2039,826,1,32,1071,
16,0,583,1,2041,
832,1,2293,1072,16,
0,583,1,2043,838,
1,2045,843,1,40,
1073,16,0,188,1,
41,1074,16,0,583,
1,1297,1075,16,0,
583,1,43,1076,16,
0,583,1,44,1077,
16,0,188,1,1803,
851,1,1804,1078,16,
0,583,1,299,1079,
16,0,583,1,47,
1080,16,0,182,1,
52,1081,16,0,583,
1,2318,1082,16,0,
583,1,63,1083,16,
0,207,1,66,1084,
16,0,205,1,2075,
1085,16,0,583,1,
1574,863,1,71,1086,
16,0,583,1,76,
1087,16,0,583,1,
1834,1088,16,0,583,
1,2337,1089,16,0,
583,1,79,1090,16,
0,583,1,1335,1091,
16,0,583,1,322,
1092,16,0,583,1,
85,1093,16,0,583,
1,89,1094,16,0,
583,1,346,1095,16,
0,583,1,97,1096,
16,0,583,1,2106,
1097,16,0,583,1,
102,1098,16,0,583,
1,1860,885,1,2364,
891,1,1114,1099,16,
0,182,1,112,1100,
16,0,583,1,1117,
1101,16,0,583,1,
1873,899,1,1876,1102,
16,0,583,1,124,
1103,16,0,583,1,
2136,906,1,2718,1104,
16,0,583,1,381,
1105,16,0,583,1,
525,1106,16,0,583,
1,137,1107,16,0,
583,1,1901,1108,16,
0,583,1,1153,1109,
16,0,583,1,151,
1110,16,0,583,1,
1407,1111,16,0,583,
1,1659,1112,16,0,
583,1,2413,1113,16,
0,583,1,406,1114,
16,0,583,1,1371,
1115,16,0,583,1,
2105,878,1,166,1116,
16,0,583,1,1622,
1117,16,0,583,1,
1931,925,1,1933,1118,
16,0,583,1,431,
1119,16,0,583,1,
1585,1120,16,0,583,
1,182,1121,16,0,
583,1,1189,1122,16,
0,583,1,1443,1123,
16,0,583,1,1695,
1124,16,0,583,1,
2198,1125,16,0,583,
1,447,1126,16,0,
583,1,2458,940,1,
2459,946,1,1958,1127,
16,0,583,1,2462,
953,1,1657,958,1,
2464,963,1,199,1128,
16,0,583,1,459,
1129,16,0,583,1,
462,1130,16,0,583,
1,217,1131,16,0,
583,1,2227,972,1,
1225,1132,16,0,583,
1,1479,1133,16,0,
583,1,1731,1134,16,
0,583,1,1989,980,
1,1990,1135,16,0,
583,1,236,1136,16,
0,583,1,1756,1137,
16,0,583,1,6,
1138,19,281,1,6,
1139,5,2,1,1114,
1140,16,0,279,1,
40,1141,16,0,572,
1,7,1142,19,248,
1,7,1143,5,2,
1,1114,1144,16,0,
246,1,40,1145,16,
0,513,1,8,1146,
19,214,1,8,1147,
5,2,1,1114,1148,
16,0,212,1,40,
1149,16,0,474,1,
9,1150,19,220,1,
9,1151,5,2,1,
1114,1152,16,0,218,
1,40,1153,16,0,
401,1,10,1154,19,
167,1,10,1155,5,
2,1,1114,1156,16,
0,165,1,40,1157,
16,0,338,1,11,
1158,19,194,1,11,
1159,5,146,1,1260,
1160,17,1161,15,1162,
4,34,37,0,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1163,20,1164,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,49,0,1,252,
1,3,1,6,1,
5,1165,22,1,98,
1,1011,1166,17,1167,
15,1168,4,44,37,
0,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1169,20,1170,
4,46,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,299,
1,3,1,4,1,
3,1171,22,1,145,
1,1514,1172,17,1173,
15,1162,1,-1,1,
5,1174,20,1175,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,52,0,1,
245,1,3,1,4,
1,3,1176,22,1,
91,1,9,1177,17,
1178,15,1179,4,24,
37,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,1180,20,
1181,4,26,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
190,1,3,1,3,
1,2,1182,22,1,
36,1,262,1183,17,
1184,15,1185,4,34,
37,0,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1186,20,
1187,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
281,1,3,1,4,
1,3,1188,22,1,
127,1,1267,1189,17,
1190,15,1162,1,-1,
1,5,1191,20,1192,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,239,
1,3,1,6,1,
5,1193,22,1,85,
1,2021,782,1,1521,
1194,17,1195,15,1162,
1,-1,1,5,1196,
20,1197,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,232,1,3,1,
4,1,3,1198,22,
1,78,1,2024,1199,
17,1200,15,1201,4,
24,37,0,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,-1,1,5,1202,
20,1203,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,49,0,
1,214,1,3,1,
3,1,2,1204,22,
1,60,1,1775,1205,
17,1206,15,1207,4,
30,37,0,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1208,20,1209,4,32,
69,0,109,0,112,
0,116,0,121,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,198,1,
3,1,1,1,0,
1210,22,1,44,1,
19,1211,17,1178,1,
2,1182,1,2028,1212,
17,1213,15,1214,4,
20,37,0,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,1,-1,1,5,
1215,20,1216,4,22,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,95,0,
49,0,1,212,1,
3,1,3,1,2,
1217,22,1,58,1,
2029,789,1,2281,1218,
17,1219,15,1220,4,
34,37,0,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1221,
20,1222,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,227,1,3,1,
2,1,1,1223,22,
1,73,1,2031,800,
1,2032,805,1,2033,
810,1,2034,1224,16,
0,620,1,2035,816,
1,2036,1225,16,0,
573,1,2037,821,1,
2038,1226,16,0,577,
1,2039,826,1,32,
1227,17,1206,1,0,
1210,1,2041,832,1,
2042,1228,16,0,702,
1,2043,838,1,2044,
1229,16,0,632,1,
2045,843,1,2299,1230,
16,0,234,1,1296,
1231,17,1232,15,1162,
1,-1,1,5,1233,
20,1234,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
48,0,1,251,1,
3,1,6,1,5,
1235,22,1,97,1,
283,1236,17,1237,15,
1185,1,-1,1,5,
1238,20,1239,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,52,
0,1,280,1,3,
1,4,1,3,1240,
22,1,126,1,40,
1241,17,1242,15,1243,
4,32,37,0,73,
0,100,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1244,20,
1245,4,34,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,266,1,
3,1,2,1,1,
1246,22,1,112,1,
44,1247,17,1242,1,
1,1246,1,1803,851,
1,47,1248,17,1249,
15,1250,4,38,37,
0,73,0,100,0,
101,0,110,0,116,
0,68,0,111,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1251,20,1252,4,
40,73,0,100,0,
101,0,110,0,116,
0,68,0,111,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,267,1,3,
1,4,1,3,1253,
22,1,113,1,48,
1254,17,1255,15,1256,
4,58,37,0,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1257,
20,1258,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
271,1,3,1,5,
1,4,1259,22,1,
117,1,49,1260,17,
1261,15,1256,1,-1,
1,5,1262,20,1263,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,270,1,
3,1,5,1,4,
1264,22,1,116,1,
50,1265,17,1266,15,
1256,1,-1,1,5,
1267,20,1268,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,269,1,3,1,
3,1,2,1269,22,
1,115,1,51,1270,
17,1271,15,1256,1,
-1,1,5,1272,20,
1273,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,268,
1,3,1,3,1,
2,1274,22,1,114,
1,305,1275,17,1276,
15,1185,1,-1,1,
5,1277,20,1278,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,279,1,
3,1,4,1,3,
1279,22,1,125,1,
525,1280,17,1281,15,
1282,4,34,37,0,
82,0,111,0,116,
0,97,0,116,0,
105,0,111,0,110,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1283,20,1284,4,
36,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,264,1,
3,1,10,1,9,
1285,22,1,110,1,
63,1286,17,1287,15,
1288,4,38,37,0,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1289,20,1290,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,301,1,3,1,
5,1,4,1291,22,
1,147,1,66,1292,
17,1293,15,1288,1,
-1,1,5,1294,20,
1295,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,51,0,1,302,
1,3,1,7,1,
6,1296,22,1,148,
1,67,1297,17,1298,
15,1288,1,-1,1,
5,1299,20,1300,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,306,1,3,
1,8,1,7,1301,
22,1,152,1,68,
1302,17,1303,15,1288,
1,-1,1,5,1304,
20,1305,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
304,1,3,1,8,
1,7,1306,22,1,
150,1,69,1307,17,
1308,15,1288,1,-1,
1,5,1309,20,1310,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
54,0,1,305,1,
3,1,6,1,5,
1311,22,1,151,1,
70,1312,17,1313,15,
1288,1,-1,1,5,
1314,20,1315,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,52,0,
1,303,1,3,1,
6,1,5,1316,22,
1,149,1,74,1317,
17,1318,15,1288,1,
-1,1,5,1319,20,
1320,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,57,0,1,308,
1,3,1,7,1,
6,1321,22,1,154,
1,1013,1322,17,1323,
15,1168,1,-1,1,
5,1324,20,1325,4,
46,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,298,1,
3,1,4,1,3,
1326,22,1,144,1,
1332,1327,17,1328,15,
1162,1,-1,1,5,
1329,20,1330,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,57,0,1,250,
1,3,1,6,1,
5,1331,22,1,96,
1,2337,1332,17,1206,
1,0,1210,1,1585,
1333,17,1334,15,1335,
4,32,37,0,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1336,20,
1337,4,34,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,257,1,
3,1,2,1,1,
1338,22,1,103,1,
2023,1339,17,1340,15,
1201,1,-1,1,5,
1341,20,1342,4,26,
83,0,116,0,97,
0,116,0,101,0,
67,0,104,0,97,
0,110,0,103,0,
101,0,95,0,50,
0,1,215,1,3,
1,3,1,2,1343,
22,1,61,1,2136,
906,1,82,1344,17,
1345,15,1346,4,32,
37,0,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1347,20,1348,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,297,1,3,1,
3,1,2,1349,22,
1,143,1,2026,1350,
17,1351,15,1352,4,
28,37,0,74,0,
117,0,109,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1353,20,
1354,4,30,74,0,
117,0,109,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,213,
1,3,1,3,1,
2,1355,22,1,59,
1,1591,1356,17,1357,
15,1335,1,-1,1,
5,1358,20,1359,4,
34,82,0,101,0,
116,0,117,0,114,
0,110,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,256,1,3,1,
3,1,2,1360,22,
1,102,1,1341,1361,
17,1362,15,1162,1,
-1,1,5,1363,20,
1364,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,54,0,1,
237,1,3,1,4,
1,3,1365,22,1,
83,1,2030,795,1,
328,1366,17,1367,15,
1185,1,-1,1,5,
1368,20,1369,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,50,
0,1,278,1,3,
1,4,1,3,1370,
22,1,124,1,1303,
1371,17,1372,15,1162,
1,-1,1,5,1373,
20,1374,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,55,0,
1,238,1,3,1,
6,1,5,1375,22,
1,84,1,1096,1376,
17,1377,15,1378,4,
26,37,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,1,-1,1,
5,1379,20,1380,4,
28,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
95,0,49,0,1,
309,1,3,1,5,
1,4,1381,22,1,
155,1,93,1382,17,
1383,15,1346,1,-1,
1,5,1384,20,1385,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,50,
0,1,296,1,3,
1,3,1,2,1386,
22,1,142,1,1550,
1387,17,1388,15,1162,
1,-1,1,5,1389,
20,1390,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
51,0,1,244,1,
3,1,4,1,3,
1391,22,1,90,1,
2040,1392,16,0,581,
1,2106,1393,17,1206,
1,0,1210,1,1555,
1394,16,0,658,1,
827,1395,17,1396,15,
1185,1,-1,1,5,
1397,20,1398,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,53,0,1,291,
1,3,1,4,1,
3,1399,22,1,137,
1,1859,1400,16,0,
317,1,1860,885,1,
1804,1401,17,1206,1,
0,1210,1,107,1402,
17,1403,15,1346,1,
-1,1,5,1404,20,
1405,4,34,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,295,1,
3,1,3,1,2,
1406,22,1,141,1,
1114,1407,17,1249,1,
3,1253,1,1048,1408,
17,1409,15,1185,1,
-1,1,5,1410,20,
1411,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,56,
0,1,294,1,3,
1,4,1,3,1412,
22,1,140,1,352,
1413,17,1414,15,1185,
1,-1,1,5,1415,
20,1416,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,277,1,3,1,
4,1,3,1417,22,
1,123,1,1872,1418,
16,0,327,1,1873,
899,1,118,1419,17,
1420,15,1185,1,-1,
1,5,1421,20,1422,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,52,0,
1,290,1,3,1,
4,1,3,1423,22,
1,136,1,1123,1424,
17,1425,15,1162,1,
-1,1,5,1426,20,
1427,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,243,1,3,
1,6,1,5,1428,
22,1,89,1,371,
1429,17,1430,15,1431,
4,46,37,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1432,20,1433,
4,48,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,276,1,3,1,
2,1,1,1434,22,
1,122,1,1377,1435,
17,1436,15,1162,1,
-1,1,5,1437,20,
1438,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,53,0,1,
236,1,3,1,4,
1,3,1439,22,1,
82,1,375,1440,17,
1441,15,1256,1,-1,
1,5,1442,20,1443,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
56,0,1,275,1,
3,1,5,1,4,
1444,22,1,121,1,
377,1445,17,1446,15,
1256,1,-1,1,5,
1447,20,1448,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,53,0,
1,272,1,3,1,
3,1,2,1449,22,
1,118,1,379,1450,
17,1451,15,1256,1,
-1,1,5,1452,20,
1453,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,55,0,1,274,
1,3,1,5,1,
4,1454,22,1,120,
1,380,1455,17,1456,
15,1457,4,38,37,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1458,20,1459,4,
40,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,265,1,3,
1,2,1,1,1460,
22,1,111,1,883,
1461,17,1462,15,1185,
1,-1,1,5,1463,
20,1464,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
54,0,1,292,1,
3,1,4,1,3,
1465,22,1,138,1,
1628,1466,17,1467,15,
1468,4,22,37,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1469,
20,1470,4,24,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,230,
1,3,1,4,1,
3,1471,22,1,76,
1,2075,1472,17,1206,
1,0,1210,1,373,
1473,17,1474,15,1256,
1,-1,1,5,1475,
20,1476,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
273,1,3,1,3,
1,2,1477,22,1,
119,1,130,1478,17,
1479,15,1185,1,-1,
1,5,1480,20,1481,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,51,0,
1,289,1,3,1,
4,1,3,1482,22,
1,135,1,143,1483,
17,1484,15,1185,1,
-1,1,5,1485,20,
1486,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,50,
0,1,288,1,3,
1,4,1,3,1487,
22,1,134,1,1901,
1488,17,1206,1,0,
1210,1,1152,1489,17,
1490,15,1162,1,-1,
1,5,1491,20,1492,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,52,0,
1,255,1,3,1,
6,1,5,1493,22,
1,101,1,1406,1494,
17,1495,15,1162,1,
-1,1,5,1496,20,
1497,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,55,
0,1,248,1,3,
1,4,1,3,1498,
22,1,94,1,1659,
1499,16,0,270,1,
2413,1500,17,1206,1,
0,1210,1,1159,1501,
17,1502,15,1162,1,
-1,1,5,1503,20,
1504,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,49,
0,1,242,1,3,
1,6,1,5,1505,
22,1,88,1,157,
1506,17,1507,15,1185,
1,-1,1,5,1508,
20,1509,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
49,0,1,287,1,
3,1,4,1,3,
1510,22,1,133,1,
1413,1511,17,1512,15,
1162,1,-1,1,5,
1513,20,1514,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,235,1,3,
1,4,1,3,1515,
22,1,81,1,1370,
1516,17,1517,15,1162,
1,-1,1,5,1518,
20,1519,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
56,0,1,249,1,
3,1,4,1,3,
1520,22,1,95,1,
1478,1521,17,1522,15,
1162,1,-1,1,5,
1523,20,1524,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,53,0,1,246,
1,3,1,4,1,
3,1525,22,1,92,
1,1620,1526,17,1527,
15,1468,1,-1,1,
5,1528,20,1529,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,231,1,3,1,
2,1,1,1530,22,
1,77,1,1621,1531,
16,0,726,1,1574,
863,1,172,1532,17,
1533,15,1185,1,-1,
1,5,1534,20,1535,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,48,0,
1,286,1,3,1,
4,1,3,1536,22,
1,132,1,1931,925,
1,1665,1537,17,1538,
15,1220,1,-1,1,
5,1539,20,1540,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,226,1,
3,1,2,1,1,
1541,22,1,72,1,
2364,891,1,2105,878,
1,1188,1542,17,1543,
15,1162,1,-1,1,
5,1544,20,1545,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,51,0,1,
254,1,3,1,6,
1,5,1546,22,1,
100,1,1442,1547,17,
1548,15,1162,1,-1,
1,5,1549,20,1550,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,54,0,
1,247,1,3,1,
4,1,3,1551,22,
1,93,1,1694,1552,
16,0,199,1,942,
1553,17,1554,15,1185,
1,-1,1,5,1555,
20,1556,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
55,0,1,293,1,
3,1,4,1,3,
1557,22,1,139,1,
2198,1558,17,1206,1,
0,1210,1,1195,1559,
17,1560,15,1162,1,
-1,1,5,1561,20,
1562,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,241,1,3,
1,6,1,5,1563,
22,1,87,1,1449,
1564,17,1565,15,1162,
1,-1,1,5,1566,
20,1567,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,234,1,3,1,
4,1,3,1568,22,
1,80,1,1701,1569,
17,1570,15,1220,1,
-1,1,5,1571,20,
1572,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
228,1,3,1,4,
1,3,1573,22,1,
74,1,447,1574,17,
1575,15,1576,4,30,
37,0,86,0,101,
0,99,0,116,0,
111,0,114,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1577,
20,1578,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,263,1,3,
1,8,1,7,1579,
22,1,109,1,2458,
940,1,2459,946,1,
1958,1580,17,1206,1,
0,1210,1,188,1581,
17,1582,15,1185,1,
-1,1,5,1583,20,
1584,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,57,0,1,
285,1,3,1,4,
1,3,1585,22,1,
131,1,2462,953,1,
1657,958,1,2464,963,
1,2717,1586,16,0,
192,1,205,1587,17,
1588,15,1185,1,-1,
1,5,1589,20,1590,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,284,
1,3,1,4,1,
3,1591,22,1,130,
1,2724,1592,16,0,
337,1,2227,972,1,
1224,1593,17,1594,15,
1162,1,-1,1,5,
1595,20,1596,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,50,0,1,253,
1,3,1,6,1,
5,1597,22,1,99,
1,223,1598,17,1599,
15,1185,1,-1,1,
5,1600,20,1601,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
55,0,1,283,1,
3,1,4,1,3,
1602,22,1,129,1,
1730,1603,17,1604,15,
1220,1,-1,1,5,
1605,20,1606,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,229,1,3,
1,4,1,3,1607,
22,1,75,1,476,
1608,17,1609,15,1610,
4,18,37,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1611,
20,1612,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,52,0,1,
261,1,3,1,2,
1,1,1613,22,1,
107,1,477,1614,17,
1615,15,1610,1,-1,
1,5,1616,20,1617,
4,20,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
51,0,1,260,1,
3,1,2,1,1,
1618,22,1,106,1,
1231,1619,17,1620,15,
1162,1,-1,1,5,
1621,20,1622,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,57,
0,1,240,1,3,
1,6,1,5,1623,
22,1,86,1,479,
1624,17,1625,15,1610,
1,-1,1,5,1626,
20,1627,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,49,0,1,
258,1,3,1,2,
1,1,1628,22,1,
104,1,480,1629,17,
1630,15,1631,4,26,
37,0,76,0,105,
0,115,0,116,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,-1,1,5,
1632,20,1633,4,28,
76,0,105,0,115,
0,116,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,49,0,1,262,
1,3,1,4,1,
3,1634,22,1,108,
1,1485,1635,17,1636,
15,1162,1,-1,1,
5,1637,20,1638,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,233,1,
3,1,4,1,3,
1639,22,1,79,1,
1737,1640,16,0,272,
1,1989,980,1,1990,
1641,17,1206,1,0,
1210,1,242,1642,17,
1643,15,1185,1,-1,
1,5,1644,20,1645,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,282,
1,3,1,4,1,
3,1646,22,1,128,
1,478,1647,17,1648,
15,1610,1,-1,1,
5,1649,20,1650,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,50,
0,1,259,1,3,
1,2,1,1,1651,
22,1,105,1,1001,
1652,17,1653,15,1288,
1,-1,1,5,1654,
20,1655,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,56,0,1,
307,1,3,1,5,
1,4,1656,22,1,
153,1,1002,1657,17,
1658,15,1288,1,-1,
1,5,1659,20,1660,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,300,1,
3,1,5,1,4,
1661,22,1,146,1,
12,1662,19,160,1,
12,1663,5,47,1,
1901,1664,16,0,158,
1,2075,1665,16,0,
158,1,1860,885,1,
1803,851,1,1804,1666,
16,0,158,1,2520,
1667,16,0,158,1,
2413,1668,16,0,158,
1,2198,1669,16,0,
158,1,1657,958,1,
1873,899,1,2529,1670,
16,0,158,1,2534,
1671,16,0,158,1,
1990,1672,16,0,158,
1,31,1673,16,0,
158,1,32,1674,16,
0,158,1,2105,878,
1,2106,1675,16,0,
158,1,2549,1676,16,
0,158,1,2604,1677,
16,0,288,1,2227,
972,1,2337,1678,16,
0,158,1,2021,782,
1,2458,940,1,2459,
946,1,2462,953,1,
2136,906,1,2464,963,
1,2029,789,1,2030,
795,1,2031,800,1,
2032,805,1,2469,1679,
16,0,506,1,2035,
816,1,2364,891,1,
2039,826,1,1931,925,
1,2041,832,1,2043,
838,1,2045,843,1,
2511,1680,16,0,158,
1,1775,1681,16,0,
158,1,1989,980,1,
2033,810,1,2037,821,
1,2713,1682,16,0,
158,1,1574,863,1,
1958,1683,16,0,158,
1,13,1684,19,496,
1,13,1685,5,46,
1,2536,1686,17,1687,
15,1688,4,36,37,
0,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1689,
20,1690,4,38,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,181,1,
3,1,5,1,4,
1691,22,1,26,1,
2513,1692,17,1693,15,
1694,4,40,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1695,20,1696,
4,42,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
184,1,3,1,6,
1,5,1697,22,1,
29,1,1860,885,1,
2522,1698,17,1699,15,
1700,4,34,37,0,
73,0,110,0,116,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1701,20,1702,4,
36,73,0,110,0,
116,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,183,1,
3,1,6,1,5,
1703,22,1,28,1,
1873,899,1,1657,958,
1,2531,1704,17,1705,
15,1706,4,34,37,
0,75,0,101,0,
121,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1707,20,1708,
4,36,75,0,101,
0,121,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,182,
1,3,1,6,1,
5,1709,22,1,27,
1,1989,980,1,2645,
1710,16,0,733,1,
2037,821,1,32,1711,
16,0,501,1,2105,
878,1,2464,963,1,
2551,1712,17,1713,15,
1714,4,22,37,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1715,
20,1716,4,24,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,180,
1,3,1,6,1,
5,1717,22,1,25,
1,2553,1718,16,0,
721,1,2227,972,1,
1574,863,1,1803,851,
1,2458,940,1,2459,
946,1,2462,953,1,
2136,906,1,2599,1719,
17,1720,15,1721,4,
20,37,0,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,1,-1,1,5,
1722,20,1723,4,22,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,95,0,
57,0,1,178,1,
3,1,2,1,1,
1724,22,1,23,1,
2029,789,1,2030,795,
1,2031,800,1,2032,
805,1,2033,810,1,
2035,816,1,2364,891,
1,2039,826,1,1931,
925,1,2041,832,1,
2021,782,1,2043,838,
1,2045,843,1,2593,
1725,17,1726,15,1721,
1,-1,1,5,1727,
20,1728,4,24,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,48,0,1,179,
1,3,1,3,1,
2,1729,22,1,24,
1,2594,1730,17,1731,
15,1721,1,-1,1,
5,1732,20,1733,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,56,0,1,177,
1,3,1,3,1,
2,1734,22,1,22,
1,2595,1735,17,1736,
15,1721,1,-1,1,
5,1737,20,1738,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,54,0,1,175,
1,3,1,3,1,
2,1739,22,1,20,
1,2596,1740,17,1741,
15,1721,1,-1,1,
5,1742,20,1743,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,52,0,1,173,
1,3,1,3,1,
2,1744,22,1,18,
1,2597,1745,17,1746,
15,1721,1,-1,1,
5,1747,20,1748,4,
22,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,95,
0,50,0,1,171,
1,3,1,3,1,
2,1749,22,1,16,
1,2413,1750,16,0,
494,1,2600,1751,17,
1752,15,1721,1,-1,
1,5,1753,20,1754,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,55,0,1,
176,1,3,1,2,
1,1,1755,22,1,
21,1,2601,1756,17,
1757,15,1721,1,-1,
1,5,1758,20,1759,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,53,0,1,
174,1,3,1,2,
1,1,1760,22,1,
19,1,2602,1761,17,
1762,15,1721,1,-1,
1,5,1763,20,1764,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,51,0,1,
172,1,3,1,2,
1,1,1765,22,1,
17,1,2603,1766,17,
1767,15,1721,1,-1,
1,5,1768,20,1769,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,1,
170,1,3,1,2,
1,1,1770,22,1,
15,1,14,1771,19,
144,1,14,1772,5,
105,1,1260,1160,1,
1011,1166,1,1514,1172,
1,9,1177,1,10,
1773,17,1774,15,1775,
4,48,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,140,
1,0,1,0,1776,
22,1,30,1,262,
1183,1,1267,1189,1,
1521,1194,1,1773,1777,
16,0,148,1,19,
1211,1,20,1778,16,
0,142,1,2281,1218,
1,525,1280,1,2538,
1779,17,1780,15,1775,
1,-1,1,5,140,
1,0,1,0,1776,
1,30,1781,17,1782,
15,1775,1,-1,1,
5,1783,20,1784,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,50,
0,1,186,1,3,
1,4,1,3,1785,
22,1,32,1,283,
1236,1,2547,1786,16,
0,142,1,40,1241,
1,41,1787,17,1788,
15,1789,4,26,37,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,660,
1,0,1,0,1790,
22,1,156,1,42,
1791,17,1792,15,1793,
4,38,37,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1794,
20,1795,4,40,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
312,1,3,1,2,
1,1,1796,22,1,
159,1,44,1247,1,
47,1248,1,48,1254,
1,49,1260,1,50,
1265,1,51,1270,1,
305,1275,1,63,1286,
1,66,1292,1,67,
1297,1,1478,1521,1,
69,1307,1,70,1312,
1,68,1302,1,74,
1317,1,1013,1322,1,
2335,1797,16,0,148,
1,1332,1327,1,1048,
1408,1,82,1344,1,
1296,1231,1,1341,1361,
1,328,1366,1,1303,
1371,1,1096,1376,1,
93,1382,1,1550,1387,
1,352,1413,1,107,
1402,1,1114,1407,1,
1370,1516,1,118,1419,
1,1123,1424,1,371,
1429,1,1377,1435,1,
375,1440,1,377,1445,
1,379,1450,1,380,
1455,1,883,1461,1,
373,1473,1,130,1478,
1,143,1483,1,1152,
1489,1,387,1798,16,
0,610,1,1406,1494,
1,1159,1501,1,157,
1506,1,1413,1511,1,
1665,1537,1,412,1799,
16,0,624,1,1094,
1800,16,0,662,1,
172,1532,1,827,1395,
1,1188,1542,1,437,
1801,16,0,706,1,
1442,1547,1,1694,1802,
16,0,148,1,942,
1553,1,1195,1559,1,
2702,1803,17,1804,15,
1775,1,-1,1,5,
140,1,0,1,0,
1776,1,1449,1564,1,
1701,1569,1,447,1574,
1,2711,1805,16,0,
142,1,188,1581,1,
205,1587,1,2467,1806,
17,1807,15,1775,1,
-1,1,5,1808,20,
1809,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,185,
1,3,1,2,1,
1,1810,22,1,31,
1,461,1811,16,0,
662,1,464,1812,17,
1813,15,1789,1,-1,
1,5,1814,20,1815,
4,28,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,311,1,3,1,
4,1,3,1816,22,
1,158,1,1224,1593,
1,223,1598,1,1730,
1603,1,476,1608,1,
477,1614,1,1231,1619,
1,479,1624,1,480,
1629,1,1485,1635,1,
459,1817,17,1818,15,
1789,1,-1,1,5,
660,1,0,1,0,
1790,1,242,1642,1,
478,1647,1,481,1819,
17,1820,15,1789,1,
-1,1,5,1821,20,
1822,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,310,1,3,
1,2,1,1,1823,
22,1,157,1,1001,
1652,1,1002,1657,1,
15,1824,19,312,1,
15,1825,5,6,1,
2717,1826,16,0,696,
1,1114,1827,16,0,
310,1,1621,1828,16,
0,705,1,40,1829,
16,0,606,1,19,
1211,1,9,1177,1,
16,1830,19,136,1,
16,1831,5,143,1,
2514,1832,16,0,330,
1,256,1833,16,0,
190,1,1261,1834,16,
0,190,1,509,1835,
16,0,190,1,9,
1836,16,0,134,1,
2523,1837,16,0,479,
1,1775,1838,16,0,
190,1,2029,789,1,
2532,1839,16,0,599,
1,2031,800,1,2032,
805,1,2033,810,1,
277,1840,16,0,190,
1,2537,1841,16,0,
497,1,2037,821,1,
2039,826,1,32,1842,
16,0,190,1,2041,
832,1,2293,1843,16,
0,190,1,2043,838,
1,2045,843,1,40,
1844,16,0,169,1,
41,1845,16,0,190,
1,1297,1846,16,0,
190,1,43,1847,16,
0,190,1,44,1848,
16,0,169,1,1803,
851,1,1804,1849,16,
0,190,1,299,1850,
16,0,190,1,2480,
1851,17,1852,15,1853,
4,24,37,0,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1854,20,1855,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,344,1,3,
1,2,1,1,1856,
22,1,191,1,52,
1857,16,0,190,1,
2484,1858,17,1859,15,
1860,4,24,37,0,
75,0,101,0,121,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1861,20,1862,4,
26,75,0,101,0,
121,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,340,1,
3,1,2,1,1,
1863,22,1,187,1,
1515,1864,16,0,190,
1,2318,1865,16,0,
190,1,2491,1866,17,
1867,15,1868,4,26,
37,0,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1869,20,1870,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,1,333,
1,3,1,2,1,
1,1871,22,1,180,
1,62,1872,16,0,
209,1,63,1873,16,
0,169,1,2495,1874,
17,1875,15,1876,4,
12,37,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1877,20,1878,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,48,0,1,329,
1,3,1,2,1,
1,1879,22,1,176,
1,2075,1880,16,0,
190,1,1574,863,1,
1479,1881,16,0,190,
1,71,1882,16,0,
190,1,1658,1883,16,
0,730,1,1833,1884,
16,0,296,1,1834,
1885,16,0,190,1,
2337,1886,16,0,190,
1,79,1887,16,0,
190,1,1335,1888,16,
0,190,1,322,1889,
16,0,190,1,76,
1890,16,0,190,1,
85,1891,16,0,190,
1,2030,795,1,89,
1892,16,0,190,1,
2035,816,1,346,1893,
16,0,190,1,97,
1894,16,0,190,1,
2106,1895,16,0,190,
1,102,1896,16,0,
190,1,1860,885,1,
2458,940,1,2364,891,
1,1990,1897,16,0,
190,1,112,1898,16,
0,190,1,1117,1899,
16,0,190,1,1873,
899,1,1875,1900,16,
0,417,1,1876,1901,
16,0,190,1,124,
1902,16,0,190,1,
2478,1903,17,1904,15,
1853,1,-1,1,5,
1905,20,1906,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,54,
0,1,346,1,3,
1,2,1,1,1907,
22,1,193,1,2136,
906,1,2718,1908,16,
0,190,1,381,1909,
16,0,190,1,525,
1910,16,0,190,1,
137,1911,16,0,190,
1,2021,782,1,1901,
1912,16,0,190,1,
1153,1913,16,0,190,
1,151,1914,16,0,
190,1,1407,1915,16,
0,190,1,1659,1916,
16,0,190,1,2413,
1917,16,0,190,1,
406,1918,16,0,190,
1,1371,1919,16,0,
190,1,2105,878,1,
166,1920,16,0,190,
1,1622,1921,16,0,
190,1,1931,925,1,
1932,1922,16,0,509,
1,1933,1923,16,0,
190,1,431,1924,16,
0,190,1,1585,1925,
16,0,190,1,182,
1926,16,0,190,1,
1189,1927,16,0,190,
1,1443,1928,16,0,
190,1,1695,1929,16,
0,190,1,2198,1930,
16,0,190,1,2701,
1931,16,0,675,1,
447,1932,16,0,190,
1,199,1933,16,0,
190,1,2459,946,1,
1958,1934,16,0,190,
1,2462,953,1,1657,
958,1,2464,963,1,
459,1935,16,0,190,
1,462,1936,16,0,
190,1,2471,1937,17,
1938,15,1939,4,30,
37,0,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1940,
20,1941,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,1,353,1,3,
1,2,1,1,1942,
22,1,200,1,2472,
1943,17,1944,15,1939,
1,-1,1,5,1945,
20,1946,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,1,352,1,3,
1,2,1,1,1947,
22,1,199,1,2473,
1948,17,1949,15,1939,
1,-1,1,5,1950,
20,1951,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,351,1,3,
1,2,1,1,1952,
22,1,198,1,2474,
1953,17,1954,15,1853,
1,-1,1,5,1955,
20,1956,4,28,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
48,0,1,350,1,
3,1,2,1,1,
1957,22,1,197,1,
2475,1958,17,1959,15,
1853,1,-1,1,5,
1960,20,1961,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,57,
0,1,349,1,3,
1,2,1,1,1962,
22,1,196,1,2476,
1963,17,1964,15,1853,
1,-1,1,5,1965,
20,1966,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,56,0,
1,348,1,3,1,
2,1,1,1967,22,
1,195,1,2477,1968,
17,1969,15,1853,1,
-1,1,5,1970,20,
1971,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
347,1,3,1,2,
1,1,1972,22,1,
194,1,2227,972,1,
2479,1973,17,1974,15,
1853,1,-1,1,5,
1975,20,1976,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,53,
0,1,345,1,3,
1,2,1,1,1977,
22,1,192,1,1225,
1978,16,0,190,1,
2481,1979,17,1980,15,
1853,1,-1,1,5,
1981,20,1982,4,26,
73,0,110,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,1,343,1,3,
1,2,1,1,1983,
22,1,190,1,2482,
1984,17,1985,15,1853,
1,-1,1,5,1986,
20,1987,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
1,342,1,3,1,
2,1,1,1988,22,
1,189,1,2483,1989,
17,1990,15,1853,1,
-1,1,5,1991,20,
1992,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
341,1,3,1,2,
1,1,1993,22,1,
188,1,1731,1994,16,
0,190,1,2485,1995,
17,1996,15,1860,1,
-1,1,5,1997,20,
1998,4,26,75,0,
101,0,121,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
339,1,3,1,2,
1,1,1999,22,1,
186,1,2486,2000,17,
2001,15,1868,1,-1,
1,5,2002,20,2003,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,56,0,
1,338,1,3,1,
2,1,1,2004,22,
1,185,1,2487,2005,
17,2006,15,1868,1,
-1,1,5,2007,20,
2008,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,55,
0,1,337,1,3,
1,2,1,1,2009,
22,1,184,1,2488,
2010,17,2011,15,1868,
1,-1,1,5,2012,
20,2013,4,28,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
54,0,1,336,1,
3,1,2,1,1,
2014,22,1,183,1,
2489,2015,17,2016,15,
1868,1,-1,1,5,
2017,20,2018,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,53,0,1,335,
1,3,1,2,1,
1,2019,22,1,182,
1,2490,2020,17,2021,
15,1868,1,-1,1,
5,2022,20,2023,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,52,0,1,
334,1,3,1,2,
1,1,2024,22,1,
181,1,1989,980,1,
2492,2025,17,2026,15,
1868,1,-1,1,5,
2027,20,2028,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,1,332,
1,3,1,2,1,
1,2029,22,1,179,
1,2493,2030,17,2031,
15,1868,1,-1,1,
5,2032,20,2033,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
331,1,3,1,2,
1,1,2034,22,1,
178,1,2494,2035,17,
2036,15,1876,1,-1,
1,5,2037,20,2038,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,49,0,1,330,
1,3,1,2,1,
1,2039,22,1,177,
1,236,2040,16,0,
190,1,2496,2041,17,
2042,15,1876,1,-1,
1,5,2043,20,2044,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,57,
0,1,328,1,3,
1,2,1,1,2045,
22,1,175,1,2497,
2046,17,2047,15,1876,
1,-1,1,5,2048,
20,2049,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,56,0,1,327,
1,3,1,2,1,
1,2050,22,1,174,
1,2498,2051,17,2052,
15,1876,1,-1,1,
5,2053,20,2054,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,55,0,
1,326,1,3,1,
2,1,1,2055,22,
1,173,1,2499,2056,
17,2057,15,1876,1,
-1,1,5,2058,20,
2059,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
54,0,1,325,1,
3,1,2,1,1,
2060,22,1,172,1,
2500,2061,17,2062,15,
1876,1,-1,1,5,
2063,20,2064,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,53,0,1,
324,1,3,1,2,
1,1,2065,22,1,
171,1,2501,2066,17,
2067,15,1876,1,-1,
1,5,2068,20,2069,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,323,1,3,
1,2,1,1,2070,
22,1,170,1,2502,
2071,17,2072,15,1876,
1,-1,1,5,2073,
20,2074,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,1,322,
1,3,1,2,1,
1,2075,22,1,169,
1,2503,2076,17,2077,
15,1876,1,-1,1,
5,2078,20,2079,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
1,321,1,3,1,
2,1,1,2080,22,
1,168,1,2504,2081,
17,2082,15,1876,1,
-1,1,5,2083,20,
2084,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,320,1,
3,1,2,1,1,
2085,22,1,167,1,
2505,2086,16,0,450,
1,217,2087,16,0,
190,1,1756,2088,16,
0,190,1,17,2089,
19,157,1,17,2090,
5,127,1,2510,2091,
16,0,634,1,1,
2092,17,2093,15,2094,
4,18,37,0,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
1,-1,1,5,2095,
20,2096,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,55,0,1,
319,1,3,1,2,
1,1,2097,22,1,
166,1,2,2098,17,
2099,15,2094,1,-1,
1,5,2100,20,2101,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
54,0,1,318,1,
3,1,2,1,1,
2102,22,1,165,1,
3,2103,17,2104,15,
2094,1,-1,1,5,
2105,20,2106,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,53,0,
1,317,1,3,1,
2,1,1,2107,22,
1,164,1,4,2108,
17,2109,15,2094,1,
-1,1,5,2110,20,
2111,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,52,0,1,316,
1,3,1,2,1,
1,2112,22,1,163,
1,5,2113,17,2114,
15,2094,1,-1,1,
5,2115,20,2116,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,51,
0,1,315,1,3,
1,2,1,1,2117,
22,1,162,1,6,
2118,17,2119,15,2094,
1,-1,1,5,2120,
20,2121,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,50,0,1,
314,1,3,1,2,
1,1,2122,22,1,
161,1,7,2123,17,
2124,15,2094,1,-1,
1,5,2125,20,2126,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
49,0,1,313,1,
3,1,2,1,1,
2127,22,1,160,1,
2518,2128,17,2129,15,
2130,4,54,37,0,
73,0,110,0,116,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,1,-1,1,
5,2131,20,2132,4,
56,73,0,110,0,
116,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,188,1,
3,1,2,1,1,
2133,22,1,34,1,
9,1177,1,10,1773,
1,262,1183,1,1267,
1189,1,1521,1194,1,
1773,2134,16,0,242,
1,2527,2135,17,2136,
15,2137,4,54,37,
0,75,0,101,0,
121,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,2138,20,2139,
4,56,75,0,101,
0,121,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,187,
1,3,1,2,1,
1,2140,22,1,33,
1,2528,2141,16,0,
486,1,19,1211,1,
20,2142,16,0,155,
1,2281,1218,1,2533,
2143,16,0,492,1,
2538,1779,1,30,1781,
1,1002,1657,1,283,
1236,1,2547,2144,16,
0,607,1,1010,2145,
16,0,648,1,40,
1241,1,41,1787,1,
42,1791,1,44,1247,
1,1260,1160,1,47,
1248,1,48,1254,1,
49,1260,1,50,1265,
1,51,1270,1,305,
1275,1,1514,1172,1,
525,1280,1,61,2146,
16,0,201,1,63,
1286,1,66,1292,1,
67,1297,1,68,1302,
1,69,1307,1,70,
1312,1,73,2147,16,
0,211,1,74,1317,
1,1013,1322,1,2335,
2148,16,0,244,1,
1332,1327,1,1048,1408,
1,82,1344,1,1840,
2149,16,0,316,1,
1341,1361,1,2517,2150,
17,2151,15,2152,4,
30,37,0,73,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
2153,20,2154,4,32,
73,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,192,1,
3,1,3,1,2,
2155,22,1,38,1,
2519,2156,16,0,646,
1,1303,1371,1,1096,
1376,1,93,1382,1,
1550,1387,1,2526,2157,
17,2158,15,2159,4,
30,37,0,75,0,
101,0,121,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
2160,20,2161,4,32,
75,0,101,0,121,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,191,1,
3,1,3,1,2,
2162,22,1,37,1,
827,1395,1,1011,1166,
1,107,1402,1,1114,
1407,1,328,1366,1,
1871,2163,16,0,326,
1,1370,1516,1,1478,
1521,1,118,1419,1,
1123,1424,1,371,1429,
1,1377,1435,1,375,
1440,1,1882,2164,16,
0,344,1,377,1445,
1,352,1413,1,379,
1450,1,380,1455,1,
130,1478,1,2074,2165,
16,0,609,1,373,
1473,1,1012,2166,16,
0,650,1,143,1483,
1,1152,1489,1,1406,
1494,1,1159,1501,1,
157,1506,1,1413,1511,
1,883,1461,1,1094,
2167,16,0,724,1,
1296,1231,1,172,1532,
1,1665,1537,1,1939,
2168,16,0,464,1,
1188,1542,1,1442,1547,
1,188,1581,1,942,
1553,1,1195,1559,1,
2702,1803,1,1449,1564,
1,1701,1569,1,447,
1574,1,2711,2169,16,
0,693,1,205,1587,
1,2467,1806,1,464,
1812,1,2197,2170,16,
0,718,1,1224,1593,
1,223,1598,1,1730,
1603,1,476,1608,1,
477,1614,1,1231,1619,
1,479,1624,1,480,
1629,1,1485,1635,1,
459,1817,1,242,1642,
1,478,1647,1,481,
1819,1,1001,1652,1,
2508,2171,17,2172,15,
2173,4,36,37,0,
86,0,101,0,99,
0,116,0,111,0,
114,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,2174,20,
2175,4,38,86,0,
101,0,99,0,116,
0,111,0,114,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,95,0,49,
0,1,193,1,3,
1,3,1,2,2176,
22,1,39,1,2509,
2177,17,2178,15,2179,
4,60,37,0,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,1,-1,1,
5,2180,20,2181,4,
62,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,189,
1,3,1,2,1,
1,2182,22,1,35,
1,18,2183,19,539,
1,18,2184,5,84,
1,1011,1166,1,1012,
2185,16,0,537,1,
1013,1322,1,262,1183,
1,1267,2186,16,0,
537,1,515,2187,16,
0,537,1,1521,2188,
16,0,537,1,525,
1280,1,283,1236,1,
2299,2189,16,0,537,
1,42,2190,16,0,
537,1,40,1241,1,
44,1247,1,47,1248,
1,1303,2191,16,0,
537,1,1555,2192,16,
0,537,1,50,1265,
1,48,1254,1,49,
1260,1,51,1270,1,
63,1286,1,305,1275,
1,66,1292,1,67,
1297,1,68,1302,1,
69,1307,1,70,1312,
1,73,2193,16,0,
537,1,74,1317,1,
328,1366,1,1048,2194,
16,0,537,1,82,
2195,16,0,537,1,
1840,2196,16,0,537,
1,1591,2197,16,0,
537,1,1341,2198,16,
0,537,1,1096,1376,
1,93,1382,1,352,
1413,1,107,2199,16,
0,537,1,1114,1407,
1,118,2200,16,0,
537,1,1123,2201,16,
0,537,1,371,1429,
1,1628,2202,16,0,
537,1,375,1440,1,
1882,2203,16,0,537,
1,377,1445,1,379,
1450,1,380,1455,1,
883,2204,16,0,537,
1,373,1473,1,130,
2205,16,0,537,1,
143,2206,16,0,537,
1,387,2207,16,0,
537,1,1159,2208,16,
0,537,1,157,2209,
16,0,537,1,1413,
2210,16,0,537,1,
1665,2211,16,0,537,
1,412,2212,16,0,
537,1,1377,2213,16,
0,537,1,172,2214,
16,0,537,1,1939,
2215,16,0,537,1,
437,2216,16,0,537,
1,188,2217,16,0,
537,1,942,2218,16,
0,537,1,1195,2219,
16,0,537,1,1449,
2220,16,0,537,1,
1701,2221,16,0,537,
1,447,1574,1,205,
2222,16,0,537,1,
827,2223,16,0,537,
1,2724,2224,16,0,
537,1,223,2225,16,
0,537,1,476,1608,
1,477,1614,1,1231,
2226,16,0,537,1,
479,1624,1,480,1629,
1,1485,2227,16,0,
537,1,1737,2228,16,
0,537,1,242,2229,
16,0,537,1,478,
1647,1,1001,1652,1,
1002,1657,1,19,2230,
19,233,1,19,2231,
5,176,1,256,2232,
16,0,231,1,1261,
2233,16,0,231,1,
1011,1166,1,1012,2234,
16,0,507,1,2458,
940,1,262,1183,1,
1267,2235,16,0,507,
1,2021,782,1,1521,
2236,16,0,507,1,
1775,2237,16,0,231,
1,2029,789,1,2030,
795,1,2031,800,1,
2032,805,1,2033,810,
1,277,2238,16,0,
231,1,2035,816,1,
2037,821,1,2039,826,
1,32,2239,16,0,
231,1,2464,963,1,
2293,2240,16,0,231,
1,2043,838,1,2045,
843,1,2299,2241,16,
0,507,1,41,2242,
16,0,231,1,42,
2243,16,0,507,1,
40,1241,1,44,1247,
1,43,2244,16,0,
231,1,1804,2245,16,
0,231,1,48,1254,
1,49,1260,1,47,
1248,1,51,1270,1,
52,2246,16,0,231,
1,50,1265,1,305,
1275,1,1096,1376,1,
1515,2247,16,0,231,
1,2318,2248,16,0,
231,1,283,1236,1,
63,1286,1,66,1292,
1,67,1297,1,68,
1302,1,69,1307,1,
70,1312,1,71,2249,
16,0,231,1,73,
2250,16,0,507,1,
74,1317,1,1013,1322,
1,76,2251,16,0,
231,1,1834,2252,16,
0,231,1,2337,2253,
16,0,231,1,79,
2254,16,0,231,1,
1335,2255,16,0,231,
1,299,2256,16,0,
231,1,82,2257,16,
0,507,1,1840,2258,
16,0,507,1,1297,
2259,16,0,231,1,
85,2260,16,0,231,
1,1341,2261,16,0,
507,1,89,2262,16,
0,231,1,1303,2263,
16,0,507,1,509,
2264,16,0,231,1,
93,1382,1,322,2265,
16,0,231,1,97,
2266,16,0,231,1,
2041,832,1,1555,2267,
16,0,507,1,827,
2268,16,0,507,1,
102,2269,16,0,231,
1,1860,885,1,1803,
851,1,2364,891,1,
107,2270,16,0,507,
1,1114,1407,1,112,
2271,16,0,231,1,
1117,2272,16,0,231,
1,352,1413,1,1873,
899,1,118,2273,16,
0,507,1,1123,2274,
16,0,507,1,371,
1429,1,515,2275,16,
0,507,1,1377,2276,
16,0,507,1,124,
2277,16,0,231,1,
1882,2278,16,0,507,
1,377,1445,1,379,
1450,1,380,1455,1,
130,2279,16,0,507,
1,346,2280,16,0,
231,1,2075,2281,16,
0,231,1,373,1473,
1,387,2282,16,0,
507,1,137,2283,16,
0,231,1,143,2284,
16,0,507,1,1901,
2285,16,0,231,1,
1048,2286,16,0,507,
1,1153,2287,16,0,
231,1,375,1440,1,
151,2288,16,0,231,
1,1407,2289,16,0,
231,1,1659,2290,16,
0,231,1,2413,2291,
16,0,231,1,1159,
2292,16,0,507,1,
381,2293,16,0,231,
1,157,2294,16,0,
507,1,1413,2295,16,
0,507,1,883,2296,
16,0,507,1,1371,
2297,16,0,231,1,
328,1366,1,2105,878,
1,2106,2298,16,0,
231,1,166,2299,16,
0,231,1,525,2300,
16,0,231,1,1622,
2301,16,0,231,1,
406,2302,16,0,231,
1,1574,863,1,172,
2303,16,0,507,1,
1931,925,1,412,2304,
16,0,507,1,1933,
2305,16,0,231,1,
1876,2306,16,0,231,
1,431,2307,16,0,
231,1,1585,2308,16,
0,231,1,182,2309,
16,0,231,1,1628,
2310,16,0,507,1,
1189,2311,16,0,231,
1,437,2312,16,0,
507,1,1591,2313,16,
0,507,1,188,2314,
16,0,507,1,1695,
2315,16,0,231,1,
2198,2316,16,0,231,
1,1195,2317,16,0,
507,1,1449,2318,16,
0,507,1,1701,2319,
16,0,507,1,447,
2320,16,0,231,1,
199,2321,16,0,231,
1,2459,946,1,1958,
2322,16,0,231,1,
2462,953,1,1657,958,
1,205,2323,16,0,
507,1,459,2324,16,
0,231,1,462,2325,
16,0,231,1,1665,
2326,16,0,507,1,
2724,2327,16,0,507,
1,2718,2328,16,0,
231,1,217,2329,16,
0,231,1,2227,972,
1,942,2330,16,0,
507,1,1225,2331,16,
0,231,1,223,2332,
16,0,507,1,1479,
2333,16,0,231,1,
1731,2334,16,0,231,
1,477,1614,1,1231,
2335,16,0,507,1,
479,1624,1,480,1629,
1,1485,2336,16,0,
507,1,1737,2337,16,
0,507,1,1989,980,
1,1990,2338,16,0,
231,1,1443,2339,16,
0,231,1,236,2340,
16,0,231,1,2136,
906,1,476,1608,1,
242,2341,16,0,507,
1,478,1647,1,1939,
2342,16,0,507,1,
1001,1652,1,1002,1657,
1,1756,2343,16,0,
231,1,20,2344,19,
484,1,20,2345,5,
84,1,1011,1166,1,
1012,2346,16,0,482,
1,1013,1322,1,262,
1183,1,1267,2347,16,
0,482,1,515,2348,
16,0,482,1,1521,
2349,16,0,482,1,
525,1280,1,283,1236,
1,2299,2350,16,0,
482,1,42,2351,16,
0,482,1,40,1241,
1,44,1247,1,47,
1248,1,1303,2352,16,
0,482,1,1555,2353,
16,0,482,1,50,
1265,1,48,1254,1,
49,1260,1,51,1270,
1,63,1286,1,305,
1275,1,66,1292,1,
67,1297,1,68,1302,
1,69,1307,1,70,
1312,1,73,2354,16,
0,482,1,74,1317,
1,328,2355,16,0,
482,1,1048,2356,16,
0,482,1,82,2357,
16,0,482,1,1840,
2358,16,0,482,1,
1591,2359,16,0,482,
1,1341,2360,16,0,
482,1,1096,1376,1,
93,1382,1,352,2361,
16,0,482,1,107,
2362,16,0,482,1,
1114,1407,1,118,2363,
16,0,482,1,1123,
2364,16,0,482,1,
371,1429,1,1628,2365,
16,0,482,1,375,
1440,1,1882,2366,16,
0,482,1,377,1445,
1,379,1450,1,380,
1455,1,883,2367,16,
0,482,1,373,1473,
1,130,2368,16,0,
482,1,143,2369,16,
0,482,1,387,2370,
16,0,482,1,1159,
2371,16,0,482,1,
157,2372,16,0,482,
1,1413,2373,16,0,
482,1,1665,2374,16,
0,482,1,412,2375,
16,0,482,1,1377,
2376,16,0,482,1,
172,2377,16,0,482,
1,1939,2378,16,0,
482,1,437,2379,16,
0,482,1,188,2380,
16,0,482,1,942,
2381,16,0,482,1,
1195,2382,16,0,482,
1,1449,2383,16,0,
482,1,1701,2384,16,
0,482,1,447,1574,
1,205,2385,16,0,
482,1,827,2386,16,
0,482,1,2724,2387,
16,0,482,1,223,
2388,16,0,482,1,
476,1608,1,477,1614,
1,1231,2389,16,0,
482,1,479,1624,1,
480,1629,1,1485,2390,
16,0,482,1,1737,
2391,16,0,482,1,
242,2392,16,0,482,
1,478,1647,1,1001,
1652,1,1002,1657,1,
21,2393,19,449,1,
21,2394,5,84,1,
1011,1166,1,1012,2395,
16,0,447,1,1013,
1322,1,262,1183,1,
1267,2396,16,0,447,
1,515,2397,16,0,
447,1,1521,2398,16,
0,447,1,525,1280,
1,283,1236,1,2299,
2399,16,0,447,1,
42,2400,16,0,447,
1,40,1241,1,44,
1247,1,47,1248,1,
1303,2401,16,0,447,
1,1555,2402,16,0,
447,1,50,1265,1,
48,1254,1,49,1260,
1,51,1270,1,63,
1286,1,305,1275,1,
66,1292,1,67,1297,
1,68,1302,1,69,
1307,1,70,1312,1,
73,2403,16,0,447,
1,74,1317,1,328,
2404,16,0,447,1,
1048,2405,16,0,447,
1,82,2406,16,0,
447,1,1840,2407,16,
0,447,1,1591,2408,
16,0,447,1,1341,
2409,16,0,447,1,
1096,1376,1,93,1382,
1,352,2410,16,0,
447,1,107,2411,16,
0,447,1,1114,1407,
1,118,2412,16,0,
447,1,1123,2413,16,
0,447,1,371,1429,
1,1628,2414,16,0,
447,1,375,1440,1,
1882,2415,16,0,447,
1,377,1445,1,379,
1450,1,380,1455,1,
883,2416,16,0,447,
1,373,1473,1,130,
2417,16,0,447,1,
143,2418,16,0,447,
1,387,2419,16,0,
447,1,1159,2420,16,
0,447,1,157,2421,
16,0,447,1,1413,
2422,16,0,447,1,
1665,2423,16,0,447,
1,412,2424,16,0,
447,1,1377,2425,16,
0,447,1,172,2426,
16,0,447,1,1939,
2427,16,0,447,1,
437,2428,16,0,447,
1,188,2429,16,0,
447,1,942,2430,16,
0,447,1,1195,2431,
16,0,447,1,1449,
2432,16,0,447,1,
1701,2433,16,0,447,
1,447,1574,1,205,
2434,16,0,447,1,
827,2435,16,0,447,
1,2724,2436,16,0,
447,1,223,2437,16,
0,447,1,476,1608,
1,477,1614,1,1231,
2438,16,0,447,1,
479,1624,1,480,1629,
1,1485,2439,16,0,
447,1,1737,2440,16,
0,447,1,242,2441,
16,0,447,1,478,
1647,1,1001,1652,1,
1002,1657,1,22,2442,
19,400,1,22,2443,
5,84,1,1011,1166,
1,1012,2444,16,0,
398,1,1013,1322,1,
262,1183,1,1267,2445,
16,0,398,1,515,
2446,16,0,398,1,
1521,2447,16,0,398,
1,525,1280,1,283,
1236,1,2299,2448,16,
0,398,1,42,2449,
16,0,398,1,40,
1241,1,44,1247,1,
47,1248,1,1303,2450,
16,0,398,1,1555,
2451,16,0,398,1,
50,1265,1,48,1254,
1,49,1260,1,51,
1270,1,63,1286,1,
305,1275,1,66,1292,
1,67,1297,1,68,
1302,1,69,1307,1,
70,1312,1,73,2452,
16,0,398,1,74,
1317,1,328,2453,16,
0,398,1,1048,2454,
16,0,398,1,82,
2455,16,0,398,1,
1840,2456,16,0,398,
1,1591,2457,16,0,
398,1,1341,2458,16,
0,398,1,1096,1376,
1,93,1382,1,352,
2459,16,0,398,1,
107,2460,16,0,398,
1,1114,1407,1,118,
2461,16,0,398,1,
1123,2462,16,0,398,
1,371,1429,1,1628,
2463,16,0,398,1,
375,1440,1,1882,2464,
16,0,398,1,377,
1445,1,379,1450,1,
380,1455,1,883,2465,
16,0,398,1,373,
1473,1,130,2466,16,
0,398,1,143,2467,
16,0,398,1,387,
2468,16,0,398,1,
1159,2469,16,0,398,
1,157,2470,16,0,
398,1,1413,2471,16,
0,398,1,1665,2472,
16,0,398,1,412,
2473,16,0,398,1,
1377,2474,16,0,398,
1,172,2475,16,0,
398,1,1939,2476,16,
0,398,1,437,2477,
16,0,398,1,188,
2478,16,0,398,1,
942,2479,16,0,398,
1,1195,2480,16,0,
398,1,1449,2481,16,
0,398,1,1701,2482,
16,0,398,1,447,
1574,1,205,2483,16,
0,398,1,827,2484,
16,0,398,1,2724,
2485,16,0,398,1,
223,2486,16,0,398,
1,476,1608,1,477,
1614,1,1231,2487,16,
0,398,1,479,1624,
1,480,1629,1,1485,
2488,16,0,398,1,
1737,2489,16,0,398,
1,242,2490,16,0,
398,1,478,1647,1,
1001,1652,1,1002,1657,
1,23,2491,19,553,
1,23,2492,5,38,
1,1901,2493,16,0,
551,1,2075,2494,16,
0,551,1,1860,885,
1,1803,851,1,1804,
2495,16,0,551,1,
2413,2496,16,0,551,
1,2198,2497,16,0,
551,1,1873,899,1,
1657,958,1,1989,980,
1,1990,2498,16,0,
551,1,1775,2499,16,
0,551,1,32,2500,
16,0,551,1,2105,
878,1,2106,2501,16,
0,551,1,2364,891,
1,2227,972,1,2337,
2502,16,0,551,1,
2021,782,1,2458,940,
1,2459,946,1,2462,
953,1,2136,906,1,
2464,963,1,2029,789,
1,2030,795,1,2031,
800,1,2032,805,1,
2033,810,1,2035,816,
1,2037,821,1,2039,
826,1,1931,925,1,
2041,832,1,2043,838,
1,2045,843,1,1574,
863,1,1958,2503,16,
0,551,1,24,2504,
19,180,1,24,2505,
5,5,1,44,2506,
16,0,178,1,377,
2507,16,0,589,1,
40,2508,16,0,738,
1,63,2509,16,0,
203,1,373,2510,16,
0,585,1,25,2511,
19,302,1,25,2512,
5,177,1,256,2513,
16,0,594,1,1261,
2514,16,0,594,1,
1011,1166,1,1012,2515,
16,0,300,1,2458,
940,1,262,1183,1,
1267,2516,16,0,300,
1,2021,782,1,1521,
2517,16,0,300,1,
1775,2518,16,0,594,
1,2029,789,1,2030,
795,1,2031,800,1,
2032,805,1,2033,810,
1,277,2519,16,0,
594,1,2035,816,1,
2037,821,1,2039,826,
1,32,2520,16,0,
594,1,2464,963,1,
2293,2521,16,0,594,
1,2043,838,1,2045,
843,1,2299,2522,16,
0,300,1,41,2523,
16,0,594,1,42,
2524,16,0,300,1,
40,1241,1,44,1247,
1,43,2525,16,0,
594,1,1804,2526,16,
0,594,1,48,1254,
1,49,1260,1,47,
1248,1,51,1270,1,
52,2527,16,0,594,
1,50,1265,1,305,
1275,1,1096,1376,1,
1515,2528,16,0,594,
1,2318,2529,16,0,
594,1,62,2530,16,
0,594,1,63,1286,
1,66,1292,1,67,
1297,1,68,1302,1,
69,1307,1,70,1312,
1,71,2531,16,0,
594,1,283,1236,1,
73,2532,16,0,300,
1,74,1317,1,1013,
1322,1,76,2533,16,
0,594,1,1834,2534,
16,0,594,1,2337,
2535,16,0,594,1,
79,2536,16,0,594,
1,1335,2537,16,0,
594,1,299,2538,16,
0,594,1,82,2539,
16,0,300,1,1840,
2540,16,0,300,1,
1297,2541,16,0,594,
1,85,2542,16,0,
594,1,1341,2543,16,
0,300,1,89,2544,
16,0,594,1,1303,
2545,16,0,300,1,
509,2546,16,0,594,
1,93,1382,1,322,
2547,16,0,594,1,
97,2548,16,0,594,
1,2041,832,1,1555,
2549,16,0,300,1,
827,2550,16,0,300,
1,102,2551,16,0,
594,1,1860,885,1,
1803,851,1,2364,891,
1,107,2552,16,0,
300,1,1114,1407,1,
112,2553,16,0,594,
1,1117,2554,16,0,
594,1,352,1413,1,
1873,899,1,118,1419,
1,1123,2555,16,0,
300,1,371,1429,1,
515,2556,16,0,300,
1,1377,2557,16,0,
300,1,124,2558,16,
0,594,1,1882,2559,
16,0,300,1,377,
1445,1,379,1450,1,
380,1455,1,130,1478,
1,346,2560,16,0,
594,1,2075,2561,16,
0,594,1,373,1473,
1,387,2562,16,0,
300,1,137,2563,16,
0,594,1,143,2564,
16,0,300,1,1901,
2565,16,0,594,1,
1048,1408,1,1153,2566,
16,0,594,1,375,
1440,1,151,2567,16,
0,594,1,1407,2568,
16,0,594,1,1659,
2569,16,0,594,1,
2413,2570,16,0,594,
1,1159,2571,16,0,
300,1,381,2572,16,
0,594,1,157,2573,
16,0,300,1,1413,
2574,16,0,300,1,
883,2575,16,0,300,
1,1371,2576,16,0,
594,1,328,1366,1,
2105,878,1,2106,2577,
16,0,594,1,166,
2578,16,0,594,1,
525,2579,16,0,594,
1,1622,2580,16,0,
594,1,406,2581,16,
0,594,1,1574,863,
1,172,1532,1,1931,
925,1,412,2582,16,
0,300,1,1933,2583,
16,0,594,1,1876,
2584,16,0,594,1,
431,2585,16,0,594,
1,1585,2586,16,0,
594,1,182,2587,16,
0,594,1,1628,2588,
16,0,300,1,1189,
2589,16,0,594,1,
437,2590,16,0,300,
1,1591,2591,16,0,
300,1,188,1581,1,
1695,2592,16,0,594,
1,2198,2593,16,0,
594,1,1195,2594,16,
0,300,1,1449,2595,
16,0,300,1,1701,
2596,16,0,300,1,
447,2597,16,0,594,
1,199,2598,16,0,
594,1,2459,946,1,
1958,2599,16,0,594,
1,2462,953,1,1657,
958,1,205,2600,16,
0,300,1,459,2601,
16,0,594,1,462,
2602,16,0,594,1,
1665,2603,16,0,300,
1,2724,2604,16,0,
300,1,2718,2605,16,
0,594,1,217,2606,
16,0,594,1,2227,
972,1,942,1553,1,
1225,2607,16,0,594,
1,223,2608,16,0,
300,1,1479,2609,16,
0,594,1,1731,2610,
16,0,594,1,477,
1614,1,1231,2611,16,
0,300,1,479,1624,
1,480,1629,1,1485,
2612,16,0,300,1,
1737,2613,16,0,300,
1,1989,980,1,1990,
2614,16,0,594,1,
1443,2615,16,0,594,
1,236,2616,16,0,
594,1,2136,906,1,
476,1608,1,242,2617,
16,0,300,1,478,
1647,1,1939,2618,16,
0,300,1,1001,1652,
1,1002,1657,1,1756,
2619,16,0,594,1,
26,2620,19,321,1,
26,2621,5,84,1,
1011,1166,1,1012,2622,
16,0,319,1,1013,
1322,1,262,1183,1,
1267,2623,16,0,319,
1,515,2624,16,0,
716,1,1521,2625,16,
0,319,1,525,1280,
1,283,1236,1,2299,
2626,16,0,319,1,
42,2627,16,0,319,
1,40,1241,1,44,
1247,1,47,1248,1,
1303,2628,16,0,319,
1,1555,2629,16,0,
319,1,50,1265,1,
48,1254,1,49,1260,
1,51,1270,1,63,
1286,1,305,1275,1,
66,1292,1,67,1297,
1,68,1302,1,69,
1307,1,70,1312,1,
73,2630,16,0,319,
1,74,1317,1,328,
1366,1,1048,1408,1,
82,2631,16,0,319,
1,1840,2632,16,0,
319,1,1591,2633,16,
0,319,1,1341,2634,
16,0,319,1,1096,
1376,1,93,1382,1,
352,1413,1,107,2635,
16,0,319,1,1114,
1407,1,118,1419,1,
1123,2636,16,0,319,
1,371,1429,1,1628,
2637,16,0,319,1,
375,1440,1,1882,2638,
16,0,319,1,377,
1445,1,379,1450,1,
380,1455,1,883,2639,
16,0,319,1,373,
1473,1,130,1478,1,
143,2640,16,0,319,
1,387,2641,16,0,
319,1,1159,2642,16,
0,319,1,157,2643,
16,0,319,1,1413,
2644,16,0,319,1,
1665,2645,16,0,319,
1,412,2646,16,0,
319,1,1377,2647,16,
0,319,1,172,1532,
1,1939,2648,16,0,
319,1,437,2649,16,
0,637,1,188,1581,
1,942,1553,1,1195,
2650,16,0,319,1,
1449,2651,16,0,319,
1,1701,2652,16,0,
319,1,447,1574,1,
205,2653,16,0,319,
1,827,2654,16,0,
319,1,2724,2655,16,
0,319,1,223,2656,
16,0,319,1,476,
1608,1,477,1614,1,
1231,2657,16,0,319,
1,479,1624,1,480,
1629,1,1485,2658,16,
0,319,1,1737,2659,
16,0,319,1,242,
2660,16,0,319,1,
478,1647,1,1001,1652,
1,1002,1657,1,27,
2661,19,657,1,27,
2662,5,95,1,256,
2663,16,0,655,1,
1261,2664,16,0,655,
1,509,2665,16,0,
655,1,1515,2666,16,
0,655,1,2021,782,
1,1775,2667,16,0,
655,1,2029,789,1,
2030,795,1,2031,800,
1,2032,805,1,2033,
810,1,277,2668,16,
0,655,1,2035,816,
1,2037,821,1,2039,
826,1,32,2669,16,
0,655,1,2041,832,
1,2293,2670,16,0,
655,1,2043,838,1,
2045,843,1,41,2671,
16,0,655,1,1297,
2672,16,0,655,1,
43,2673,16,0,655,
1,1803,851,1,1804,
2674,16,0,655,1,
299,2675,16,0,655,
1,52,2676,16,0,
655,1,2318,2677,16,
0,655,1,62,2678,
16,0,655,1,2075,
2679,16,0,655,1,
1574,863,1,71,2680,
16,0,655,1,76,
2681,16,0,655,1,
1834,2682,16,0,655,
1,2337,2683,16,0,
655,1,79,2684,16,
0,655,1,1335,2685,
16,0,655,1,322,
2686,16,0,655,1,
85,2687,16,0,655,
1,89,2688,16,0,
655,1,346,2689,16,
0,655,1,2105,878,
1,2106,2690,16,0,
655,1,97,2691,16,
0,655,1,1860,885,
1,2364,891,1,102,
2692,16,0,655,1,
112,2693,16,0,655,
1,1117,2694,16,0,
655,1,1873,899,1,
1876,2695,16,0,655,
1,124,2696,16,0,
655,1,2136,906,1,
2718,2697,16,0,655,
1,381,2698,16,0,
655,1,525,2699,16,
0,655,1,137,2700,
16,0,655,1,1901,
2701,16,0,655,1,
1153,2702,16,0,655,
1,151,2703,16,0,
655,1,1407,2704,16,
0,655,1,1659,2705,
16,0,655,1,2413,
2706,16,0,655,1,
406,2707,16,0,655,
1,1371,2708,16,0,
655,1,166,2709,16,
0,655,1,1622,2710,
16,0,655,1,1931,
925,1,1933,2711,16,
0,655,1,431,2712,
16,0,655,1,1585,
2713,16,0,655,1,
182,2714,16,0,655,
1,1189,2715,16,0,
655,1,1443,2716,16,
0,655,1,1695,2717,
16,0,655,1,2198,
2718,16,0,655,1,
447,2719,16,0,655,
1,2458,940,1,2459,
946,1,1958,2720,16,
0,655,1,2462,953,
1,1657,958,1,2464,
963,1,199,2721,16,
0,655,1,459,2722,
16,0,655,1,462,
2723,16,0,655,1,
217,2724,16,0,655,
1,2227,972,1,1225,
2725,16,0,655,1,
1479,2726,16,0,655,
1,1731,2727,16,0,
655,1,1989,980,1,
1990,2728,16,0,655,
1,236,2729,16,0,
655,1,1756,2730,16,
0,655,1,28,2731,
19,690,1,28,2732,
5,60,1,328,1366,
1,223,1598,1,1096,
1376,1,118,1419,1,
883,1461,1,525,1280,
1,1001,1652,1,130,
1478,1,459,1817,1,
1114,1407,1,352,1413,
1,447,1574,1,464,
1812,1,1011,1166,1,
1013,1322,1,242,1642,
1,143,1483,1,40,
1241,1,41,1787,1,
42,1791,1,479,1624,
1,44,1247,1,481,
1819,1,373,1473,1,
47,1248,1,157,1506,
1,49,1260,1,50,
1265,1,48,1254,1,
379,1450,1,380,1455,
1,51,1270,1,476,
1608,1,371,1429,1,
478,1647,1,1048,1408,
1,375,1440,1,172,
1532,1,262,1183,1,
283,1236,1,63,1286,
1,67,1297,1,68,
1302,1,69,1307,1,
66,1292,1,461,2733,
16,0,688,1,74,
1317,1,377,1445,1,
1002,1657,1,70,1312,
1,188,1581,1,82,
1344,1,305,1275,1,
477,1614,1,827,1395,
1,93,1382,1,480,
1629,1,205,1587,1,
942,1553,1,107,1402,
1,29,2734,19,287,
1,29,2735,5,84,
1,1011,1166,1,1012,
2736,16,0,285,1,
1013,1322,1,262,1183,
1,1267,2737,16,0,
285,1,515,2738,16,
0,285,1,1521,2739,
16,0,285,1,525,
1280,1,283,1236,1,
2299,2740,16,0,285,
1,42,2741,16,0,
285,1,40,1241,1,
44,1247,1,47,1248,
1,1303,2742,16,0,
285,1,1555,2743,16,
0,285,1,50,1265,
1,48,1254,1,49,
1260,1,51,1270,1,
63,1286,1,305,1275,
1,66,1292,1,67,
1297,1,68,1302,1,
69,1307,1,70,1312,
1,73,2744,16,0,
285,1,74,1317,1,
328,1366,1,1048,1408,
1,82,2745,16,0,
285,1,1840,2746,16,
0,285,1,1591,2747,
16,0,285,1,1341,
2748,16,0,285,1,
1096,1376,1,93,1382,
1,352,1413,1,107,
2749,16,0,285,1,
1114,1407,1,118,1419,
1,1123,2750,16,0,
285,1,371,1429,1,
1628,2751,16,0,285,
1,375,1440,1,1882,
2752,16,0,285,1,
377,1445,1,379,1450,
1,380,1455,1,883,
2753,16,0,285,1,
373,1473,1,130,1478,
1,143,1483,1,387,
2754,16,0,285,1,
1159,2755,16,0,285,
1,157,1506,1,1413,
2756,16,0,285,1,
1665,2757,16,0,285,
1,412,2758,16,0,
285,1,1377,2759,16,
0,285,1,172,1532,
1,1939,2760,16,0,
285,1,437,2761,16,
0,285,1,188,1581,
1,942,1553,1,1195,
2762,16,0,285,1,
1449,2763,16,0,285,
1,1701,2764,16,0,
285,1,447,1574,1,
205,2765,16,0,285,
1,827,2766,16,0,
285,1,2724,2767,16,
0,285,1,223,2768,
16,0,285,1,476,
1608,1,477,1614,1,
1231,2769,16,0,285,
1,479,1624,1,480,
1629,1,1485,2770,16,
0,285,1,1737,2771,
16,0,285,1,242,
2772,16,0,285,1,
478,1647,1,1001,1652,
1,1002,1657,1,30,
2773,19,269,1,30,
2774,5,84,1,1011,
1166,1,1012,2775,16,
0,267,1,1013,1322,
1,262,1183,1,1267,
2776,16,0,267,1,
515,2777,16,0,267,
1,1521,2778,16,0,
267,1,525,1280,1,
283,1236,1,2299,2779,
16,0,267,1,42,
2780,16,0,267,1,
40,1241,1,44,1247,
1,47,1248,1,1303,
2781,16,0,267,1,
1555,2782,16,0,267,
1,50,1265,1,48,
1254,1,49,1260,1,
51,1270,1,63,1286,
1,305,1275,1,66,
1292,1,67,1297,1,
68,1302,1,69,1307,
1,70,1312,1,73,
2783,16,0,267,1,
74,1317,1,328,1366,
1,1048,1408,1,82,
2784,16,0,267,1,
1840,2785,16,0,267,
1,1591,2786,16,0,
267,1,1341,2787,16,
0,267,1,1096,1376,
1,93,1382,1,352,
1413,1,107,2788,16,
0,267,1,1114,1407,
1,118,1419,1,1123,
2789,16,0,267,1,
371,1429,1,1628,2790,
16,0,267,1,375,
1440,1,1882,2791,16,
0,267,1,377,1445,
1,379,1450,1,380,
1455,1,883,2792,16,
0,267,1,373,1473,
1,130,1478,1,143,
1483,1,387,2793,16,
0,267,1,1159,2794,
16,0,267,1,157,
1506,1,1413,2795,16,
0,267,1,1665,2796,
16,0,267,1,412,
2797,16,0,267,1,
1377,2798,16,0,267,
1,172,1532,1,1939,
2799,16,0,267,1,
437,2800,16,0,267,
1,188,1581,1,942,
1553,1,1195,2801,16,
0,267,1,1449,2802,
16,0,267,1,1701,
2803,16,0,267,1,
447,1574,1,205,2804,
16,0,267,1,827,
2805,16,0,267,1,
2724,2806,16,0,267,
1,223,2807,16,0,
267,1,476,1608,1,
477,1614,1,1231,2808,
16,0,267,1,479,
1624,1,480,1629,1,
1485,2809,16,0,267,
1,1737,2810,16,0,
267,1,242,2811,16,
0,267,1,478,1647,
1,1001,1652,1,1002,
1657,1,31,2812,19,
258,1,31,2813,5,
84,1,1011,1166,1,
1012,2814,16,0,256,
1,1013,1322,1,262,
1183,1,1267,2815,16,
0,256,1,515,2816,
16,0,256,1,1521,
2817,16,0,256,1,
525,1280,1,283,1236,
1,2299,2818,16,0,
256,1,42,2819,16,
0,256,1,40,1241,
1,44,1247,1,47,
1248,1,1303,2820,16,
0,256,1,1555,2821,
16,0,256,1,50,
1265,1,48,1254,1,
49,1260,1,51,1270,
1,63,1286,1,305,
1275,1,66,1292,1,
67,1297,1,68,1302,
1,69,1307,1,70,
1312,1,73,2822,16,
0,256,1,74,1317,
1,328,1366,1,1048,
1408,1,82,2823,16,
0,256,1,1840,2824,
16,0,256,1,1591,
2825,16,0,256,1,
1341,2826,16,0,256,
1,1096,1376,1,93,
1382,1,352,1413,1,
107,2827,16,0,256,
1,1114,1407,1,118,
1419,1,1123,2828,16,
0,256,1,371,1429,
1,1628,2829,16,0,
256,1,375,1440,1,
1882,2830,16,0,256,
1,377,1445,1,379,
1450,1,380,1455,1,
883,2831,16,0,256,
1,373,1473,1,130,
1478,1,143,2832,16,
0,256,1,387,2833,
16,0,256,1,1159,
2834,16,0,256,1,
157,2835,16,0,256,
1,1413,2836,16,0,
256,1,1665,2837,16,
0,256,1,412,2838,
16,0,256,1,1377,
2839,16,0,256,1,
172,1532,1,1939,2840,
16,0,256,1,437,
2841,16,0,256,1,
188,1581,1,942,1553,
1,1195,2842,16,0,
256,1,1449,2843,16,
0,256,1,1701,2844,
16,0,256,1,447,
1574,1,205,2845,16,
0,256,1,827,2846,
16,0,256,1,2724,
2847,16,0,256,1,
223,2848,16,0,256,
1,476,1608,1,477,
1614,1,1231,2849,16,
0,256,1,479,1624,
1,480,1629,1,1485,
2850,16,0,256,1,
1737,2851,16,0,256,
1,242,2852,16,0,
256,1,478,1647,1,
1001,1652,1,1002,1657,
1,32,2853,19,251,
1,32,2854,5,84,
1,1011,1166,1,1012,
2855,16,0,249,1,
1013,1322,1,262,1183,
1,1267,2856,16,0,
249,1,515,2857,16,
0,249,1,1521,2858,
16,0,249,1,525,
1280,1,283,1236,1,
2299,2859,16,0,249,
1,42,2860,16,0,
249,1,40,1241,1,
44,1247,1,47,1248,
1,1303,2861,16,0,
249,1,1555,2862,16,
0,249,1,50,1265,
1,48,1254,1,49,
1260,1,51,1270,1,
63,1286,1,305,1275,
1,66,1292,1,67,
1297,1,68,1302,1,
69,1307,1,70,1312,
1,73,2863,16,0,
249,1,74,1317,1,
328,1366,1,1048,1408,
1,82,2864,16,0,
249,1,1840,2865,16,
0,249,1,1591,2866,
16,0,249,1,1341,
2867,16,0,249,1,
1096,1376,1,93,1382,
1,352,1413,1,107,
2868,16,0,249,1,
1114,1407,1,118,1419,
1,1123,2869,16,0,
249,1,371,1429,1,
1628,2870,16,0,249,
1,375,1440,1,1882,
2871,16,0,249,1,
377,1445,1,379,1450,
1,380,1455,1,883,
2872,16,0,249,1,
373,1473,1,130,1478,
1,143,2873,16,0,
249,1,387,2874,16,
0,249,1,1159,2875,
16,0,249,1,157,
2876,16,0,249,1,
1413,2877,16,0,249,
1,1665,2878,16,0,
249,1,412,2879,16,
0,249,1,1377,2880,
16,0,249,1,172,
1532,1,1939,2881,16,
0,249,1,437,2882,
16,0,249,1,188,
1581,1,942,1553,1,
1195,2883,16,0,249,
1,1449,2884,16,0,
249,1,1701,2885,16,
0,249,1,447,1574,
1,205,2886,16,0,
249,1,827,2887,16,
0,249,1,2724,2888,
16,0,249,1,223,
2889,16,0,249,1,
476,1608,1,477,1614,
1,1231,2890,16,0,
249,1,479,1624,1,
480,1629,1,1485,2891,
16,0,249,1,1737,
2892,16,0,249,1,
242,2893,16,0,249,
1,478,1647,1,1001,
1652,1,1002,1657,1,
33,2894,19,349,1,
33,2895,5,84,1,
1011,1166,1,1012,2896,
16,0,347,1,1013,
1322,1,262,1183,1,
1267,2897,16,0,347,
1,515,2898,16,0,
347,1,1521,2899,16,
0,347,1,525,1280,
1,283,1236,1,2299,
2900,16,0,347,1,
42,2901,16,0,347,
1,40,1241,1,44,
1247,1,47,1248,1,
1303,2902,16,0,347,
1,1555,2903,16,0,
347,1,50,1265,1,
48,1254,1,49,1260,
1,51,1270,1,63,
1286,1,305,1275,1,
66,1292,1,67,1297,
1,68,1302,1,69,
1307,1,70,1312,1,
73,2904,16,0,347,
1,74,1317,1,328,
1366,1,1048,1408,1,
82,2905,16,0,347,
1,1840,2906,16,0,
347,1,1591,2907,16,
0,347,1,1341,2908,
16,0,347,1,1096,
1376,1,93,1382,1,
352,1413,1,107,2909,
16,0,347,1,1114,
1407,1,118,1419,1,
1123,2910,16,0,347,
1,371,1429,1,1628,
2911,16,0,347,1,
375,1440,1,1882,2912,
16,0,347,1,377,
1445,1,379,1450,1,
380,1455,1,883,2913,
16,0,347,1,373,
1473,1,130,1478,1,
143,1483,1,387,2914,
16,0,347,1,1159,
2915,16,0,347,1,
157,1506,1,1413,2916,
16,0,347,1,1665,
2917,16,0,347,1,
412,2918,16,0,347,
1,1377,2919,16,0,
347,1,172,1532,1,
1939,2920,16,0,347,
1,437,2921,16,0,
347,1,188,1581,1,
942,1553,1,1195,2922,
16,0,347,1,1449,
2923,16,0,347,1,
1701,2924,16,0,347,
1,447,1574,1,205,
2925,16,0,347,1,
827,2926,16,0,347,
1,2724,2927,16,0,
347,1,223,2928,16,
0,347,1,476,1608,
1,477,1614,1,1231,
2929,16,0,347,1,
479,1624,1,480,1629,
1,1485,2930,16,0,
347,1,1737,2931,16,
0,347,1,242,1642,
1,478,1647,1,1001,
1652,1,1002,1657,1,
34,2932,19,335,1,
34,2933,5,84,1,
1011,1166,1,1012,2934,
16,0,333,1,1013,
1322,1,262,1183,1,
1267,2935,16,0,333,
1,515,2936,16,0,
333,1,1521,2937,16,
0,333,1,525,1280,
1,283,1236,1,2299,
2938,16,0,333,1,
42,2939,16,0,333,
1,40,1241,1,44,
1247,1,47,1248,1,
1303,2940,16,0,333,
1,1555,2941,16,0,
333,1,50,1265,1,
48,1254,1,49,1260,
1,51,1270,1,63,
1286,1,305,1275,1,
66,1292,1,67,1297,
1,68,1302,1,69,
1307,1,70,1312,1,
73,2942,16,0,333,
1,74,1317,1,328,
1366,1,1048,1408,1,
82,2943,16,0,333,
1,1840,2944,16,0,
333,1,1591,2945,16,
0,333,1,1341,2946,
16,0,333,1,1096,
1376,1,93,1382,1,
352,1413,1,107,2947,
16,0,333,1,1114,
1407,1,118,1419,1,
1123,2948,16,0,333,
1,371,1429,1,1628,
2949,16,0,333,1,
375,1440,1,1882,2950,
16,0,333,1,377,
1445,1,379,1450,1,
380,1455,1,883,2951,
16,0,333,1,373,
1473,1,130,1478,1,
143,1483,1,387,2952,
16,0,333,1,1159,
2953,16,0,333,1,
157,1506,1,1413,2954,
16,0,333,1,1665,
2955,16,0,333,1,
412,2956,16,0,333,
1,1377,2957,16,0,
333,1,172,1532,1,
1939,2958,16,0,333,
1,437,2959,16,0,
333,1,188,1581,1,
942,1553,1,1195,2960,
16,0,333,1,1449,
2961,16,0,333,1,
1701,2962,16,0,333,
1,447,1574,1,205,
1587,1,827,2963,16,
0,333,1,2724,2964,
16,0,333,1,223,
1598,1,476,1608,1,
477,1614,1,1231,2965,
16,0,333,1,479,
1624,1,480,1629,1,
1485,2966,16,0,333,
1,1737,2967,16,0,
333,1,242,1642,1,
478,1647,1,1001,1652,
1,1002,1657,1,35,
2968,19,324,1,35,
2969,5,84,1,1011,
1166,1,1012,2970,16,
0,322,1,1013,1322,
1,262,1183,1,1267,
2971,16,0,322,1,
515,2972,16,0,322,
1,1521,2973,16,0,
322,1,525,1280,1,
283,1236,1,2299,2974,
16,0,322,1,42,
2975,16,0,322,1,
40,1241,1,44,1247,
1,47,1248,1,1303,
2976,16,0,322,1,
1555,2977,16,0,322,
1,50,1265,1,48,
1254,1,49,1260,1,
51,1270,1,63,1286,
1,305,1275,1,66,
1292,1,67,1297,1,
68,1302,1,69,1307,
1,70,1312,1,73,
2978,16,0,322,1,
74,1317,1,328,1366,
1,1048,1408,1,82,
2979,16,0,322,1,
1840,2980,16,0,322,
1,1591,2981,16,0,
322,1,1341,2982,16,
0,322,1,1096,1376,
1,93,1382,1,352,
1413,1,107,2983,16,
0,322,1,1114,1407,
1,118,1419,1,1123,
2984,16,0,322,1,
371,1429,1,1628,2985,
16,0,322,1,375,
1440,1,1882,2986,16,
0,322,1,377,1445,
1,379,1450,1,380,
1455,1,883,2987,16,
0,322,1,373,1473,
1,130,1478,1,143,
1483,1,387,2988,16,
0,322,1,1159,2989,
16,0,322,1,157,
1506,1,1413,2990,16,
0,322,1,1665,2991,
16,0,322,1,412,
2992,16,0,322,1,
1377,2993,16,0,322,
1,172,1532,1,1939,
2994,16,0,322,1,
437,2995,16,0,322,
1,188,1581,1,942,
1553,1,1195,2996,16,
0,322,1,1449,2997,
16,0,322,1,1701,
2998,16,0,322,1,
447,1574,1,205,1587,
1,827,2999,16,0,
322,1,2724,3000,16,
0,322,1,223,3001,
16,0,322,1,476,
1608,1,477,1614,1,
1231,3002,16,0,322,
1,479,1624,1,480,
1629,1,1485,3003,16,
0,322,1,1737,3004,
16,0,322,1,242,
1642,1,478,1647,1,
1001,1652,1,1002,1657,
1,36,3005,19,223,
1,36,3006,5,94,
1,256,3007,16,0,
221,1,1261,3008,16,
0,221,1,509,3009,
16,0,221,1,1515,
3010,16,0,221,1,
2021,782,1,1775,3011,
16,0,221,1,2029,
789,1,2030,795,1,
2031,800,1,2032,805,
1,2033,810,1,277,
3012,16,0,221,1,
2035,816,1,2037,821,
1,2039,826,1,32,
3013,16,0,221,1,
2041,832,1,2293,3014,
16,0,221,1,2043,
838,1,2045,843,1,
41,3015,16,0,221,
1,1297,3016,16,0,
221,1,43,3017,16,
0,221,1,1803,851,
1,1804,3018,16,0,
221,1,299,3019,16,
0,221,1,52,3020,
16,0,221,1,2318,
3021,16,0,221,1,
2075,3022,16,0,221,
1,1574,863,1,71,
3023,16,0,221,1,
76,3024,16,0,221,
1,1834,3025,16,0,
221,1,2337,3026,16,
0,221,1,79,3027,
16,0,221,1,1335,
3028,16,0,221,1,
322,3029,16,0,221,
1,85,3030,16,0,
221,1,89,3031,16,
0,221,1,346,3032,
16,0,221,1,2105,
878,1,2106,3033,16,
0,221,1,97,3034,
16,0,221,1,1860,
885,1,2364,891,1,
102,3035,16,0,221,
1,112,3036,16,0,
221,1,1117,3037,16,
0,221,1,1873,899,
1,1876,3038,16,0,
221,1,124,3039,16,
0,221,1,2136,906,
1,2718,3040,16,0,
221,1,381,3041,16,
0,221,1,525,3042,
16,0,221,1,137,
3043,16,0,221,1,
1901,3044,16,0,221,
1,1153,3045,16,0,
221,1,151,3046,16,
0,221,1,1407,3047,
16,0,221,1,1659,
3048,16,0,221,1,
2413,3049,16,0,221,
1,406,3050,16,0,
221,1,1371,3051,16,
0,221,1,166,3052,
16,0,221,1,1622,
3053,16,0,221,1,
1931,925,1,1933,3054,
16,0,221,1,431,
3055,16,0,221,1,
1585,3056,16,0,221,
1,182,3057,16,0,
221,1,1189,3058,16,
0,221,1,1443,3059,
16,0,221,1,1695,
3060,16,0,221,1,
2198,3061,16,0,221,
1,447,3062,16,0,
221,1,2458,940,1,
2459,946,1,1958,3063,
16,0,221,1,2462,
953,1,1657,958,1,
2464,963,1,199,3064,
16,0,221,1,459,
3065,16,0,221,1,
462,3066,16,0,221,
1,217,3067,16,0,
221,1,2227,972,1,
1225,3068,16,0,221,
1,1479,3069,16,0,
221,1,1731,3070,16,
0,221,1,1989,980,
1,1990,3071,16,0,
221,1,236,3072,16,
0,221,1,1756,3073,
16,0,221,1,37,
3074,19,241,1,37,
3075,5,94,1,256,
3076,16,0,239,1,
1261,3077,16,0,239,
1,509,3078,16,0,
239,1,1515,3079,16,
0,239,1,2021,782,
1,1775,3080,16,0,
239,1,2029,789,1,
2030,795,1,2031,800,
1,2032,805,1,2033,
810,1,277,3081,16,
0,239,1,2035,816,
1,2037,821,1,2039,
826,1,32,3082,16,
0,239,1,2041,832,
1,2293,3083,16,0,
239,1,2043,838,1,
2045,843,1,41,3084,
16,0,239,1,1297,
3085,16,0,239,1,
43,3086,16,0,239,
1,1803,851,1,1804,
3087,16,0,239,1,
299,3088,16,0,239,
1,52,3089,16,0,
239,1,2318,3090,16,
0,239,1,2075,3091,
16,0,239,1,1574,
863,1,71,3092,16,
0,239,1,76,3093,
16,0,239,1,1834,
3094,16,0,239,1,
2337,3095,16,0,239,
1,79,3096,16,0,
239,1,1335,3097,16,
0,239,1,322,3098,
16,0,239,1,85,
3099,16,0,239,1,
89,3100,16,0,239,
1,346,3101,16,0,
239,1,2105,878,1,
2106,3102,16,0,239,
1,97,3103,16,0,
239,1,1860,885,1,
2364,891,1,102,3104,
16,0,239,1,112,
3105,16,0,239,1,
1117,3106,16,0,239,
1,1873,899,1,1876,
3107,16,0,239,1,
124,3108,16,0,239,
1,2136,906,1,2718,
3109,16,0,239,1,
381,3110,16,0,239,
1,525,3111,16,0,
239,1,137,3112,16,
0,239,1,1901,3113,
16,0,239,1,1153,
3114,16,0,239,1,
151,3115,16,0,239,
1,1407,3116,16,0,
239,1,1659,3117,16,
0,239,1,2413,3118,
16,0,239,1,406,
3119,16,0,239,1,
1371,3120,16,0,239,
1,166,3121,16,0,
239,1,1622,3122,16,
0,239,1,1931,925,
1,1933,3123,16,0,
239,1,431,3124,16,
0,239,1,1585,3125,
16,0,239,1,182,
3126,16,0,239,1,
1189,3127,16,0,239,
1,1443,3128,16,0,
239,1,1695,3129,16,
0,239,1,2198,3130,
16,0,239,1,447,
3131,16,0,239,1,
2458,940,1,2459,946,
1,1958,3132,16,0,
239,1,2462,953,1,
1657,958,1,2464,963,
1,199,3133,16,0,
239,1,459,3134,16,
0,239,1,462,3135,
16,0,239,1,217,
3136,16,0,239,1,
2227,972,1,1225,3137,
16,0,239,1,1479,
3138,16,0,239,1,
1731,3139,16,0,239,
1,1989,980,1,1990,
3140,16,0,239,1,
236,3141,16,0,239,
1,1756,3142,16,0,
239,1,38,3143,19,
238,1,38,3144,5,
84,1,1011,1166,1,
1012,3145,16,0,236,
1,1013,1322,1,262,
1183,1,1267,3146,16,
0,236,1,515,3147,
16,0,236,1,1521,
3148,16,0,236,1,
525,1280,1,283,1236,
1,2299,3149,16,0,
236,1,42,3150,16,
0,236,1,40,1241,
1,44,1247,1,47,
1248,1,1303,3151,16,
0,236,1,1555,3152,
16,0,236,1,50,
1265,1,48,1254,1,
49,1260,1,51,1270,
1,63,1286,1,305,
1275,1,66,1292,1,
67,1297,1,68,1302,
1,69,1307,1,70,
1312,1,73,3153,16,
0,236,1,74,1317,
1,328,1366,1,1048,
1408,1,82,3154,16,
0,236,1,1840,3155,
16,0,236,1,1591,
3156,16,0,236,1,
1341,3157,16,0,236,
1,1096,1376,1,93,
1382,1,352,1413,1,
107,3158,16,0,236,
1,1114,1407,1,118,
1419,1,1123,3159,16,
0,236,1,371,1429,
1,1628,3160,16,0,
236,1,375,1440,1,
1882,3161,16,0,236,
1,377,1445,1,379,
1450,1,380,1455,1,
883,1461,1,373,1473,
1,130,1478,1,143,
1483,1,387,3162,16,
0,236,1,1159,3163,
16,0,236,1,157,
1506,1,1413,3164,16,
0,236,1,1665,3165,
16,0,236,1,412,
3166,16,0,236,1,
1377,3167,16,0,236,
1,172,1532,1,1939,
3168,16,0,236,1,
437,3169,16,0,236,
1,188,1581,1,942,
1553,1,1195,3170,16,
0,236,1,1449,3171,
16,0,236,1,1701,
3172,16,0,236,1,
447,1574,1,205,1587,
1,827,1395,1,2724,
3173,16,0,236,1,
223,1598,1,476,1608,
1,477,1614,1,1231,
3174,16,0,236,1,
479,1624,1,480,1629,
1,1485,3175,16,0,
236,1,1737,3176,16,
0,236,1,242,1642,
1,478,1647,1,1001,
1652,1,1002,1657,1,
39,3177,19,229,1,
39,3178,5,84,1,
1011,1166,1,1012,3179,
16,0,227,1,1013,
1322,1,262,1183,1,
1267,3180,16,0,227,
1,515,3181,16,0,
227,1,1521,3182,16,
0,227,1,525,1280,
1,283,1236,1,2299,
3183,16,0,227,1,
42,3184,16,0,227,
1,40,1241,1,44,
1247,1,47,1248,1,
1303,3185,16,0,227,
1,1555,3186,16,0,
227,1,50,1265,1,
48,1254,1,49,1260,
1,51,1270,1,63,
1286,1,305,1275,1,
66,1292,1,67,1297,
1,68,1302,1,69,
1307,1,70,1312,1,
73,3187,16,0,227,
1,74,1317,1,328,
1366,1,1048,1408,1,
82,3188,16,0,227,
1,1840,3189,16,0,
227,1,1591,3190,16,
0,227,1,1341,3191,
16,0,227,1,1096,
1376,1,93,1382,1,
352,1413,1,107,3192,
16,0,227,1,1114,
1407,1,118,1419,1,
1123,3193,16,0,227,
1,371,1429,1,1628,
3194,16,0,227,1,
375,1440,1,1882,3195,
16,0,227,1,377,
1445,1,379,1450,1,
380,1455,1,883,1461,
1,373,1473,1,130,
1478,1,143,1483,1,
387,3196,16,0,227,
1,1159,3197,16,0,
227,1,157,1506,1,
1413,3198,16,0,227,
1,1665,3199,16,0,
227,1,412,3200,16,
0,227,1,1377,3201,
16,0,227,1,172,
1532,1,1939,3202,16,
0,227,1,437,3203,
16,0,227,1,188,
1581,1,942,1553,1,
1195,3204,16,0,227,
1,1449,3205,16,0,
227,1,1701,3206,16,
0,227,1,447,1574,
1,205,1587,1,827,
1395,1,2724,3207,16,
0,227,1,223,1598,
1,476,1608,1,477,
1614,1,1231,3208,16,
0,227,1,479,1624,
1,480,1629,1,1485,
3209,16,0,227,1,
1737,3210,16,0,227,
1,242,1642,1,478,
1647,1,1001,1652,1,
1002,1657,1,40,3211,
19,217,1,40,3212,
5,84,1,1011,1166,
1,1012,3213,16,0,
215,1,1013,1322,1,
262,1183,1,1267,3214,
16,0,215,1,515,
3215,16,0,215,1,
1521,3216,16,0,215,
1,525,1280,1,283,
1236,1,2299,3217,16,
0,215,1,42,3218,
16,0,215,1,40,
1241,1,44,1247,1,
47,1248,1,1303,3219,
16,0,215,1,1555,
3220,16,0,215,1,
50,1265,1,48,1254,
1,49,1260,1,51,
1270,1,63,1286,1,
305,1275,1,66,1292,
1,67,1297,1,68,
1302,1,69,1307,1,
70,1312,1,73,3221,
16,0,215,1,74,
1317,1,328,1366,1,
1048,1408,1,82,3222,
16,0,215,1,1840,
3223,16,0,215,1,
1591,3224,16,0,215,
1,1341,3225,16,0,
215,1,1096,1376,1,
93,1382,1,352,1413,
1,107,3226,16,0,
215,1,1114,1407,1,
118,3227,16,0,215,
1,1123,3228,16,0,
215,1,371,1429,1,
1628,3229,16,0,215,
1,375,1440,1,1882,
3230,16,0,215,1,
377,1445,1,379,1450,
1,380,1455,1,883,
3231,16,0,215,1,
373,1473,1,130,3232,
16,0,215,1,143,
3233,16,0,215,1,
387,3234,16,0,215,
1,1159,3235,16,0,
215,1,157,3236,16,
0,215,1,1413,3237,
16,0,215,1,1665,
3238,16,0,215,1,
412,3239,16,0,215,
1,1377,3240,16,0,
215,1,172,3241,16,
0,215,1,1939,3242,
16,0,215,1,437,
3243,16,0,215,1,
188,3244,16,0,215,
1,942,1553,1,1195,
3245,16,0,215,1,
1449,3246,16,0,215,
1,1701,3247,16,0,
215,1,447,1574,1,
205,3248,16,0,215,
1,827,3249,16,0,
215,1,2724,3250,16,
0,215,1,223,3251,
16,0,215,1,476,
1608,1,477,1614,1,
1231,3252,16,0,215,
1,479,1624,1,480,
1629,1,1485,3253,16,
0,215,1,1737,3254,
16,0,215,1,242,
3255,16,0,215,1,
478,1647,1,1001,1652,
1,1002,1657,1,41,
3256,19,175,1,41,
3257,5,84,1,1011,
1166,1,1012,3258,16,
0,173,1,1013,1322,
1,262,1183,1,1267,
3259,16,0,173,1,
515,3260,16,0,173,
1,1521,3261,16,0,
173,1,525,1280,1,
283,1236,1,2299,3262,
16,0,173,1,42,
3263,16,0,173,1,
40,1241,1,44,1247,
1,47,1248,1,1303,
3264,16,0,173,1,
1555,3265,16,0,173,
1,50,1265,1,48,
1254,1,49,1260,1,
51,1270,1,63,1286,
1,305,1275,1,66,
1292,1,67,1297,1,
68,1302,1,69,1307,
1,70,1312,1,73,
3266,16,0,173,1,
74,1317,1,328,1366,
1,1048,1408,1,82,
3267,16,0,173,1,
1840,3268,16,0,173,
1,1591,3269,16,0,
173,1,1341,3270,16,
0,173,1,1096,1376,
1,93,1382,1,352,
1413,1,107,3271,16,
0,173,1,1114,1407,
1,118,3272,16,0,
173,1,1123,3273,16,
0,173,1,371,1429,
1,1628,3274,16,0,
173,1,375,1440,1,
1882,3275,16,0,173,
1,377,1445,1,379,
1450,1,380,1455,1,
883,3276,16,0,173,
1,373,1473,1,130,
3277,16,0,173,1,
143,3278,16,0,173,
1,387,3279,16,0,
173,1,1159,3280,16,
0,173,1,157,3281,
16,0,173,1,1413,
3282,16,0,173,1,
1665,3283,16,0,173,
1,412,3284,16,0,
173,1,1377,3285,16,
0,173,1,172,3286,
16,0,173,1,1939,
3287,16,0,173,1,
437,3288,16,0,173,
1,188,3289,16,0,
173,1,942,1553,1,
1195,3290,16,0,173,
1,1449,3291,16,0,
173,1,1701,3292,16,
0,173,1,447,1574,
1,205,3293,16,0,
173,1,827,3294,16,
0,173,1,2724,3295,
16,0,173,1,223,
3296,16,0,173,1,
476,1608,1,477,1614,
1,1231,3297,16,0,
173,1,479,1624,1,
480,1629,1,1485,3298,
16,0,173,1,1737,
3299,16,0,173,1,
242,3300,16,0,173,
1,478,1647,1,1001,
1652,1,1002,1657,1,
42,3301,19,411,1,
42,3302,5,38,1,
1901,3303,16,0,409,
1,2075,3304,16,0,
409,1,1860,885,1,
1803,851,1,1804,3305,
16,0,409,1,2413,
3306,16,0,409,1,
2198,3307,16,0,409,
1,1873,899,1,1657,
958,1,1989,980,1,
1990,3308,16,0,409,
1,1775,3309,16,0,
409,1,32,3310,16,
0,409,1,2105,878,
1,2106,3311,16,0,
409,1,2364,891,1,
2227,972,1,2337,3312,
16,0,409,1,2021,
782,1,2458,940,1,
2459,946,1,2462,953,
1,2136,906,1,2464,
963,1,2029,789,1,
2030,795,1,2031,800,
1,2032,805,1,2033,
810,1,2035,816,1,
2037,821,1,2039,826,
1,1931,925,1,2041,
832,1,2043,838,1,
2045,843,1,1574,863,
1,1958,3313,16,0,
409,1,43,3314,19,
505,1,43,3315,5,
25,1,2035,816,1,
2037,821,1,2039,826,
1,2041,832,1,2227,
972,1,2043,838,1,
1657,958,1,1860,885,
1,2136,906,1,2021,
782,1,2459,946,1,
1574,863,1,2105,3316,
16,0,626,1,1931,
925,1,1873,899,1,
2031,800,1,1803,851,
1,1989,3317,16,0,
503,1,2464,963,1,
2029,789,1,2030,795,
1,2364,891,1,2032,
805,1,2033,810,1,
2045,843,1,44,3318,
19,265,1,44,3319,
5,38,1,1901,3320,
16,0,263,1,2075,
3321,16,0,263,1,
1860,885,1,1803,851,
1,1804,3322,16,0,
263,1,2413,3323,16,
0,263,1,2198,3324,
16,0,263,1,1873,
899,1,1657,958,1,
1989,980,1,1990,3325,
16,0,263,1,1775,
3326,16,0,263,1,
32,3327,16,0,263,
1,2105,878,1,2106,
3328,16,0,263,1,
2364,891,1,2227,972,
1,2337,3329,16,0,
263,1,2021,782,1,
2458,940,1,2459,946,
1,2462,953,1,2136,
906,1,2464,963,1,
2029,789,1,2030,795,
1,2031,800,1,2032,
805,1,2033,810,1,
2035,816,1,2037,821,
1,2039,826,1,1931,
925,1,2041,832,1,
2043,838,1,2045,843,
1,1574,863,1,1958,
3330,16,0,263,1,
45,3331,19,295,1,
45,3332,5,39,1,
1901,3333,16,0,328,
1,2075,3334,16,0,
328,1,1860,885,1,
1803,851,1,1804,3335,
16,0,328,1,2413,
3336,16,0,328,1,
2198,3337,16,0,328,
1,1873,899,1,1657,
958,1,1989,980,1,
1990,3338,16,0,328,
1,1775,3339,16,0,
328,1,32,3340,16,
0,328,1,2105,878,
1,2106,3341,16,0,
328,1,2364,891,1,
2227,972,1,2337,3342,
16,0,328,1,2021,
782,1,2458,940,1,
2459,946,1,2462,953,
1,2136,906,1,2464,
963,1,2029,789,1,
2030,795,1,2031,800,
1,2032,805,1,2033,
810,1,2035,816,1,
2037,821,1,2039,826,
1,1931,925,1,2041,
832,1,2043,838,1,
2045,843,1,1832,3343,
16,0,293,1,1574,
863,1,1958,3344,16,
0,328,1,46,3345,
19,729,1,46,3346,
5,38,1,1901,3347,
16,0,727,1,2075,
3348,16,0,727,1,
1860,885,1,1803,851,
1,1804,3349,16,0,
727,1,2413,3350,16,
0,727,1,2198,3351,
16,0,727,1,1873,
899,1,1657,958,1,
1989,980,1,1990,3352,
16,0,727,1,1775,
3353,16,0,727,1,
32,3354,16,0,727,
1,2105,878,1,2106,
3355,16,0,727,1,
2364,891,1,2227,972,
1,2337,3356,16,0,
727,1,2021,782,1,
2458,940,1,2459,946,
1,2462,953,1,2136,
906,1,2464,963,1,
2029,789,1,2030,795,
1,2031,800,1,2032,
805,1,2033,810,1,
2035,816,1,2037,821,
1,2039,826,1,1931,
925,1,2041,832,1,
2043,838,1,2045,843,
1,1574,863,1,1958,
3357,16,0,727,1,
47,3358,19,618,1,
47,3359,5,19,1,
0,3360,16,0,725,
1,2776,3361,17,3362,
15,3363,4,36,37,
0,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
1,-1,1,5,3364,
20,3365,4,38,71,
0,108,0,111,0,
98,0,97,0,108,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,115,0,95,0,
49,0,1,158,1,
3,1,2,1,1,
3366,22,1,3,1,
2743,3367,17,3368,15,
3369,4,52,37,0,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,3370,
20,3371,4,54,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,163,
1,3,1,5,1,
4,3372,22,1,8,
1,2022,3373,16,0,
616,1,2775,3374,17,
3375,15,3363,1,-1,
1,5,3376,20,3377,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,51,0,
1,160,1,3,1,
2,1,1,3378,22,
1,5,1,2699,761,
1,2715,3379,17,3380,
15,3381,4,50,37,
0,71,0,108,0,
111,0,98,0,97,
0,108,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,3382,20,
3383,4,52,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,164,1,3,1,
6,1,5,3384,22,
1,9,1,2774,3385,
17,3386,15,3363,1,
-1,1,5,3387,20,
3388,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,50,
0,1,159,1,3,
1,3,1,2,3389,
22,1,4,1,2754,
3390,17,3391,15,3369,
1,-1,1,5,3392,
20,3393,4,54,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,49,0,1,162,
1,3,1,3,1,
2,3394,22,1,7,
1,2755,3395,16,0,
725,1,2598,755,1,
2464,963,1,2459,946,
1,2466,3396,17,3397,
15,3381,1,-1,1,
5,3398,20,3399,4,
52,71,0,108,0,
111,0,98,0,97,
0,108,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,165,
1,3,1,7,1,
6,3400,22,1,10,
1,2690,771,1,2766,
3401,16,0,725,1,
2696,3402,16,0,725,
1,2773,3403,17,3404,
15,3363,1,-1,1,
5,3405,20,3406,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,52,0,1,
161,1,3,1,3,
1,2,3407,22,1,
6,1,2700,743,1,
48,3408,19,356,1,
48,3409,5,54,1,
0,3410,16,0,354,
1,2075,3411,16,0,
544,1,2773,3403,1,
1860,885,1,1804,3412,
16,0,544,1,2413,
3413,16,0,544,1,
2743,3367,1,1873,899,
1,1657,958,1,2030,
795,1,1989,980,1,
1990,3414,16,0,544,
1,2754,3390,1,2755,
3415,16,0,354,1,
1775,3416,16,0,544,
1,32,3417,16,0,
544,1,2105,878,1,
2106,3418,16,0,544,
1,2699,761,1,2766,
3419,16,0,354,1,
2227,972,1,2337,3420,
16,0,544,1,2774,
3385,1,2775,3374,1,
2776,3361,1,2696,3421,
16,0,354,1,1803,
851,1,2458,940,1,
1901,3422,16,0,544,
1,2462,953,1,2136,
906,1,2464,963,1,
2029,789,1,2466,3396,
1,2031,800,1,2032,
805,1,2033,810,1,
2035,816,1,2690,771,
1,2364,891,1,2715,
3379,1,2039,826,1,
1931,925,1,2041,832,
1,2021,782,1,2043,
838,1,2045,843,1,
2700,743,1,2198,3423,
16,0,544,1,2598,
755,1,2037,821,1,
1574,863,1,1958,3424,
16,0,544,1,2459,
946,1,49,3425,19,
549,1,49,3426,5,
38,1,1901,3427,16,
0,547,1,2075,3428,
16,0,547,1,1860,
885,1,1803,851,1,
1804,3429,16,0,547,
1,2413,3430,16,0,
547,1,2198,3431,16,
0,547,1,1873,899,
1,1657,958,1,1989,
980,1,1990,3432,16,
0,547,1,1775,3433,
16,0,547,1,32,
3434,16,0,547,1,
2105,878,1,2106,3435,
16,0,547,1,2364,
891,1,2227,972,1,
2337,3436,16,0,547,
1,2021,782,1,2458,
940,1,2459,946,1,
2462,953,1,2136,906,
1,2464,963,1,2029,
789,1,2030,795,1,
2031,800,1,2032,805,
1,2033,810,1,2035,
816,1,2037,821,1,
2039,826,1,1931,925,
1,2041,832,1,2043,
838,1,2045,843,1,
1574,863,1,1958,3437,
16,0,547,1,50,
3438,19,670,1,50,
3439,5,38,1,1901,
3440,16,0,668,1,
2075,3441,16,0,668,
1,1860,885,1,1803,
851,1,1804,3442,16,
0,668,1,2413,3443,
16,0,668,1,2198,
3444,16,0,668,1,
1873,899,1,1657,958,
1,1989,980,1,1990,
3445,16,0,668,1,
1775,3446,16,0,668,
1,32,3447,16,0,
668,1,2105,878,1,
2106,3448,16,0,668,
1,2364,891,1,2227,
972,1,2337,3449,16,
0,668,1,2021,782,
1,2458,940,1,2459,
946,1,2462,953,1,
2136,906,1,2464,963,
1,2029,789,1,2030,
795,1,2031,800,1,
2032,805,1,2033,810,
1,2035,816,1,2037,
821,1,2039,826,1,
1931,925,1,2041,832,
1,2043,838,1,2045,
843,1,1574,863,1,
1958,3450,16,0,668,
1,51,3451,19,127,
1,51,3452,5,54,
1,0,3453,16,0,
125,1,2538,3454,16,
0,125,1,2075,3455,
16,0,125,1,1860,
885,1,2515,3456,16,
0,465,1,1804,3457,
16,0,125,1,10,
3458,16,0,125,1,
2413,3459,16,0,125,
1,2743,3367,1,1873,
899,1,21,3460,16,
0,125,1,1657,958,
1,2030,795,1,2773,
3403,1,1990,3461,16,
0,125,1,2754,3390,
1,2755,3462,16,0,
125,1,1775,3463,16,
0,125,1,32,3464,
16,0,125,1,2105,
878,1,2106,3465,16,
0,125,1,2227,972,
1,2337,3466,16,0,
125,1,2774,3385,1,
2775,3374,1,2776,3361,
1,52,3467,16,0,
125,1,1803,851,1,
2458,940,1,1901,3468,
16,0,125,1,2462,
953,1,2136,906,1,
2464,963,1,2029,789,
1,2466,3396,1,2031,
800,1,2032,805,1,
2033,810,1,2035,816,
1,2364,891,1,2715,
3379,1,2039,826,1,
1931,925,1,2041,832,
1,2021,782,1,2043,
838,1,2045,843,1,
2702,3469,16,0,125,
1,2198,3470,16,0,
125,1,1989,980,1,
2037,821,1,1574,863,
1,1958,3471,16,0,
125,1,2459,946,1,
52,3472,19,124,1,
52,3473,5,53,1,
0,3474,16,0,122,
1,2075,3475,16,0,
122,1,1860,885,1,
1804,3476,16,0,122,
1,10,3477,16,0,
122,1,2413,3478,16,
0,122,1,2743,3367,
1,1873,899,1,21,
3479,16,0,122,1,
1657,958,1,2030,795,
1,2773,3403,1,1990,
3480,16,0,122,1,
2754,3390,1,2755,3481,
16,0,122,1,2538,
3482,16,0,122,1,
32,3483,16,0,122,
1,2105,878,1,2106,
3484,16,0,122,1,
2227,972,1,2337,3485,
16,0,122,1,2198,
3486,16,0,122,1,
2775,3374,1,2776,3361,
1,52,3487,16,0,
122,1,1803,851,1,
2458,940,1,1901,3488,
16,0,122,1,2462,
953,1,2136,906,1,
2464,963,1,2029,789,
1,2466,3396,1,2031,
800,1,2032,805,1,
2033,810,1,2035,816,
1,2364,891,1,2715,
3379,1,2039,826,1,
1931,925,1,2041,832,
1,2021,782,1,2043,
838,1,2045,843,1,
2702,3489,16,0,122,
1,1775,3490,16,0,
122,1,1989,980,1,
2774,3385,1,2037,821,
1,1574,863,1,1958,
3491,16,0,122,1,
2459,946,1,53,3492,
19,121,1,53,3493,
5,53,1,0,3494,
16,0,119,1,2075,
3495,16,0,119,1,
1860,885,1,1804,3496,
16,0,119,1,10,
3497,16,0,119,1,
2413,3498,16,0,119,
1,2743,3367,1,1873,
899,1,21,3499,16,
0,119,1,1657,958,
1,2030,795,1,2773,
3403,1,1990,3500,16,
0,119,1,2754,3390,
1,2755,3501,16,0,
119,1,2538,3502,16,
0,119,1,32,3503,
16,0,119,1,2105,
878,1,2106,3504,16,
0,119,1,2227,972,
1,2337,3505,16,0,
119,1,2198,3506,16,
0,119,1,2775,3374,
1,2776,3361,1,52,
3507,16,0,119,1,
1803,851,1,2458,940,
1,1901,3508,16,0,
119,1,2462,953,1,
2136,906,1,2464,963,
1,2029,789,1,2466,
3396,1,2031,800,1,
2032,805,1,2033,810,
1,2035,816,1,2364,
891,1,2715,3379,1,
2039,826,1,1931,925,
1,2041,832,1,2021,
782,1,2043,838,1,
2045,843,1,2702,3509,
16,0,119,1,1775,
3510,16,0,119,1,
1989,980,1,2774,3385,
1,2037,821,1,1574,
863,1,1958,3511,16,
0,119,1,2459,946,
1,54,3512,19,118,
1,54,3513,5,54,
1,0,3514,16,0,
116,1,2538,3515,16,
0,116,1,2075,3516,
16,0,116,1,1860,
885,1,1804,3517,16,
0,116,1,10,3518,
16,0,116,1,2413,
3519,16,0,116,1,
2524,3520,16,0,480,
1,2743,3367,1,1873,
899,1,21,3521,16,
0,116,1,1657,958,
1,2030,795,1,2773,
3403,1,1990,3522,16,
0,116,1,2754,3390,
1,2755,3523,16,0,
116,1,1775,3524,16,
0,116,1,32,3525,
16,0,116,1,2105,
878,1,2106,3526,16,
0,116,1,2227,972,
1,2337,3527,16,0,
116,1,2774,3385,1,
2775,3374,1,2776,3361,
1,52,3528,16,0,
116,1,1803,851,1,
2458,940,1,1901,3529,
16,0,116,1,2462,
953,1,2136,906,1,
2464,963,1,2029,789,
1,2466,3396,1,2031,
800,1,2032,805,1,
2033,810,1,2035,816,
1,2364,891,1,2715,
3379,1,2039,826,1,
1931,925,1,2041,832,
1,2021,782,1,2043,
838,1,2045,843,1,
2702,3530,16,0,116,
1,2198,3531,16,0,
116,1,1989,980,1,
2037,821,1,1574,863,
1,1958,3532,16,0,
116,1,2459,946,1,
55,3533,19,115,1,
55,3534,5,54,1,
0,3535,16,0,113,
1,2538,3536,16,0,
113,1,2075,3537,16,
0,113,1,1860,885,
1,1804,3538,16,0,
113,1,10,3539,16,
0,113,1,2413,3540,
16,0,113,1,2743,
3367,1,1873,899,1,
21,3541,16,0,113,
1,1657,958,1,2030,
795,1,2773,3403,1,
1990,3542,16,0,113,
1,2754,3390,1,2755,
3543,16,0,113,1,
1775,3544,16,0,113,
1,32,3545,16,0,
113,1,2105,878,1,
2041,832,1,2227,972,
1,2337,3546,16,0,
113,1,2774,3385,1,
2775,3374,1,2776,3361,
1,52,3547,16,0,
113,1,1803,851,1,
2458,940,1,1901,3548,
16,0,113,1,2462,
953,1,2136,906,1,
2464,963,1,2029,789,
1,2466,3396,1,2031,
800,1,2032,805,1,
2033,810,1,2035,816,
1,2364,891,1,2715,
3379,1,2039,826,1,
1931,925,1,2506,3549,
16,0,451,1,2021,
782,1,2043,838,1,
2045,843,1,2702,3550,
16,0,113,1,2198,
3551,16,0,113,1,
1989,980,1,2037,821,
1,1574,863,1,2106,
3552,16,0,113,1,
1958,3553,16,0,113,
1,2459,946,1,56,
3554,19,112,1,56,
3555,5,53,1,0,
3556,16,0,110,1,
2075,3557,16,0,110,
1,1860,885,1,1804,
3558,16,0,110,1,
10,3559,16,0,110,
1,2413,3560,16,0,
110,1,2743,3367,1,
1873,899,1,21,3561,
16,0,110,1,1657,
958,1,2030,795,1,
2773,3403,1,1990,3562,
16,0,110,1,2754,
3390,1,2755,3563,16,
0,110,1,2538,3564,
16,0,110,1,32,
3565,16,0,110,1,
2105,878,1,2106,3566,
16,0,110,1,2227,
972,1,2337,3567,16,
0,110,1,2198,3568,
16,0,110,1,2775,
3374,1,2776,3361,1,
52,3569,16,0,110,
1,1803,851,1,2458,
940,1,1901,3570,16,
0,110,1,2462,953,
1,2136,906,1,2464,
963,1,2029,789,1,
2466,3396,1,2031,800,
1,2032,805,1,2033,
810,1,2035,816,1,
2364,891,1,2715,3379,
1,2039,826,1,1931,
925,1,2041,832,1,
2021,782,1,2043,838,
1,2045,843,1,2702,
3571,16,0,110,1,
1775,3572,16,0,110,
1,1989,980,1,2774,
3385,1,2037,821,1,
1574,863,1,1958,3573,
16,0,110,1,2459,
946,1,57,3574,19,
109,1,57,3575,5,
53,1,0,3576,16,
0,107,1,2075,3577,
16,0,107,1,1860,
885,1,1804,3578,16,
0,107,1,10,3579,
16,0,107,1,2413,
3580,16,0,107,1,
2743,3367,1,1873,899,
1,21,3581,16,0,
107,1,1657,958,1,
2030,795,1,2773,3403,
1,1990,3582,16,0,
107,1,2754,3390,1,
2755,3583,16,0,107,
1,2538,3584,16,0,
107,1,32,3585,16,
0,107,1,2105,878,
1,2106,3586,16,0,
107,1,2227,972,1,
2337,3587,16,0,107,
1,2198,3588,16,0,
107,1,2775,3374,1,
2776,3361,1,52,3589,
16,0,107,1,1803,
851,1,2458,940,1,
1901,3590,16,0,107,
1,2462,953,1,2136,
906,1,2464,963,1,
2029,789,1,2466,3396,
1,2031,800,1,2032,
805,1,2033,810,1,
2035,816,1,2364,891,
1,2715,3379,1,2039,
826,1,1931,925,1,
2041,832,1,2021,782,
1,2043,838,1,2045,
843,1,2702,3591,16,
0,107,1,1775,3592,
16,0,107,1,1989,
980,1,2774,3385,1,
2037,821,1,1574,863,
1,1958,3593,16,0,
107,1,2459,946,1,
58,3594,19,446,1,
58,3595,5,21,1,
2553,3596,16,0,444,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3597,16,0,444,
1,2536,1686,1,2464,
963,1,2605,3598,16,
0,444,1,2470,3599,
16,0,444,1,2513,
1692,1,2551,1712,1,
59,3600,19,443,1,
59,3601,5,21,1,
2553,3602,16,0,441,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3603,16,0,441,
1,2536,1686,1,2464,
963,1,2605,3604,16,
0,441,1,2470,3605,
16,0,441,1,2513,
1692,1,2551,1712,1,
60,3606,19,520,1,
60,3607,5,21,1,
2553,3608,16,0,518,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3609,16,0,518,
1,2536,1686,1,2464,
963,1,2605,3610,16,
0,518,1,2470,3611,
16,0,518,1,2513,
1692,1,2551,1712,1,
61,3612,19,397,1,
61,3613,5,21,1,
2553,3614,16,0,395,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3615,16,0,395,
1,2536,1686,1,2464,
963,1,2605,3616,16,
0,395,1,2470,3617,
16,0,395,1,2513,
1692,1,2551,1712,1,
62,3618,19,394,1,
62,3619,5,21,1,
2553,3620,16,0,392,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3621,16,0,392,
1,2536,1686,1,2464,
963,1,2605,3622,16,
0,392,1,2470,3623,
16,0,392,1,2513,
1692,1,2551,1712,1,
63,3624,19,391,1,
63,3625,5,21,1,
2553,3626,16,0,389,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3627,16,0,389,
1,2536,1686,1,2464,
963,1,2605,3628,16,
0,389,1,2470,3629,
16,0,389,1,2513,
1692,1,2551,1712,1,
64,3630,19,388,1,
64,3631,5,21,1,
2553,3632,16,0,386,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3633,16,0,386,
1,2536,1686,1,2464,
963,1,2605,3634,16,
0,386,1,2470,3635,
16,0,386,1,2513,
1692,1,2551,1712,1,
65,3636,19,440,1,
65,3637,5,21,1,
2553,3638,16,0,438,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3639,16,0,438,
1,2536,1686,1,2464,
963,1,2605,3640,16,
0,438,1,2470,3641,
16,0,438,1,2513,
1692,1,2551,1712,1,
66,3642,19,437,1,
66,3643,5,21,1,
2553,3644,16,0,435,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3645,16,0,435,
1,2536,1686,1,2464,
963,1,2605,3646,16,
0,435,1,2470,3647,
16,0,435,1,2513,
1692,1,2551,1712,1,
67,3648,19,434,1,
67,3649,5,21,1,
2553,3650,16,0,432,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3651,16,0,432,
1,2536,1686,1,2464,
963,1,2605,3652,16,
0,432,1,2470,3653,
16,0,432,1,2513,
1692,1,2551,1712,1,
68,3654,19,431,1,
68,3655,5,21,1,
2553,3656,16,0,429,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3657,16,0,429,
1,2536,1686,1,2464,
963,1,2605,3658,16,
0,429,1,2470,3659,
16,0,429,1,2513,
1692,1,2551,1712,1,
69,3660,19,367,1,
69,3661,5,21,1,
2553,3662,16,0,365,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3663,16,0,365,
1,2536,1686,1,2464,
963,1,2605,3664,16,
0,365,1,2470,3665,
16,0,365,1,2513,
1692,1,2551,1712,1,
70,3666,19,364,1,
70,3667,5,21,1,
2553,3668,16,0,362,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3669,16,0,362,
1,2536,1686,1,2464,
963,1,2605,3670,16,
0,362,1,2470,3671,
16,0,362,1,2513,
1692,1,2551,1712,1,
71,3672,19,361,1,
71,3673,5,21,1,
2553,3674,16,0,359,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3675,16,0,359,
1,2536,1686,1,2464,
963,1,2605,3676,16,
0,359,1,2470,3677,
16,0,359,1,2513,
1692,1,2551,1712,1,
72,3678,19,709,1,
72,3679,5,21,1,
2553,3680,16,0,707,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3681,16,0,707,
1,2536,1686,1,2464,
963,1,2605,3682,16,
0,707,1,2470,3683,
16,0,707,1,2513,
1692,1,2551,1712,1,
73,3684,19,427,1,
73,3685,5,21,1,
2553,3686,16,0,425,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3687,16,0,425,
1,2536,1686,1,2464,
963,1,2605,3688,16,
0,425,1,2470,3689,
16,0,425,1,2513,
1692,1,2551,1712,1,
74,3690,19,542,1,
74,3691,5,21,1,
2553,3692,16,0,540,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3693,16,0,540,
1,2536,1686,1,2464,
963,1,2605,3694,16,
0,540,1,2470,3695,
16,0,540,1,2513,
1692,1,2551,1712,1,
75,3696,19,532,1,
75,3697,5,21,1,
2553,3698,16,0,530,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3699,16,0,530,
1,2536,1686,1,2464,
963,1,2605,3700,16,
0,530,1,2470,3701,
16,0,530,1,2513,
1692,1,2551,1712,1,
76,3702,19,529,1,
76,3703,5,21,1,
2553,3704,16,0,527,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3705,16,0,527,
1,2536,1686,1,2464,
963,1,2605,3706,16,
0,527,1,2470,3707,
16,0,527,1,2513,
1692,1,2551,1712,1,
77,3708,19,526,1,
77,3709,5,21,1,
2553,3710,16,0,524,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3711,16,0,524,
1,2536,1686,1,2464,
963,1,2605,3712,16,
0,524,1,2470,3713,
16,0,524,1,2513,
1692,1,2551,1712,1,
78,3714,19,523,1,
78,3715,5,21,1,
2553,3716,16,0,521,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3717,16,0,521,
1,2536,1686,1,2464,
963,1,2605,3718,16,
0,521,1,2470,3719,
16,0,521,1,2513,
1692,1,2551,1712,1,
79,3720,19,407,1,
79,3721,5,21,1,
2553,3722,16,0,405,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3723,16,0,405,
1,2536,1686,1,2464,
963,1,2605,3724,16,
0,405,1,2470,3725,
16,0,405,1,2513,
1692,1,2551,1712,1,
80,3726,19,615,1,
80,3727,5,21,1,
2553,3728,16,0,613,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3729,16,0,613,
1,2536,1686,1,2464,
963,1,2605,3730,16,
0,613,1,2470,3731,
16,0,613,1,2513,
1692,1,2551,1712,1,
81,3732,19,385,1,
81,3733,5,21,1,
2553,3734,16,0,383,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3735,16,0,383,
1,2536,1686,1,2464,
963,1,2605,3736,16,
0,383,1,2470,3737,
16,0,383,1,2513,
1692,1,2551,1712,1,
82,3738,19,423,1,
82,3739,5,21,1,
2553,3740,16,0,421,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3741,16,0,421,
1,2536,1686,1,2464,
963,1,2605,3742,16,
0,421,1,2470,3743,
16,0,421,1,2513,
1692,1,2551,1712,1,
83,3744,19,382,1,
83,3745,5,21,1,
2553,3746,16,0,380,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3747,16,0,380,
1,2536,1686,1,2464,
963,1,2605,3748,16,
0,380,1,2470,3749,
16,0,380,1,2513,
1692,1,2551,1712,1,
84,3750,19,379,1,
84,3751,5,21,1,
2553,3752,16,0,377,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3753,16,0,377,
1,2536,1686,1,2464,
963,1,2605,3754,16,
0,377,1,2470,3755,
16,0,377,1,2513,
1692,1,2551,1712,1,
85,3756,19,535,1,
85,3757,5,21,1,
2553,3758,16,0,533,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3759,16,0,533,
1,2536,1686,1,2464,
963,1,2605,3760,16,
0,533,1,2470,3761,
16,0,533,1,2513,
1692,1,2551,1712,1,
86,3762,19,416,1,
86,3763,5,21,1,
2553,3764,16,0,414,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3765,16,0,414,
1,2536,1686,1,2464,
963,1,2605,3766,16,
0,414,1,2470,3767,
16,0,414,1,2513,
1692,1,2551,1712,1,
87,3768,19,404,1,
87,3769,5,21,1,
2553,3770,16,0,402,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3771,16,0,402,
1,2536,1686,1,2464,
963,1,2605,3772,16,
0,402,1,2470,3773,
16,0,402,1,2513,
1692,1,2551,1712,1,
88,3774,19,376,1,
88,3775,5,21,1,
2553,3776,16,0,374,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3777,16,0,374,
1,2536,1686,1,2464,
963,1,2605,3778,16,
0,374,1,2470,3779,
16,0,374,1,2513,
1692,1,2551,1712,1,
89,3780,19,370,1,
89,3781,5,21,1,
2553,3782,16,0,368,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3783,16,0,368,
1,2536,1686,1,2464,
963,1,2605,3784,16,
0,368,1,2470,3785,
16,0,368,1,2513,
1692,1,2551,1712,1,
90,3786,19,373,1,
90,3787,5,21,1,
2553,3788,16,0,371,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3789,16,0,371,
1,2536,1686,1,2464,
963,1,2605,3790,16,
0,371,1,2470,3791,
16,0,371,1,2513,
1692,1,2551,1712,1,
91,3792,19,420,1,
91,3793,5,21,1,
2553,3794,16,0,418,
1,2596,1740,1,2593,
1725,1,2594,1730,1,
2595,1735,1,2522,1698,
1,2597,1745,1,2599,
1719,1,2600,1751,1,
2601,1756,1,2602,1761,
1,2603,1766,1,2531,
1704,1,2459,946,1,
2645,3795,16,0,418,
1,2536,1686,1,2464,
963,1,2605,3796,16,
0,418,1,2470,3797,
16,0,418,1,2513,
1692,1,2551,1712,1,
92,3798,19,133,1,
92,3799,5,128,1,
0,3800,16,0,674,
1,1,2092,1,2,
2098,1,3,2103,1,
4,2108,1,5,2113,
1,6,2118,1,7,
2123,1,8,3801,16,
0,131,1,1515,3802,
16,0,168,1,2773,
3403,1,2021,782,1,
2022,3803,16,0,546,
1,2525,3804,16,0,
481,1,2025,3805,16,
0,550,1,18,3806,
16,0,138,1,2027,
3807,16,0,554,1,
2029,789,1,2030,795,
1,2031,800,1,2032,
805,1,256,3808,16,
0,176,1,277,3809,
16,0,176,1,2035,
816,1,2037,821,1,
2039,826,1,32,3810,
16,0,168,1,2041,
832,1,2293,3811,16,
0,176,1,2043,838,
1,2045,843,1,2715,
3379,1,41,3812,16,
0,176,1,1297,3813,
16,0,168,1,43,
3814,16,0,176,1,
46,3815,16,0,181,
1,1804,3816,16,0,
168,1,299,3817,16,
0,176,1,52,3818,
16,0,168,1,509,
3819,16,0,176,1,
2318,3820,16,0,168,
1,62,3821,16,0,
202,1,65,3822,16,
0,204,1,2075,3823,
16,0,168,1,1574,
863,1,2743,3367,1,
71,3824,16,0,176,
1,1775,3825,16,0,
168,1,76,3826,16,
0,176,1,1834,3827,
16,0,168,1,2337,
3828,16,0,168,1,
79,3829,16,0,176,
1,1335,3830,16,0,
168,1,322,3831,16,
0,176,1,85,3832,
16,0,176,1,2516,
3833,16,0,466,1,
1261,3834,16,0,168,
1,89,3835,16,0,
176,1,2033,810,1,
346,3836,16,0,176,
1,97,3837,16,0,
176,1,2106,3838,16,
0,168,1,2774,3385,
1,102,3839,16,0,
176,1,2776,3361,1,
1803,851,1,2364,891,
1,1113,3840,16,0,
161,1,112,3841,16,
0,176,1,1117,3842,
16,0,168,1,2775,
3374,1,1873,899,1,
1876,3843,16,0,168,
1,372,3844,16,0,
584,1,374,3845,16,
0,586,1,124,3846,
16,0,176,1,376,
3847,16,0,588,1,
378,3848,16,0,590,
1,2136,906,1,2718,
3849,16,0,176,1,
381,3850,16,0,176,
1,525,3851,16,0,
176,1,137,3852,16,
0,176,1,1901,3853,
16,0,168,1,1153,
3854,16,0,168,1,
151,3855,16,0,176,
1,1407,3856,16,0,
168,1,1659,3857,16,
0,168,1,2413,3858,
16,0,168,1,406,
3859,16,0,176,1,
1371,3860,16,0,168,
1,1860,885,1,2105,
878,1,166,3861,16,
0,176,1,1622,3862,
16,0,176,1,1931,
925,1,1933,3863,16,
0,168,1,431,3864,
16,0,176,1,1585,
3865,16,0,176,1,
182,3866,16,0,176,
1,1189,3867,16,0,
168,1,1443,3868,16,
0,168,1,1695,3869,
16,0,168,1,2198,
3870,16,0,168,1,
447,3871,16,0,176,
1,2458,940,1,2459,
946,1,1958,3872,16,
0,168,1,2462,953,
1,1657,958,1,2464,
963,1,2466,3396,1,
459,3873,16,0,176,
1,2468,3874,16,0,
357,1,462,3875,16,
0,176,1,199,3876,
16,0,176,1,217,
3877,16,0,176,1,
2227,972,1,1225,3878,
16,0,168,1,1479,
3879,16,0,168,1,
1731,3880,16,0,176,
1,1989,980,1,1990,
3881,16,0,168,1,
236,3882,16,0,176,
1,2754,3390,1,2755,
3883,16,0,674,1,
2507,3884,16,0,452,
1,1756,3885,16,0,
168,1,93,3886,19,
687,1,93,3887,5,
95,1,256,3888,16,
0,685,1,1261,3889,
16,0,685,1,509,
3890,16,0,685,1,
1515,3891,16,0,685,
1,2021,782,1,1775,
3892,16,0,685,1,
2029,789,1,2030,795,
1,2031,800,1,2032,
805,1,2033,810,1,
277,3893,16,0,685,
1,2035,816,1,2037,
821,1,2039,826,1,
32,3894,16,0,685,
1,2041,832,1,2293,
3895,16,0,685,1,
2043,838,1,2045,843,
1,41,3896,16,0,
685,1,1297,3897,16,
0,685,1,43,3898,
16,0,685,1,1803,
851,1,1804,3899,16,
0,685,1,299,3900,
16,0,685,1,52,
3901,16,0,685,1,
2318,3902,16,0,685,
1,62,3903,16,0,
685,1,2075,3904,16,
0,685,1,1574,863,
1,71,3905,16,0,
685,1,76,3906,16,
0,685,1,1834,3907,
16,0,685,1,2337,
3908,16,0,685,1,
79,3909,16,0,685,
1,1335,3910,16,0,
685,1,322,3911,16,
0,685,1,85,3912,
16,0,685,1,89,
3913,16,0,685,1,
346,3914,16,0,685,
1,2105,878,1,2106,
3915,16,0,685,1,
97,3916,16,0,685,
1,1860,885,1,2364,
891,1,102,3917,16,
0,685,1,112,3918,
16,0,685,1,1117,
3919,16,0,685,1,
1873,899,1,1876,3920,
16,0,685,1,124,
3921,16,0,685,1,
2136,906,1,2718,3922,
16,0,685,1,381,
3923,16,0,685,1,
525,3924,16,0,685,
1,137,3925,16,0,
685,1,1901,3926,16,
0,685,1,1153,3927,
16,0,685,1,151,
3928,16,0,685,1,
1407,3929,16,0,685,
1,1659,3930,16,0,
685,1,2413,3931,16,
0,685,1,406,3932,
16,0,685,1,1371,
3933,16,0,685,1,
166,3934,16,0,685,
1,1622,3935,16,0,
685,1,1931,925,1,
1933,3936,16,0,685,
1,431,3937,16,0,
685,1,1585,3938,16,
0,685,1,182,3939,
16,0,685,1,1189,
3940,16,0,685,1,
1443,3941,16,0,685,
1,1695,3942,16,0,
685,1,2198,3943,16,
0,685,1,447,3944,
16,0,685,1,2458,
940,1,2459,946,1,
1958,3945,16,0,685,
1,2462,953,1,1657,
958,1,2464,963,1,
199,3946,16,0,685,
1,459,3947,16,0,
685,1,462,3948,16,
0,685,1,217,3949,
16,0,685,1,2227,
972,1,1225,3950,16,
0,685,1,1479,3951,
16,0,685,1,1731,
3952,16,0,685,1,
1989,980,1,1990,3953,
16,0,685,1,236,
3954,16,0,685,1,
1756,3955,16,0,685,
1,94,3956,19,684,
1,94,3957,5,95,
1,256,3958,16,0,
682,1,1261,3959,16,
0,682,1,509,3960,
16,0,682,1,1515,
3961,16,0,682,1,
2021,782,1,1775,3962,
16,0,682,1,2029,
789,1,2030,795,1,
2031,800,1,2032,805,
1,2033,810,1,277,
3963,16,0,682,1,
2035,816,1,2037,821,
1,2039,826,1,32,
3964,16,0,682,1,
2041,832,1,2293,3965,
16,0,682,1,2043,
838,1,2045,843,1,
41,3966,16,0,682,
1,1297,3967,16,0,
682,1,43,3968,16,
0,682,1,1803,851,
1,1804,3969,16,0,
682,1,299,3970,16,
0,682,1,52,3971,
16,0,682,1,2318,
3972,16,0,682,1,
62,3973,16,0,682,
1,2075,3974,16,0,
682,1,1574,863,1,
71,3975,16,0,682,
1,76,3976,16,0,
682,1,1834,3977,16,
0,682,1,2337,3978,
16,0,682,1,79,
3979,16,0,682,1,
1335,3980,16,0,682,
1,322,3981,16,0,
682,1,85,3982,16,
0,682,1,89,3983,
16,0,682,1,346,
3984,16,0,682,1,
2105,878,1,2106,3985,
16,0,682,1,97,
3986,16,0,682,1,
1860,885,1,2364,891,
1,102,3987,16,0,
682,1,112,3988,16,
0,682,1,1117,3989,
16,0,682,1,1873,
899,1,1876,3990,16,
0,682,1,124,3991,
16,0,682,1,2136,
906,1,2718,3992,16,
0,682,1,381,3993,
16,0,682,1,525,
3994,16,0,682,1,
137,3995,16,0,682,
1,1901,3996,16,0,
682,1,1153,3997,16,
0,682,1,151,3998,
16,0,682,1,1407,
3999,16,0,682,1,
1659,4000,16,0,682,
1,2413,4001,16,0,
682,1,406,4002,16,
0,682,1,1371,4003,
16,0,682,1,166,
4004,16,0,682,1,
1622,4005,16,0,682,
1,1931,925,1,1933,
4006,16,0,682,1,
431,4007,16,0,682,
1,1585,4008,16,0,
682,1,182,4009,16,
0,682,1,1189,4010,
16,0,682,1,1443,
4011,16,0,682,1,
1695,4012,16,0,682,
1,2198,4013,16,0,
682,1,447,4014,16,
0,682,1,2458,940,
1,2459,946,1,1958,
4015,16,0,682,1,
2462,953,1,1657,958,
1,2464,963,1,199,
4016,16,0,682,1,
459,4017,16,0,682,
1,462,4018,16,0,
682,1,217,4019,16,
0,682,1,2227,972,
1,1225,4020,16,0,
682,1,1479,4021,16,
0,682,1,1731,4022,
16,0,682,1,1989,
980,1,1990,4023,16,
0,682,1,236,4024,
16,0,682,1,1756,
4025,16,0,682,1,
95,4026,19,681,1,
95,4027,5,95,1,
256,4028,16,0,679,
1,1261,4029,16,0,
679,1,509,4030,16,
0,679,1,1515,4031,
16,0,679,1,2021,
782,1,1775,4032,16,
0,679,1,2029,789,
1,2030,795,1,2031,
800,1,2032,805,1,
2033,810,1,277,4033,
16,0,679,1,2035,
816,1,2037,821,1,
2039,826,1,32,4034,
16,0,679,1,2041,
832,1,2293,4035,16,
0,679,1,2043,838,
1,2045,843,1,41,
4036,16,0,679,1,
1297,4037,16,0,679,
1,43,4038,16,0,
679,1,1803,851,1,
1804,4039,16,0,679,
1,299,4040,16,0,
679,1,52,4041,16,
0,679,1,2318,4042,
16,0,679,1,62,
4043,16,0,679,1,
2075,4044,16,0,679,
1,1574,863,1,71,
4045,16,0,679,1,
76,4046,16,0,679,
1,1834,4047,16,0,
679,1,2337,4048,16,
0,679,1,79,4049,
16,0,679,1,1335,
4050,16,0,679,1,
322,4051,16,0,679,
1,85,4052,16,0,
679,1,89,4053,16,
0,679,1,346,4054,
16,0,679,1,2105,
878,1,2106,4055,16,
0,679,1,97,4056,
16,0,679,1,1860,
885,1,2364,891,1,
102,4057,16,0,679,
1,112,4058,16,0,
679,1,1117,4059,16,
0,679,1,1873,899,
1,1876,4060,16,0,
679,1,124,4061,16,
0,679,1,2136,906,
1,2718,4062,16,0,
679,1,381,4063,16,
0,679,1,525,4064,
16,0,679,1,137,
4065,16,0,679,1,
1901,4066,16,0,679,
1,1153,4067,16,0,
679,1,151,4068,16,
0,679,1,1407,4069,
16,0,679,1,1659,
4070,16,0,679,1,
2413,4071,16,0,679,
1,406,4072,16,0,
679,1,1371,4073,16,
0,679,1,166,4074,
16,0,679,1,1622,
4075,16,0,679,1,
1931,925,1,1933,4076,
16,0,679,1,431,
4077,16,0,679,1,
1585,4078,16,0,679,
1,182,4079,16,0,
679,1,1189,4080,16,
0,679,1,1443,4081,
16,0,679,1,1695,
4082,16,0,679,1,
2198,4083,16,0,679,
1,447,4084,16,0,
679,1,2458,940,1,
2459,946,1,1958,4085,
16,0,679,1,2462,
953,1,1657,958,1,
2464,963,1,199,4086,
16,0,679,1,459,
4087,16,0,679,1,
462,4088,16,0,679,
1,217,4089,16,0,
679,1,2227,972,1,
1225,4090,16,0,679,
1,1479,4091,16,0,
679,1,1731,4092,16,
0,679,1,1989,980,
1,1990,4093,16,0,
679,1,236,4094,16,
0,679,1,1756,4095,
16,0,679,1,96,
4096,19,103,1,96,
4097,5,1,1,0,
4098,16,0,104,1,
97,4099,19,197,1,
97,4100,5,1,1,
0,4101,16,0,195,
1,98,4102,19,305,
1,98,4103,5,2,
1,0,4104,16,0,
303,1,2755,4105,16,
0,731,1,99,4106,
19,299,1,99,4107,
5,2,1,0,4108,
16,0,732,1,2755,
4109,16,0,297,1,
100,4110,19,516,1,
100,4111,5,2,1,
0,4112,16,0,667,
1,2755,4113,16,0,
514,1,101,4114,19,
673,1,101,4115,5,
4,1,0,4116,16,
0,671,1,2696,4117,
16,0,712,1,2766,
4118,16,0,712,1,
2755,4119,16,0,671,
1,102,4120,19,151,
1,102,4121,5,2,
1,2470,4122,16,0,
510,1,2605,4123,16,
0,149,1,103,4124,
19,654,1,103,4125,
5,4,1,2553,4126,
16,0,720,1,2645,
4127,16,0,720,1,
2470,4128,16,0,652,
1,2605,4129,16,0,
652,1,104,4130,19,
645,1,104,4131,5,
4,1,2553,4132,16,
0,643,1,2645,4133,
16,0,643,1,2470,
4134,16,0,651,1,
2605,4135,16,0,651,
1,105,4136,19,500,
1,105,4137,5,4,
1,2553,4138,16,0,
642,1,2645,4139,16,
0,642,1,2470,4140,
16,0,498,1,2605,
4141,16,0,498,1,
106,4142,19,641,1,
106,4143,5,4,1,
2553,4144,16,0,639,
1,2645,4145,16,0,
639,1,2470,4146,16,
0,723,1,2605,4147,
16,0,723,1,107,
4148,19,343,1,107,
4149,5,4,1,2553,
4150,16,0,638,1,
2645,4151,16,0,638,
1,2470,4152,16,0,
341,1,2605,4153,16,
0,341,1,108,4154,
19,141,1,108,4155,
5,3,1,2702,4156,
16,0,692,1,2538,
4157,16,0,230,1,
10,4158,16,0,139,
1,109,4159,19,284,
1,109,4160,5,1,
1,2524,4161,16,0,
282,1,110,4162,19,
472,1,110,4163,5,
1,1,2515,4164,16,
0,470,1,111,4165,
19,458,1,111,4166,
5,1,1,2506,4167,
16,0,456,1,112,
4168,19,154,1,112,
4169,5,17,1,0,
4170,16,0,695,1,
2702,4171,16,0,353,
1,2075,4172,16,0,
704,1,2337,4173,16,
0,704,1,2413,4174,
16,0,704,1,10,
4175,16,0,353,1,
1901,4176,16,0,704,
1,2198,4177,16,0,
704,1,2106,4178,16,
0,704,1,2755,4179,
16,0,695,1,21,
4180,16,0,152,1,
2538,4181,16,0,353,
1,1804,4182,16,0,
704,1,1990,4183,16,
0,704,1,32,4184,
16,0,704,1,1958,
4185,16,0,704,1,
1775,4186,16,0,704,
1,113,4187,19,275,
1,113,4188,5,1,
1,2524,4189,16,0,
273,1,114,4190,19,
469,1,114,4191,5,
1,1,2515,4192,16,
0,467,1,115,4193,
19,455,1,115,4194,
5,1,1,2506,4195,
16,0,453,1,116,
4196,19,130,1,116,
4197,5,18,1,0,
4198,16,0,128,1,
2702,4199,16,0,137,
1,2075,4200,16,0,
137,1,2337,4201,16,
0,137,1,2413,4202,
16,0,137,1,10,
4203,16,0,137,1,
2198,4204,16,0,137,
1,1901,4205,16,0,
137,1,52,4206,16,
0,200,1,2106,4207,
16,0,137,1,2755,
4208,16,0,128,1,
21,4209,16,0,137,
1,2538,4210,16,0,
137,1,1804,4211,16,
0,137,1,1990,4212,
16,0,137,1,32,
4213,16,0,137,1,
1958,4214,16,0,137,
1,1775,4215,16,0,
137,1,117,4216,19,
604,1,117,4217,5,
4,1,2553,4218,16,
0,602,1,2645,4219,
16,0,602,1,2470,
4220,16,0,602,1,
2605,4221,16,0,602,
1,118,4222,19,490,
1,118,4223,5,4,
1,2553,4224,16,0,
488,1,2645,4225,16,
0,488,1,2470,4226,
16,0,488,1,2605,
4227,16,0,488,1,
119,4228,19,478,1,
119,4229,5,4,1,
2553,4230,16,0,476,
1,2645,4231,16,0,
476,1,2470,4232,16,
0,476,1,2605,4233,
16,0,476,1,120,
4234,19,463,1,120,
4235,5,4,1,2553,
4236,16,0,461,1,
2645,4237,16,0,461,
1,2470,4238,16,0,
461,1,2605,4239,16,
0,461,1,121,4240,
19,715,1,121,4241,
5,4,1,2553,4242,
16,0,713,1,2645,
4243,16,0,713,1,
2470,4244,16,0,713,
1,2605,4245,16,0,
713,1,122,4246,19,
352,1,122,4247,5,
18,1,2075,4248,16,
0,555,1,2520,4249,
16,0,475,1,2337,
4250,16,0,555,1,
2413,4251,16,0,555,
1,2511,4252,16,0,
460,1,2713,4253,16,
0,694,1,2529,4254,
16,0,487,1,1901,
4255,16,0,555,1,
2198,4256,16,0,555,
1,2534,4257,16,0,
601,1,2106,4258,16,
0,555,1,1804,4259,
16,0,555,1,1990,
4260,16,0,555,1,
31,4261,16,0,350,
1,32,4262,16,0,
555,1,2549,4263,16,
0,508,1,1958,4264,
16,0,555,1,1775,
4265,16,0,555,1,
123,4266,19,315,1,
123,4267,5,1,1,
32,4268,16,0,313,
1,124,4269,19,262,
1,124,4270,5,11,
1,2075,4271,16,0,
625,1,2337,4272,16,
0,266,1,2413,4273,
16,0,493,1,1901,
4274,16,0,408,1,
2198,4275,16,0,332,
1,2106,4276,16,0,
666,1,1804,4277,16,
0,292,1,1990,4278,
16,0,543,1,32,
4279,16,0,346,1,
1958,4280,16,0,502,
1,1775,4281,16,0,
260,1,125,4282,19,
631,1,125,4283,5,
11,1,2075,4284,16,
0,629,1,2337,4285,
16,0,629,1,2413,
4286,16,0,629,1,
1901,4287,16,0,629,
1,2198,4288,16,0,
629,1,2106,4289,16,
0,629,1,1804,4290,
16,0,629,1,1990,
4291,16,0,629,1,
32,4292,16,0,629,
1,1958,4293,16,0,
629,1,1775,4294,16,
0,629,1,126,4295,
19,701,1,126,4296,
5,11,1,2075,4297,
16,0,699,1,2337,
4298,16,0,699,1,
2413,4299,16,0,699,
1,1901,4300,16,0,
699,1,2198,4301,16,
0,699,1,2106,4302,
16,0,699,1,1804,
4303,16,0,699,1,
1990,4304,16,0,699,
1,32,4305,16,0,
699,1,1958,4306,16,
0,699,1,1775,4307,
16,0,699,1,127,
4308,19,164,1,127,
4309,5,31,1,1901,
4310,16,0,703,1,
1479,4311,16,0,605,
1,2075,4312,16,0,
703,1,1695,4313,16,
0,198,1,1756,4314,
16,0,191,1,2413,
4315,16,0,703,1,
2198,4316,16,0,703,
1,1876,4317,16,0,
717,1,1659,4318,16,
0,191,1,1443,4319,
16,0,571,1,1117,
4320,16,0,162,1,
1990,4321,16,0,703,
1,1189,4322,16,0,
245,1,1775,4323,16,
0,703,1,32,4324,
16,0,703,1,2106,
4325,16,0,703,1,
1515,4326,16,0,627,
1,2337,4327,16,0,
703,1,52,4328,16,
0,647,1,1804,4329,
16,0,703,1,1261,
4330,16,0,309,1,
1153,4331,16,0,252,
1,1225,4332,16,0,
278,1,1335,4333,16,
0,485,1,1933,4334,
16,0,608,1,1834,
4335,16,0,325,1,
1297,4336,16,0,336,
1,1407,4337,16,0,
619,1,2318,4338,16,
0,191,1,1958,4339,
16,0,703,1,1371,
4340,16,0,473,1,
128,4341,19,580,1,
128,4342,5,11,1,
2075,4343,16,0,578,
1,2337,4344,16,0,
578,1,2413,4345,16,
0,578,1,1901,4346,
16,0,578,1,2198,
4347,16,0,578,1,
2106,4348,16,0,578,
1,1804,4349,16,0,
578,1,1990,4350,16,
0,578,1,32,4351,
16,0,578,1,1958,
4352,16,0,578,1,
1775,4353,16,0,578,
1,129,4354,19,576,
1,129,4355,5,11,
1,2075,4356,16,0,
574,1,2337,4357,16,
0,574,1,2413,4358,
16,0,574,1,1901,
4359,16,0,574,1,
2198,4360,16,0,574,
1,2106,4361,16,0,
574,1,1804,4362,16,
0,574,1,1990,4363,
16,0,574,1,32,
4364,16,0,574,1,
1958,4365,16,0,574,
1,1775,4366,16,0,
574,1,130,4367,19,
623,1,130,4368,5,
11,1,2075,4369,16,
0,621,1,2337,4370,
16,0,621,1,2413,
4371,16,0,621,1,
1901,4372,16,0,621,
1,2198,4373,16,0,
621,1,2106,4374,16,
0,621,1,1804,4375,
16,0,621,1,1990,
4376,16,0,621,1,
32,4377,16,0,621,
1,1958,4378,16,0,
621,1,1775,4379,16,
0,621,1,131,4380,
19,570,1,131,4381,
5,11,1,2075,4382,
16,0,568,1,2337,
4383,16,0,568,1,
2413,4384,16,0,568,
1,1901,4385,16,0,
568,1,2198,4386,16,
0,568,1,2106,4387,
16,0,568,1,1804,
4388,16,0,568,1,
1990,4389,16,0,568,
1,32,4390,16,0,
568,1,1958,4391,16,
0,568,1,1775,4392,
16,0,568,1,132,
4393,19,567,1,132,
4394,5,11,1,2075,
4395,16,0,565,1,
2337,4396,16,0,565,
1,2413,4397,16,0,
565,1,1901,4398,16,
0,565,1,2198,4399,
16,0,565,1,2106,
4400,16,0,565,1,
1804,4401,16,0,565,
1,1990,4402,16,0,
565,1,32,4403,16,
0,565,1,1958,4404,
16,0,565,1,1775,
4405,16,0,565,1,
133,4406,19,564,1,
133,4407,5,11,1,
2075,4408,16,0,562,
1,2337,4409,16,0,
562,1,2413,4410,16,
0,562,1,1901,4411,
16,0,562,1,2198,
4412,16,0,562,1,
2106,4413,16,0,562,
1,1804,4414,16,0,
562,1,1990,4415,16,
0,562,1,32,4416,
16,0,562,1,1958,
4417,16,0,562,1,
1775,4418,16,0,562,
1,134,4419,19,561,
1,134,4420,5,11,
1,2075,4421,16,0,
559,1,2337,4422,16,
0,559,1,2413,4423,
16,0,559,1,1901,
4424,16,0,559,1,
2198,4425,16,0,559,
1,2106,4426,16,0,
559,1,1804,4427,16,
0,559,1,1990,4428,
16,0,559,1,32,
4429,16,0,559,1,
1958,4430,16,0,559,
1,1775,4431,16,0,
559,1,135,4432,19,
558,1,135,4433,5,
11,1,2075,4434,16,
0,556,1,2337,4435,
16,0,556,1,2413,
4436,16,0,556,1,
1901,4437,16,0,556,
1,2198,4438,16,0,
556,1,2106,4439,16,
0,556,1,1804,4440,
16,0,556,1,1990,
4441,16,0,556,1,
32,4442,16,0,556,
1,1958,4443,16,0,
556,1,1775,4444,16,
0,556,1,136,4445,
19,147,1,136,4446,
5,3,1,1756,4447,
16,0,291,1,2318,
4448,16,0,308,1,
1659,4449,16,0,145,
1,137,4450,19,597,
1,137,4451,5,68,
1,1901,4452,16,0,
595,1,1479,4453,16,
0,595,1,112,4454,
16,0,595,1,2293,
4455,16,0,595,1,
1804,4456,16,0,595,
1,431,4457,16,0,
595,1,1443,4458,16,
0,595,1,1756,4459,
16,0,595,1,124,
4460,16,0,595,1,
525,4461,16,0,595,
1,236,4462,16,0,
595,1,346,4463,16,
0,595,1,1876,4464,
16,0,595,1,1659,
4465,16,0,595,1,
1225,4466,16,0,595,
1,1117,4467,16,0,
595,1,137,4468,16,
0,595,1,2318,4469,
16,0,595,1,1775,
4470,16,0,595,1,
32,4471,16,0,595,
1,2718,4472,16,0,
595,1,1407,4473,16,
0,595,1,256,4474,
16,0,595,1,459,
4475,16,0,595,1,
406,4476,16,0,595,
1,41,4477,16,0,
595,1,151,4478,16,
0,595,1,43,4479,
16,0,595,1,1585,
4480,16,0,595,1,
1990,4481,16,0,595,
1,2337,4482,16,0,
595,1,509,4483,16,
0,595,1,52,4484,
16,0,595,1,381,
4485,16,0,595,1,
447,4486,16,0,595,
1,166,4487,16,0,
595,1,462,4488,16,
0,595,1,277,4489,
16,0,595,1,1695,
4490,16,0,595,1,
62,4491,16,0,635,
1,1153,4492,16,0,
595,1,2106,4493,16,
0,595,1,1335,4494,
16,0,595,1,71,
4495,16,0,595,1,
182,4496,16,0,595,
1,76,4497,16,0,
595,1,79,4498,16,
0,595,1,1933,4499,
16,0,595,1,299,
4500,16,0,595,1,
85,4501,16,0,595,
1,1515,4502,16,0,
595,1,2198,4503,16,
0,595,1,89,4504,
16,0,595,1,1834,
4505,16,0,595,1,
1622,4506,16,0,595,
1,2413,4507,16,0,
595,1,2075,4508,16,
0,595,1,1731,4509,
16,0,595,1,97,
4510,16,0,595,1,
1297,4511,16,0,595,
1,1189,4512,16,0,
595,1,102,4513,16,
0,595,1,1261,4514,
16,0,595,1,322,
4515,16,0,595,1,
1958,4516,16,0,595,
1,199,4517,16,0,
595,1,1371,4518,16,
0,595,1,217,4519,
16,0,595,1,138,
4520,19,661,1,138,
4521,5,2,1,459,
4522,16,0,659,1,
41,4523,16,0,722,
1,139,4524,19,665,
1,139,4525,5,3,
1,462,4526,16,0,
663,1,459,4527,16,
0,691,1,41,4528,
16,0,691,1,140,
4529,19,4530,4,36,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,1,140,4525,1,
141,4531,19,593,1,
141,4532,5,68,1,
1901,4533,16,0,591,
1,1479,4534,16,0,
591,1,112,4535,16,
0,591,1,2293,4536,
16,0,591,1,1804,
4537,16,0,591,1,
431,4538,16,0,591,
1,1443,4539,16,0,
591,1,1756,4540,16,
0,591,1,124,4541,
16,0,591,1,525,
4542,16,0,591,1,
236,4543,16,0,591,
1,346,4544,16,0,
591,1,1876,4545,16,
0,591,1,1659,4546,
16,0,591,1,1225,
4547,16,0,591,1,
1117,4548,16,0,591,
1,137,4549,16,0,
591,1,2318,4550,16,
0,591,1,1775,4551,
16,0,591,1,32,
4552,16,0,591,1,
2718,4553,16,0,591,
1,1407,4554,16,0,
591,1,256,4555,16,
0,591,1,459,4556,
16,0,591,1,406,
4557,16,0,591,1,
41,4558,16,0,591,
1,151,4559,16,0,
591,1,43,4560,16,
0,591,1,1585,4561,
16,0,591,1,1990,
4562,16,0,591,1,
2337,4563,16,0,591,
1,509,4564,16,0,
591,1,52,4565,16,
0,591,1,381,4566,
16,0,591,1,447,
4567,16,0,591,1,
166,4568,16,0,591,
1,462,4569,16,0,
591,1,277,4570,16,
0,591,1,1695,4571,
16,0,591,1,62,
4572,16,0,636,1,
1153,4573,16,0,591,
1,2106,4574,16,0,
591,1,1335,4575,16,
0,591,1,71,4576,
16,0,591,1,182,
4577,16,0,591,1,
76,4578,16,0,591,
1,79,4579,16,0,
591,1,1933,4580,16,
0,591,1,299,4581,
16,0,591,1,85,
4582,16,0,591,1,
1515,4583,16,0,591,
1,2198,4584,16,0,
591,1,89,4585,16,
0,591,1,1834,4586,
16,0,591,1,1622,
4587,16,0,591,1,
2413,4588,16,0,591,
1,2075,4589,16,0,
591,1,1731,4590,16,
0,591,1,97,4591,
16,0,591,1,1297,
4592,16,0,591,1,
1189,4593,16,0,591,
1,102,4594,16,0,
591,1,1261,4595,16,
0,591,1,322,4596,
16,0,591,1,1958,
4597,16,0,591,1,
199,4598,16,0,591,
1,1371,4599,16,0,
591,1,217,4600,16,
0,591,1,142,4601,
19,4602,4,28,86,
0,101,0,99,0,
116,0,111,0,114,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,142,4532,
1,143,4603,19,4604,
4,32,82,0,111,
0,116,0,97,0,
116,0,105,0,111,
0,110,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
143,4532,1,144,4605,
19,4606,4,24,76,
0,105,0,115,0,
116,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,144,
4532,1,145,4607,19,
172,1,145,4608,5,
67,1,1901,4609,16,
0,633,1,1479,4610,
16,0,582,1,112,
4611,16,0,254,1,
2293,4612,16,0,277,
1,1804,4613,16,0,
633,1,431,4614,16,
0,628,1,1443,4615,
16,0,517,1,1756,
4616,16,0,737,1,
124,4617,16,0,259,
1,525,4618,16,0,
318,1,236,4619,16,
0,358,1,346,4620,
16,0,545,1,1876,
4621,16,0,331,1,
1659,4622,16,0,737,
1,1225,4623,16,0,
253,1,1117,4624,16,
0,226,1,137,4625,
16,0,276,1,2318,
4626,16,0,737,1,
1775,4627,16,0,633,
1,32,4628,16,0,
633,1,2718,4629,16,
0,698,1,1407,4630,
16,0,536,1,256,
4631,16,0,412,1,
459,4632,16,0,170,
1,406,4633,16,0,
612,1,41,4634,16,
0,170,1,151,4635,
16,0,290,1,43,
4636,16,0,697,1,
1990,4637,16,0,633,
1,2337,4638,16,0,
633,1,509,4639,16,
0,711,1,52,4640,
16,0,649,1,381,
4641,16,0,600,1,
447,4642,16,0,318,
1,166,4643,16,0,
307,1,462,4644,16,
0,170,1,277,4645,
16,0,459,1,1695,
4646,16,0,271,1,
1261,4647,16,0,289,
1,1153,4648,16,0,
177,1,2106,4649,16,
0,633,1,1335,4650,
16,0,340,1,71,
4651,16,0,210,1,
182,4652,16,0,318,
1,76,4653,16,0,
598,1,79,4654,16,
0,225,1,1933,4655,
16,0,424,1,299,
4656,16,0,491,1,
85,4657,16,0,511,
1,1515,4658,16,0,
611,1,2198,4659,16,
0,633,1,89,4660,
16,0,235,1,1834,
4661,16,0,306,1,
1622,4662,16,0,710,
1,2413,4663,16,0,
633,1,2075,4664,16,
0,633,1,1731,4665,
16,0,255,1,97,
4666,16,0,428,1,
1297,4667,16,0,345,
1,1189,4668,16,0,
224,1,102,4669,16,
0,243,1,1585,4670,
16,0,719,1,322,
4671,16,0,512,1,
1958,4672,16,0,633,
1,199,4673,16,0,
329,1,1371,4674,16,
0,413,1,217,4675,
16,0,339,1,146,
4676,19,4677,4,36,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,146,4608,1,
147,4678,19,4679,4,
30,73,0,100,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,147,4608,1,
148,4680,19,4681,4,
36,73,0,100,0,
101,0,110,0,116,
0,68,0,111,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,148,4608,
1,149,4682,19,4683,
4,44,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,149,4608,1,
150,4684,19,4685,4,
32,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,150,
4608,1,151,4686,19,
4687,4,30,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,151,
4608,1,152,4688,19,
4689,4,36,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
152,4608,1,153,4690,
19,4691,4,42,80,
0,97,0,114,0,
101,0,110,0,116,
0,104,0,101,0,
115,0,105,0,115,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,153,4608,1,
154,4692,19,4693,4,
56,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,154,4608,
1,156,4694,19,769,
1,156,4097,1,157,
4695,19,753,1,157,
4097,1,158,4696,19,
3365,1,158,4100,1,
159,4697,19,3388,1,
159,4100,1,160,4698,
19,3377,1,160,4100,
1,161,4699,19,3406,
1,161,4100,1,162,
4700,19,3393,1,162,
4103,1,163,4701,19,
3371,1,163,4103,1,
164,4702,19,3383,1,
164,4107,1,165,4703,
19,3399,1,165,4107,
1,166,4704,19,747,
1,166,4111,1,167,
4705,19,764,1,167,
4111,1,168,4706,19,
774,1,168,4115,1,
169,4707,19,759,1,
169,4115,1,170,4708,
19,1769,1,170,4121,
1,171,4709,19,1748,
1,171,4121,1,172,
4710,19,1764,1,172,
4121,1,173,4711,19,
1743,1,173,4121,1,
174,4712,19,1759,1,
174,4121,1,175,4713,
19,1738,1,175,4121,
1,176,4714,19,1754,
1,176,4121,1,177,
4715,19,1733,1,177,
4121,1,178,4716,19,
1723,1,178,4121,1,
179,4717,19,1728,1,
179,4121,1,180,4718,
19,1716,1,180,4125,
1,181,4719,19,1690,
1,181,4131,1,182,
4720,19,1708,1,182,
4137,1,183,4721,19,
1702,1,183,4143,1,
184,4722,19,1696,1,
184,4149,1,185,4723,
19,1809,1,185,4155,
1,186,4724,19,1784,
1,186,4155,1,187,
4725,19,2139,1,187,
4160,1,188,4726,19,
2132,1,188,4163,1,
189,4727,19,2181,1,
189,4166,1,190,4728,
19,1181,1,190,4169,
1,191,4729,19,2161,
1,191,4188,1,192,
4730,19,2154,1,192,
4191,1,193,4731,19,
2175,1,193,4194,1,
194,4732,19,966,1,
194,4247,1,195,4733,
19,950,1,195,4247,
1,196,4734,19,956,
1,196,4267,1,197,
4735,19,944,1,197,
4267,1,198,4736,19,
1209,1,198,4283,1,
199,4737,19,846,1,
199,4270,1,200,4738,
19,961,1,200,4270,
1,201,4739,19,841,
1,201,4270,1,202,
4740,19,866,1,202,
4270,1,203,4741,19,
835,1,203,4270,1,
204,4742,19,829,1,
204,4270,1,205,4743,
19,824,1,205,4270,
1,206,4744,19,819,
1,206,4270,1,207,
4745,19,813,1,207,
4270,1,208,4746,19,
808,1,208,4270,1,
209,4747,19,803,1,
209,4270,1,210,4748,
19,798,1,210,4270,
1,211,4749,19,793,
1,211,4270,1,212,
4750,19,1216,1,212,
4355,1,213,4751,19,
1354,1,213,4368,1,
214,4752,19,1203,1,
214,4381,1,215,4753,
19,1342,1,215,4381,
1,216,4754,19,983,
1,216,4394,1,217,
4755,19,786,1,217,
4394,1,218,4756,19,
881,1,218,4394,1,
219,4757,19,909,1,
219,4394,1,220,4758,
19,929,1,220,4407,
1,221,4759,19,975,
1,221,4407,1,222,
4760,19,889,1,222,
4420,1,223,4761,19,
902,1,223,4420,1,
224,4762,19,855,1,
224,4433,1,225,4763,
19,894,1,225,4433,
1,226,4764,19,1540,
1,226,4446,1,227,
4765,19,1222,1,227,
4446,1,228,4766,19,
1572,1,228,4446,1,
229,4767,19,1606,1,
229,4446,1,230,4768,
19,1470,1,230,4296,
1,231,4769,19,1529,
1,231,4296,1,232,
4770,19,1197,1,232,
4309,1,233,4771,19,
1638,1,233,4309,1,
234,4772,19,1567,1,
234,4309,1,235,4773,
19,1514,1,235,4309,
1,236,4774,19,1438,
1,236,4309,1,237,
4775,19,1364,1,237,
4309,1,238,4776,19,
1374,1,238,4309,1,
239,4777,19,1192,1,
239,4309,1,240,4778,
19,1622,1,240,4309,
1,241,4779,19,1562,
1,241,4309,1,242,
4780,19,1504,1,242,
4309,1,243,4781,19,
1427,1,243,4309,1,
244,4782,19,1390,1,
244,4309,1,245,4783,
19,1175,1,245,4309,
1,246,4784,19,1524,
1,246,4309,1,247,
4785,19,1550,1,247,
4309,1,248,4786,19,
1497,1,248,4309,1,
249,4787,19,1519,1,
249,4309,1,250,4788,
19,1330,1,250,4309,
1,251,4789,19,1234,
1,251,4309,1,252,
4790,19,1164,1,252,
4309,1,253,4791,19,
1596,1,253,4309,1,
254,4792,19,1545,1,
254,4309,1,255,4793,
19,1492,1,255,4309,
1,256,4794,19,1359,
1,256,4342,1,257,
4795,19,1337,1,257,
4342,1,258,4796,19,
1627,1,258,4532,1,
259,4797,19,1650,1,
259,4532,1,260,4798,
19,1617,1,260,4532,
1,261,4799,19,1612,
1,261,4532,1,262,
4800,19,1633,1,262,
4532,1,263,4801,19,
1578,1,263,4532,1,
264,4802,19,1284,1,
264,4532,1,265,4803,
19,1459,1,265,4608,
1,266,4804,19,1245,
1,266,4608,1,267,
4805,19,1252,1,267,
4608,1,268,4806,19,
1273,1,268,4608,1,
269,4807,19,1268,1,
269,4608,1,270,4808,
19,1263,1,270,4608,
1,271,4809,19,1258,
1,271,4608,1,272,
4810,19,1448,1,272,
4608,1,273,4811,19,
1476,1,273,4608,1,
274,4812,19,1453,1,
274,4608,1,275,4813,
19,1443,1,275,4608,
1,276,4814,19,1433,
1,276,4608,1,277,
4815,19,1416,1,277,
4608,1,278,4816,19,
1369,1,278,4608,1,
279,4817,19,1278,1,
279,4608,1,280,4818,
19,1239,1,280,4608,
1,281,4819,19,1187,
1,281,4608,1,282,
4820,19,1645,1,282,
4608,1,283,4821,19,
1601,1,283,4608,1,
284,4822,19,1590,1,
284,4608,1,285,4823,
19,1584,1,285,4608,
1,286,4824,19,1535,
1,286,4608,1,287,
4825,19,1509,1,287,
4608,1,288,4826,19,
1486,1,288,4608,1,
289,4827,19,1481,1,
289,4608,1,290,4828,
19,1422,1,290,4608,
1,291,4829,19,1398,
1,291,4608,1,292,
4830,19,1464,1,292,
4608,1,293,4831,19,
1556,1,293,4608,1,
294,4832,19,1411,1,
294,4608,1,295,4833,
19,1405,1,295,4608,
1,296,4834,19,1385,
1,296,4608,1,297,
4835,19,1348,1,297,
4608,1,298,4836,19,
1325,1,298,4608,1,
299,4837,19,1170,1,
299,4608,1,300,4838,
19,1660,1,300,4608,
1,301,4839,19,1290,
1,301,4608,1,302,
4840,19,1295,1,302,
4608,1,303,4841,19,
1315,1,303,4608,1,
304,4842,19,1305,1,
304,4608,1,305,4843,
19,1310,1,305,4608,
1,306,4844,19,1300,
1,306,4608,1,307,
4845,19,1655,1,307,
4608,1,308,4846,19,
1320,1,308,4608,1,
309,4847,19,1380,1,
309,4451,1,310,4848,
19,1822,1,310,4521,
1,311,4849,19,1815,
1,311,4521,1,312,
4850,19,1795,1,312,
4525,1,313,4851,19,
2126,1,313,4197,1,
314,4852,19,2121,1,
314,4197,1,315,4853,
19,2116,1,315,4197,
1,316,4854,19,2111,
1,316,4197,1,317,
4855,19,2106,1,317,
4197,1,318,4856,19,
2101,1,318,4197,1,
319,4857,19,2096,1,
319,4197,1,320,4858,
19,2084,1,320,4217,
1,321,4859,19,2079,
1,321,4217,1,322,
4860,19,2074,1,322,
4217,1,323,4861,19,
2069,1,323,4217,1,
324,4862,19,2064,1,
324,4217,1,325,4863,
19,2059,1,325,4217,
1,326,4864,19,2054,
1,326,4217,1,327,
4865,19,2049,1,327,
4217,1,328,4866,19,
2044,1,328,4217,1,
329,4867,19,1878,1,
329,4217,1,330,4868,
19,2038,1,330,4217,
1,331,4869,19,2033,
1,331,4223,1,332,
4870,19,2028,1,332,
4223,1,333,4871,19,
1870,1,333,4223,1,
334,4872,19,2023,1,
334,4223,1,335,4873,
19,2018,1,335,4223,
1,336,4874,19,2013,
1,336,4223,1,337,
4875,19,2008,1,337,
4223,1,338,4876,19,
2003,1,338,4223,1,
339,4877,19,1998,1,
339,4229,1,340,4878,
19,1862,1,340,4229,
1,341,4879,19,1992,
1,341,4235,1,342,
4880,19,1987,1,342,
4235,1,343,4881,19,
1982,1,343,4235,1,
344,4882,19,1855,1,
344,4235,1,345,4883,
19,1976,1,345,4235,
1,346,4884,19,1906,
1,346,4235,1,347,
4885,19,1971,1,347,
4235,1,348,4886,19,
1966,1,348,4235,1,
349,4887,19,1961,1,
349,4235,1,350,4888,
19,1956,1,350,4235,
1,351,4889,19,1951,
1,351,4241,1,352,
4890,19,1946,1,352,
4241,1,353,4891,19,
1941,1,353,4241,1,
354,4892,19,4893,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,51,
0,1,354,4155,1,
355,4894,19,4895,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,51,0,1,
355,4521,1,356,4896,
19,4897,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,52,0,1,
356,4155,1,357,4898,
19,4899,4,28,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
52,0,1,357,4521,
1,358,4900,19,4901,
4,50,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
53,0,1,358,4155,
2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"VectorArgStateEvent",new SCreator(VectorArgStateEvent_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"EmptyStatement",new SCreator(EmptyStatement_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"VectorDeclaration_1",new SCreator(VectorDeclaration_1_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"VectorArgEvent",new SCreator(VectorArgEvent_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"VoidArgStateEvent_1",new SCreator(VoidArgStateEvent_1_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"KeyArgEvent_1",new SCreator(KeyArgEvent_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"IntArgStateEvent_1",new SCreator(IntArgStateEvent_1_factory));
new Sfactory(this,"IntArgEvent_6",new SCreator(IntArgEvent_6_factory));
new Sfactory(this,"IntArgEvent_9",new SCreator(IntArgEvent_9_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"StateBody_10",new SCreator(StateBody_10_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"VoidArgEvent_4",new SCreator(VoidArgEvent_4_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"VoidArgEvent_2",new SCreator(VoidArgEvent_2_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"IntArgumentDeclarationList_1",new SCreator(IntArgumentDeclarationList_1_factory));
new Sfactory(this,"IntDeclaration_1",new SCreator(IntDeclaration_1_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"VectorArgumentDeclarationList_1",new SCreator(VectorArgumentDeclarationList_1_factory));
new Sfactory(this,"KeyArgumentDeclarationList",new SCreator(KeyArgumentDeclarationList_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"KeyArgStateEvent",new SCreator(KeyArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"IntArgEvent_5",new SCreator(IntArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"KeyArgEvent",new SCreator(KeyArgEvent_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"KeyArgStateEvent_1",new SCreator(KeyArgStateEvent_1_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"KeyDeclaration",new SCreator(KeyDeclaration_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"IntArgEvent_10",new SCreator(IntArgEvent_10_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"IntArgumentDeclarationList",new SCreator(IntArgumentDeclarationList_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"IntArgEvent_3",new SCreator(IntArgEvent_3_factory));
new Sfactory(this,"IntArgEvent_4",new SCreator(IntArgEvent_4_factory));
new Sfactory(this,"KeyDeclaration_1",new SCreator(KeyDeclaration_1_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"IntArgEvent_7",new SCreator(IntArgEvent_7_factory));
new Sfactory(this,"IntArgEvent_8",new SCreator(IntArgEvent_8_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"VectorArgEvent_2",new SCreator(VectorArgEvent_2_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"VectorArgStateEvent_1",new SCreator(VectorArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"StateBody_3",new SCreator(StateBody_3_factory));
new Sfactory(this,"StateBody_4",new SCreator(StateBody_4_factory));
new Sfactory(this,"StateBody_5",new SCreator(StateBody_5_factory));
new Sfactory(this,"StateBody_6",new SCreator(StateBody_6_factory));
new Sfactory(this,"StateBody_7",new SCreator(StateBody_7_factory));
new Sfactory(this,"StateBody_8",new SCreator(StateBody_8_factory));
new Sfactory(this,"StateBody_9",new SCreator(StateBody_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"IntArgEvent",new SCreator(IntArgEvent_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"VectorDeclaration",new SCreator(VectorDeclaration_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"VoidArgEvent_6",new SCreator(VoidArgEvent_6_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"VoidArgEvent_1",new SCreator(VoidArgEvent_1_factory));
new Sfactory(this,"VoidArgEvent_3",new SCreator(VoidArgEvent_3_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"VoidArgEvent_5",new SCreator(VoidArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"VoidArgEvent_7",new SCreator(VoidArgEvent_7_factory));
new Sfactory(this,"VoidArgEvent_8",new SCreator(VoidArgEvent_8_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"VectorArgEvent_1",new SCreator(VectorArgEvent_1_factory));
new Sfactory(this,"IntDeclaration",new SCreator(IntDeclaration_factory));
new Sfactory(this,"VectorArgEvent_3",new SCreator(VectorArgEvent_3_factory));
new Sfactory(this,"IntArgStateEvent",new SCreator(IntArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"KeyArgEvent_2",new SCreator(KeyArgEvent_2_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"EmptyStatement_1",new SCreator(EmptyStatement_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"ForLoop_2",new SCreator(ForLoop_2_factory));
new Sfactory(this,"KeyArgumentDeclarationList_1",new SCreator(KeyArgumentDeclarationList_1_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"IntArgEvent_1",new SCreator(IntArgEvent_1_factory));
new Sfactory(this,"IntArgEvent_2",new SCreator(IntArgEvent_2_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"VoidArgEvent",new SCreator(VoidArgEvent_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"VectorArgumentDeclarationList",new SCreator(VectorArgumentDeclarationList_factory));
new Sfactory(this,"States",new SCreator(States_factory));
new Sfactory(this,"VoidArgStateEvent",new SCreator(VoidArgStateEvent_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object VectorArgStateEvent_factory(Parser yyp) { return new VectorArgStateEvent(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object EmptyStatement_factory(Parser yyp) { return new EmptyStatement(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object VectorDeclaration_1_factory(Parser yyp) { return new VectorDeclaration_1(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object VectorArgEvent_factory(Parser yyp) { return new VectorArgEvent(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object VoidArgStateEvent_1_factory(Parser yyp) { return new VoidArgStateEvent_1(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object KeyArgEvent_1_factory(Parser yyp) { return new KeyArgEvent_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object IntArgStateEvent_1_factory(Parser yyp) { return new IntArgStateEvent_1(yyp); }
public static object IntArgEvent_6_factory(Parser yyp) { return new IntArgEvent_6(yyp); }
public static object IntArgEvent_9_factory(Parser yyp) { return new IntArgEvent_9(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object StateBody_10_factory(Parser yyp) { return new StateBody_10(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object VoidArgEvent_4_factory(Parser yyp) { return new VoidArgEvent_4(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object VoidArgEvent_2_factory(Parser yyp) { return new VoidArgEvent_2(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object IntArgumentDeclarationList_1_factory(Parser yyp) { return new IntArgumentDeclarationList_1(yyp); }
public static object IntDeclaration_1_factory(Parser yyp) { return new IntDeclaration_1(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object VectorArgumentDeclarationList_1_factory(Parser yyp) { return new VectorArgumentDeclarationList_1(yyp); }
public static object KeyArgumentDeclarationList_factory(Parser yyp) { return new KeyArgumentDeclarationList(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object KeyArgStateEvent_factory(Parser yyp) { return new KeyArgStateEvent(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object IntArgEvent_5_factory(Parser yyp) { return new IntArgEvent_5(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object KeyArgEvent_factory(Parser yyp) { return new KeyArgEvent(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object KeyArgStateEvent_1_factory(Parser yyp) { return new KeyArgStateEvent_1(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object KeyDeclaration_factory(Parser yyp) { return new KeyDeclaration(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object IntArgEvent_10_factory(Parser yyp) { return new IntArgEvent_10(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object IntArgumentDeclarationList_factory(Parser yyp) { return new IntArgumentDeclarationList(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object IntArgEvent_3_factory(Parser yyp) { return new IntArgEvent_3(yyp); }
public static object IntArgEvent_4_factory(Parser yyp) { return new IntArgEvent_4(yyp); }
public static object KeyDeclaration_1_factory(Parser yyp) { return new KeyDeclaration_1(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object IntArgEvent_7_factory(Parser yyp) { return new IntArgEvent_7(yyp); }
public static object IntArgEvent_8_factory(Parser yyp) { return new IntArgEvent_8(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object VectorArgEvent_2_factory(Parser yyp) { return new VectorArgEvent_2(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object VectorArgStateEvent_1_factory(Parser yyp) { return new VectorArgStateEvent_1(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object StateBody_3_factory(Parser yyp) { return new StateBody_3(yyp); }
public static object StateBody_4_factory(Parser yyp) { return new StateBody_4(yyp); }
public static object StateBody_5_factory(Parser yyp) { return new StateBody_5(yyp); }
public static object StateBody_6_factory(Parser yyp) { return new StateBody_6(yyp); }
public static object StateBody_7_factory(Parser yyp) { return new StateBody_7(yyp); }
public static object StateBody_8_factory(Parser yyp) { return new StateBody_8(yyp); }
public static object StateBody_9_factory(Parser yyp) { return new StateBody_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object IntArgEvent_factory(Parser yyp) { return new IntArgEvent(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object VectorDeclaration_factory(Parser yyp) { return new VectorDeclaration(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object VoidArgEvent_6_factory(Parser yyp) { return new VoidArgEvent_6(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object VoidArgEvent_1_factory(Parser yyp) { return new VoidArgEvent_1(yyp); }
public static object VoidArgEvent_3_factory(Parser yyp) { return new VoidArgEvent_3(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object VoidArgEvent_5_factory(Parser yyp) { return new VoidArgEvent_5(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object VoidArgEvent_7_factory(Parser yyp) { return new VoidArgEvent_7(yyp); }
public static object VoidArgEvent_8_factory(Parser yyp) { return new VoidArgEvent_8(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object VectorArgEvent_1_factory(Parser yyp) { return new VectorArgEvent_1(yyp); }
public static object IntDeclaration_factory(Parser yyp) { return new IntDeclaration(yyp); }
public static object VectorArgEvent_3_factory(Parser yyp) { return new VectorArgEvent_3(yyp); }
public static object IntArgStateEvent_factory(Parser yyp) { return new IntArgStateEvent(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object KeyArgEvent_2_factory(Parser yyp) { return new KeyArgEvent_2(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object EmptyStatement_1_factory(Parser yyp) { return new EmptyStatement_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object ForLoop_2_factory(Parser yyp) { return new ForLoop_2(yyp); }
public static object KeyArgumentDeclarationList_1_factory(Parser yyp) { return new KeyArgumentDeclarationList_1(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object IntArgEvent_1_factory(Parser yyp) { return new IntArgEvent_1(yyp); }
public static object IntArgEvent_2_factory(Parser yyp) { return new IntArgEvent_2(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object VoidArgEvent_factory(Parser yyp) { return new VoidArgEvent(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object VectorArgumentDeclarationList_factory(Parser yyp) { return new VectorArgumentDeclarationList(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
public static object VoidArgStateEvent_factory(Parser yyp) { return new VoidArgStateEvent(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
