using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+96
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 96; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+97
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 97; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+98
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 98; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+99
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 99; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+100
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 100; }}
public States(Parser yyp):base(yyp){}}
//%+State+101
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 101; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+102
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 102; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+103
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< adl . kids . Count ) kids . Add ( adl );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 103; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+VoidArgStateEvent+104
public class VoidArgStateEvent : StateEvent{
 public  VoidArgStateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , cs ){}

public override string yyname { get { return "VoidArgStateEvent"; }}
public override int yynum { get { return 104; }}
public VoidArgStateEvent(Parser yyp):base(yyp){}}
//%+KeyArgStateEvent+105
public class KeyArgStateEvent : StateEvent{
 public  KeyArgStateEvent (Parser yyp, string  name , KeyArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "KeyArgStateEvent"; }}
public override int yynum { get { return 105; }}
public KeyArgStateEvent(Parser yyp):base(yyp){}}
//%+IntArgStateEvent+106
public class IntArgStateEvent : StateEvent{
 public  IntArgStateEvent (Parser yyp, string  name , IntArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntArgStateEvent"; }}
public override int yynum { get { return 106; }}
public IntArgStateEvent(Parser yyp):base(yyp){}}
//%+VectorArgStateEvent+107
public class VectorArgStateEvent : StateEvent{
 public  VectorArgStateEvent (Parser yyp, string  name , VectorArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "VectorArgStateEvent"; }}
public override int yynum { get { return 107; }}
public VectorArgStateEvent(Parser yyp):base(yyp){}}
//%+IntRotRotArgStateEvent+108
public class IntRotRotArgStateEvent : StateEvent{
 public  IntRotRotArgStateEvent (Parser yyp, string  name , IntRotRotArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp), name , adl , cs ){}

public override string yyname { get { return "IntRotRotArgStateEvent"; }}
public override int yynum { get { return 108; }}
public IntRotRotArgStateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+109
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, Declaration  d , Declaration  d2 ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
 kids . Add ( d2 );
}
 public  ArgumentDeclarationList (Parser yyp, Declaration  d , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
 kids . Add ( d2 );
 kids . Add ( d3 );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 109; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+KeyArgumentDeclarationList+110
public class KeyArgumentDeclarationList : ArgumentDeclarationList{
 public  KeyArgumentDeclarationList (Parser yyp, KeyDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "KeyArgumentDeclarationList"; }}
public override int yynum { get { return 110; }}
public KeyArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntArgumentDeclarationList+111
public class IntArgumentDeclarationList : ArgumentDeclarationList{
 public  IntArgumentDeclarationList (Parser yyp, IntDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "IntArgumentDeclarationList"; }}
public override int yynum { get { return 111; }}
public IntArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+VectorArgumentDeclarationList+112
public class VectorArgumentDeclarationList : ArgumentDeclarationList{
 public  VectorArgumentDeclarationList (Parser yyp, VectorDeclaration  d ):base(((LSLSyntax
)yyp), d ){}

public override string yyname { get { return "VectorArgumentDeclarationList"; }}
public override int yynum { get { return 112; }}
public VectorArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+IntRotRotArgumentDeclarationList+113
public class IntRotRotArgumentDeclarationList : ArgumentDeclarationList{
 public  IntRotRotArgumentDeclarationList (Parser yyp, Declaration  d1 , Declaration  d2 , Declaration  d3 ):base(((LSLSyntax
)yyp), d1 , d2 , d3 ){}

public override string yyname { get { return "IntRotRotArgumentDeclarationList"; }}
public override int yynum { get { return 113; }}
public IntRotRotArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+114
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 114; }}
public Declaration(Parser yyp):base(yyp){}}
//%+KeyDeclaration+115
public class KeyDeclaration : Declaration{
 public  KeyDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "KeyDeclaration"; }}
public override int yynum { get { return 115; }}
public KeyDeclaration(Parser yyp):base(yyp){}}
//%+IntDeclaration+116
public class IntDeclaration : Declaration{
 public  IntDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "IntDeclaration"; }}
public override int yynum { get { return 116; }}
public IntDeclaration(Parser yyp):base(yyp){}}
//%+VectorDeclaration+117
public class VectorDeclaration : Declaration{
 public  VectorDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "VectorDeclaration"; }}
public override int yynum { get { return 117; }}
public VectorDeclaration(Parser yyp):base(yyp){}}
//%+RotDeclaration+118
public class RotDeclaration : Declaration{
 public  RotDeclaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp), type , id ){}

public override string yyname { get { return "RotDeclaration"; }}
public override int yynum { get { return 118; }}
public RotDeclaration(Parser yyp):base(yyp){}}
//%+Typename+119
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 119; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+120
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 120; }}
public Event(Parser yyp):base(yyp){}}
//%+VoidArgEvent+121
public class VoidArgEvent : Event{
 public  VoidArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VoidArgEvent"; }}
public override int yynum { get { return 121; }}
public VoidArgEvent(Parser yyp):base(yyp){}}
//%+KeyArgEvent+122
public class KeyArgEvent : Event{
 public  KeyArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "KeyArgEvent"; }}
public override int yynum { get { return 122; }}
public KeyArgEvent(Parser yyp):base(yyp){}}
//%+IntArgEvent+123
public class IntArgEvent : Event{
 public  IntArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntArgEvent"; }}
public override int yynum { get { return 123; }}
public IntArgEvent(Parser yyp):base(yyp){}}
//%+VectorArgEvent+124
public class VectorArgEvent : Event{
 public  VectorArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "VectorArgEvent"; }}
public override int yynum { get { return 124; }}
public VectorArgEvent(Parser yyp):base(yyp){}}
//%+IntRotRotArgEvent+125
public class IntRotRotArgEvent : Event{
 public  IntRotRotArgEvent (Parser yyp, string  text ):base(((LSLSyntax
)yyp), text ){}

public override string yyname { get { return "IntRotRotArgEvent"; }}
public override int yynum { get { return 125; }}
public IntRotRotArgEvent(Parser yyp):base(yyp){}}
//%+CompoundStatement+126
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 126; }}
}
//%+StatementList+127
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 127; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+128
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}
 public  Statement (Parser yyp, EmptyStatement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( es );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 128; }}
public Statement(Parser yyp):base(yyp){}}
//%+EmptyStatement+129
public class EmptyStatement : SYMBOL{
 public  EmptyStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  override  string  ToString (){ return  base . ToString ();
}

public override string yyname { get { return "EmptyStatement"; }}
public override int yynum { get { return 129; }}
}
//%+Assignment+130
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 130; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+131
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 131; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+132
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 132; }}
}
//%+JumpLabel+133
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 133; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+134
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 134; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+135
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 135; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+136
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 136; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+137
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 137; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+138
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 138; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+139
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 139; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+140
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 140; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+141
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 141; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+142
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 142; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+143
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 143; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+144
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 144; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+145
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 145; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+146
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 146; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+147
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 147; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+148
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 148; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+149
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 149; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+150
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 150; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+151
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 151; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+152
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 152; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+153
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 153; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+154
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 154; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+155
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 155; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+156
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 156; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+157
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 157; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+158
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 158; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_3 : StateBody {
  public StateBody_3(Parser yyq):base(yyq,
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_4 : StateBody {
  public StateBody_4(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VoidArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_5 : StateBody {
  public StateBody_5(Parser yyq):base(yyq,
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_6 : StateBody {
  public StateBody_6(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((KeyArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_7 : StateBody {
  public StateBody_7(Parser yyq):base(yyq,
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_8 : StateBody {
  public StateBody_8(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_9 : StateBody {
  public StateBody_9(Parser yyq):base(yyq,
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_10 : StateBody {
  public StateBody_10(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((VectorArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_11 : StateBody {
  public StateBody_11(Parser yyq):base(yyq,
	((IntRotRotArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_12 : StateBody {
  public StateBody_12(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((IntRotRotArgStateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VoidArgStateEvent_1 : VoidArgStateEvent {
  public VoidArgStateEvent_1(Parser yyq):base(yyq,
	((VoidArgEvent)(yyq.StackAt(3).m_value))
	.yytext, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgStateEvent_1 : KeyArgStateEvent {
  public KeyArgStateEvent_1(Parser yyq):base(yyq,
	((KeyArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((KeyArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntArgStateEvent_1 : IntArgStateEvent {
  public IntArgStateEvent_1(Parser yyq):base(yyq,
	((IntArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgStateEvent_1 : VectorArgStateEvent {
  public VectorArgStateEvent_1(Parser yyq):base(yyq,
	((VectorArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((VectorArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class IntRotRotArgStateEvent_1 : IntRotRotArgStateEvent {
  public IntRotRotArgStateEvent_1(Parser yyq):base(yyq,
	((IntRotRotArgEvent)(yyq.StackAt(4).m_value))
	.yytext, 
	((IntRotRotArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class KeyArgumentDeclarationList_1 : KeyArgumentDeclarationList {
  public KeyArgumentDeclarationList_1(Parser yyq):base(yyq,
	((KeyDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntArgumentDeclarationList_1 : IntArgumentDeclarationList {
  public IntArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class VectorArgumentDeclarationList_1 : VectorArgumentDeclarationList {
  public VectorArgumentDeclarationList_1(Parser yyq):base(yyq,
	((VectorDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class IntRotRotArgumentDeclarationList_1 : IntRotRotArgumentDeclarationList {
  public IntRotRotArgumentDeclarationList_1(Parser yyq):base(yyq,
	((IntDeclaration)(yyq.StackAt(4).m_value))
	, 
	((RotDeclaration)(yyq.StackAt(2).m_value))
	, 
	((RotDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyDeclaration_1 : KeyDeclaration {
  public KeyDeclaration_1(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntDeclaration_1 : IntDeclaration {
  public IntDeclaration_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorDeclaration_1 : VectorDeclaration {
  public VectorDeclaration_1(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class RotDeclaration_1 : RotDeclaration {
  public RotDeclaration_1(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class EmptyStatement_1 : EmptyStatement {
  public EmptyStatement_1(Parser yyq):base(yyq){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((EmptyStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoop_2 : ForLoop {
  public ForLoop_2(Parser yyq):base(yyq,null, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((HTTP_REQUEST_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_1 : VoidArgEvent {
  public VoidArgEvent_1(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_2 : VoidArgEvent {
  public VoidArgEvent_2(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_3 : VoidArgEvent {
  public VoidArgEvent_3(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_4 : VoidArgEvent {
  public VoidArgEvent_4(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_5 : VoidArgEvent {
  public VoidArgEvent_5(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_6 : VoidArgEvent {
  public VoidArgEvent_6(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_7 : VoidArgEvent {
  public VoidArgEvent_7(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VoidArgEvent_8 : VoidArgEvent {
  public VoidArgEvent_8(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_1 : KeyArgEvent {
  public KeyArgEvent_1(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class KeyArgEvent_2 : KeyArgEvent {
  public KeyArgEvent_2(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_1 : IntArgEvent {
  public IntArgEvent_1(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_2 : IntArgEvent {
  public IntArgEvent_2(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_3 : IntArgEvent {
  public IntArgEvent_3(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_4 : IntArgEvent {
  public IntArgEvent_4(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_5 : IntArgEvent {
  public IntArgEvent_5(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_6 : IntArgEvent {
  public IntArgEvent_6(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_7 : IntArgEvent {
  public IntArgEvent_7(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_8 : IntArgEvent {
  public IntArgEvent_8(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_9 : IntArgEvent {
  public IntArgEvent_9(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntArgEvent_10 : IntArgEvent {
  public IntArgEvent_10(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_1 : VectorArgEvent {
  public VectorArgEvent_1(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_2 : VectorArgEvent {
  public VectorArgEvent_2(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class VectorArgEvent_3 : VectorArgEvent {
  public VectorArgEvent_3(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IntRotRotArgEvent_1 : IntRotRotArgEvent {
  public IntRotRotArgEvent_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,96,1,
2,104,18,1,2799,
102,2,0,105,5,
370,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
119,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,92,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
2796,137,18,1,2796,
138,20,139,4,50,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,98,1,2,2,
0,1,2797,140,18,
1,2797,141,20,142,
4,48,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,99,1,2,2,
0,1,2798,143,18,
1,2798,138,2,0,
1,2799,104,1,2800,
144,18,1,2800,145,
23,146,4,6,69,
0,79,0,70,0,
1,2,1,6,2,
0,1,18,147,18,
1,18,129,2,0,
1,19,148,18,1,
19,132,2,0,1,
20,149,18,1,20,
150,20,151,4,46,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,109,1,2,
2,0,1,21,152,
18,1,21,153,20,
154,4,10,67,0,
79,0,77,0,77,
0,65,0,1,14,
1,1,2,0,1,
1694,155,18,1,1694,
156,20,157,4,32,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,140,1,
2,2,0,1,1695,
158,18,1,1695,153,
2,0,1,30,159,
18,1,30,160,20,
161,4,22,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,114,1,2,2,
0,1,31,162,18,
1,31,163,20,164,
4,22,82,0,73,
0,71,0,72,0,
84,0,95,0,80,
0,65,0,82,0,
69,0,78,0,1,
17,1,1,2,0,
1,32,165,18,1,
32,166,20,167,4,
20,76,0,69,0,
70,0,84,0,95,
0,66,0,82,0,
65,0,67,0,69,
0,1,12,1,1,
2,0,1,1114,168,
18,1,1114,132,2,
0,1,2735,169,18,
1,2735,163,2,0,
1,1152,170,18,1,
1152,171,20,172,4,
32,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,131,
1,2,2,0,1,
1117,173,18,1,1117,
174,20,175,4,28,
80,0,69,0,82,
0,67,0,69,0,
78,0,84,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,10,
1,1,2,0,1,
40,176,18,1,40,
132,2,0,1,41,
177,18,1,41,135,
2,0,1,42,178,
18,1,42,179,20,
180,4,20,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,149,
1,2,2,0,1,
43,181,18,1,43,
182,20,183,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,41,1,
1,2,0,1,44,
184,18,1,44,132,
2,0,1,1159,185,
18,1,1159,179,2,
0,1,46,186,18,
1,46,187,20,188,
4,12,80,0,69,
0,82,0,73,0,
79,0,68,0,1,
24,1,1,2,0,
1,47,189,18,1,
47,132,2,0,1,
48,190,18,1,48,
191,20,192,4,18,
68,0,69,0,67,
0,82,0,69,0,
77,0,69,0,78,
0,84,0,1,5,
1,1,2,0,1,
49,193,18,1,49,
194,20,195,4,18,
73,0,78,0,67,
0,82,0,69,0,
77,0,69,0,78,
0,84,0,1,4,
1,1,2,0,1,
50,196,18,1,50,
191,2,0,1,51,
197,18,1,51,194,
2,0,1,52,198,
18,1,52,135,2,
0,1,2281,199,18,
1,2281,171,2,0,
1,1730,200,18,1,
1730,171,2,0,1,
1731,201,18,1,1731,
202,20,203,4,18,
83,0,69,0,77,
0,73,0,67,0,
79,0,76,0,79,
0,78,0,1,11,
1,1,2,0,1,
61,204,18,1,61,
129,2,0,1,62,
205,18,1,62,163,
2,0,1,63,206,
18,1,63,132,2,
0,1,65,207,18,
1,65,187,2,0,
1,66,208,18,1,
66,132,2,0,1,
67,209,18,1,67,
191,2,0,1,68,
210,18,1,68,194,
2,0,1,69,211,
18,1,69,191,2,
0,1,70,212,18,
1,70,194,2,0,
1,71,213,18,1,
71,135,2,0,1,
73,214,18,1,73,
179,2,0,1,74,
215,18,1,74,163,
2,0,1,1189,216,
18,1,1189,217,20,
218,4,22,83,0,
84,0,65,0,82,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,8,1,1,2,
0,1,76,219,18,
1,76,220,20,221,
4,20,76,0,69,
0,70,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,40,1,
1,2,0,1,1153,
222,18,1,1153,223,
20,224,4,24,83,
0,76,0,65,0,
83,0,72,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,9,
1,1,2,0,1,
79,225,18,1,79,
226,20,227,4,10,
84,0,73,0,76,
0,68,0,69,0,
1,36,1,1,2,
0,1,1195,228,18,
1,1195,179,2,0,
1,82,229,18,1,
82,179,2,0,1,
1123,230,18,1,1123,
179,2,0,1,85,
231,18,1,85,232,
20,233,4,26,83,
0,84,0,82,0,
79,0,75,0,69,
0,95,0,83,0,
84,0,82,0,79,
0,75,0,69,0,
1,39,1,1,2,
0,1,2547,234,18,
1,2547,235,20,236,
4,24,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,121,1,2,
2,0,1,89,237,
18,1,89,238,20,
239,4,10,77,0,
73,0,78,0,85,
0,83,0,1,19,
1,1,2,0,1,
2318,240,18,1,2318,
202,2,0,1,2788,
241,18,1,2788,242,
20,243,4,12,83,
0,116,0,97,0,
116,0,101,0,115,
0,1,100,1,2,
2,0,1,93,244,
18,1,93,179,2,
0,1,97,245,18,
1,97,246,20,247,
4,14,65,0,77,
0,80,0,95,0,
65,0,77,0,80,
0,1,38,1,1,
2,0,1,2795,248,
18,1,2795,141,2,
0,1,102,249,18,
1,102,250,20,251,
4,22,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,1,
37,1,1,2,0,
1,1775,252,18,1,
1775,163,2,0,1,
107,253,18,1,107,
179,2,0,1,2337,
254,18,1,2337,163,
2,0,1,1224,255,
18,1,1224,171,2,
0,1,1225,256,18,
1,1225,257,20,258,
4,24,77,0,73,
0,78,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,7,1,1,
2,0,1,112,259,
18,1,112,260,20,
261,4,28,71,0,
82,0,69,0,65,
0,84,0,69,0,
82,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,32,1,1,
2,0,1,1188,262,
18,1,1188,171,2,
0,1,1231,263,18,
1,1231,179,2,0,
1,118,264,18,1,
118,179,2,0,1,
1737,265,18,1,1737,
179,2,0,1,124,
266,18,1,124,267,
20,268,4,22,76,
0,69,0,83,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,31,1,1,
2,0,1,2737,269,
18,1,2737,270,20,
271,4,34,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,126,1,
2,2,0,1,130,
272,18,1,130,179,
2,0,1,1803,273,
18,1,1803,274,20,
275,4,18,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,128,1,2,
2,0,1,1804,276,
18,1,1804,277,20,
278,4,4,68,0,
79,0,1,44,1,
1,2,0,1,2364,
279,18,1,2364,274,
2,0,1,137,280,
18,1,137,281,20,
282,4,36,69,0,
88,0,67,0,76,
0,65,0,77,0,
65,0,84,0,73,
0,79,0,78,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
30,1,1,2,0,
1,2293,283,18,1,
2293,202,2,0,1,
1701,284,18,1,1701,
179,2,0,1,1756,
285,18,1,1756,202,
2,0,1,2527,286,
18,1,2527,163,2,
0,1,143,287,18,
1,143,179,2,0,
1,2299,288,18,1,
2299,179,2,0,1,
1260,289,18,1,1260,
171,2,0,1,1261,
290,18,1,1261,291,
20,292,4,22,80,
0,76,0,85,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,6,1,1,
2,0,1,151,293,
18,1,151,294,20,
295,4,26,69,0,
81,0,85,0,65,
0,76,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
29,1,1,2,0,
1,1267,296,18,1,
1267,179,2,0,1,
2765,297,18,1,2765,
202,2,0,1,157,
298,18,1,157,179,
2,0,1,1773,299,
18,1,1773,156,2,
0,1,1832,300,18,
1,1832,274,2,0,
1,1833,301,18,1,
1833,302,20,303,4,
10,87,0,72,0,
73,0,76,0,69,
0,1,45,1,1,
2,0,1,1834,304,
18,1,1834,135,2,
0,1,166,305,18,
1,166,306,20,307,
4,20,76,0,69,
0,70,0,84,0,
95,0,65,0,78,
0,71,0,76,0,
69,0,1,25,1,
1,2,0,1,1840,
308,18,1,1840,179,
2,0,1,172,309,
18,1,172,179,2,
0,1,2335,310,18,
1,2335,156,2,0,
1,1296,311,18,1,
1296,171,2,0,1,
1297,312,18,1,1297,
313,20,314,4,12,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,15,1,
1,2,0,1,2413,
315,18,1,2413,316,
20,317,4,26,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,127,1,2,2,
0,1,1859,318,18,
1,1859,163,2,0,
1,1860,319,18,1,
1860,202,2,0,1,
188,320,18,1,188,
179,2,0,1,182,
321,18,1,182,322,
20,323,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,65,0,78,0,
71,0,76,0,69,
0,1,26,1,1,
2,0,1,199,324,
18,1,199,325,20,
326,4,10,67,0,
65,0,82,0,69,
0,84,0,1,35,
1,1,2,0,1,
1871,327,18,1,1871,
171,2,0,1,1872,
328,18,1,1872,163,
2,0,1,1873,329,
18,1,1873,202,2,
0,1,1875,330,18,
1,1875,302,2,0,
1,205,331,18,1,
205,179,2,0,1,
1882,332,18,1,1882,
179,2,0,1,2227,
333,18,1,2227,274,
2,0,1,217,334,
18,1,217,335,20,
336,4,12,83,0,
84,0,82,0,79,
0,75,0,69,0,
1,34,1,1,2,
0,1,1332,337,18,
1,1332,171,2,0,
1,1335,338,18,1,
1335,174,2,0,1,
223,339,18,1,223,
179,2,0,1,1341,
340,18,1,1341,179,
2,0,1,1901,341,
18,1,1901,163,2,
0,1,1303,342,18,
1,1303,179,2,0,
1,2462,343,18,1,
2462,274,2,0,1,
236,344,18,1,236,
345,20,346,4,6,
65,0,77,0,80,
0,1,33,1,1,
2,0,1,2466,347,
18,1,2466,270,2,
0,1,2467,348,18,
1,2467,160,2,0,
1,2468,349,18,1,
2468,350,20,351,4,
10,83,0,84,0,
65,0,84,0,69,
0,1,48,1,1,
2,0,1,2469,352,
18,1,2469,132,2,
0,1,242,353,18,
1,242,179,2,0,
1,2471,354,18,1,
2471,355,20,356,4,
38,65,0,84,0,
95,0,82,0,79,
0,84,0,95,0,
84,0,65,0,82,
0,71,0,69,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
58,1,1,2,0,
1,2472,357,18,1,
2472,358,20,359,4,
52,76,0,65,0,
78,0,68,0,95,
0,67,0,79,0,
76,0,76,0,73,
0,83,0,73,0,
79,0,78,0,95,
0,83,0,84,0,
65,0,82,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,71,
1,1,2,0,1,
2473,360,18,1,2473,
361,20,362,4,48,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,70,
1,1,2,0,1,
2474,363,18,1,2474,
364,20,365,4,40,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,69,1,1,2,
0,1,2475,366,18,
1,2475,367,20,368,
4,34,84,0,79,
0,85,0,67,0,
72,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,89,1,1,
2,0,1,2476,369,
18,1,2476,370,20,
371,4,30,84,0,
79,0,85,0,67,
0,72,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,90,
1,1,2,0,1,
2477,372,18,1,2477,
373,20,374,4,22,
84,0,79,0,85,
0,67,0,72,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,88,1,
1,2,0,1,2478,
375,18,1,2478,376,
20,377,4,24,83,
0,69,0,78,0,
83,0,79,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,84,
1,1,2,0,1,
2479,378,18,1,2479,
379,20,380,4,52,
82,0,85,0,78,
0,95,0,84,0,
73,0,77,0,69,
0,95,0,80,0,
69,0,82,0,77,
0,73,0,83,0,
83,0,73,0,79,
0,78,0,83,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,83,1,
1,2,0,1,2480,
381,18,1,2480,382,
20,383,4,24,79,
0,78,0,95,0,
82,0,69,0,90,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,81,
1,1,2,0,1,
2481,384,18,1,2481,
385,20,386,4,42,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,64,1,
1,2,0,1,2482,
387,18,1,2482,388,
20,389,4,38,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,63,1,
1,2,0,1,2483,
390,18,1,2483,391,
20,392,4,30,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
62,1,1,2,0,
1,256,393,18,1,
256,394,20,395,4,
14,80,0,69,0,
82,0,67,0,69,
0,78,0,84,0,
1,22,1,1,2,
0,1,1371,396,18,
1,1371,223,2,0,
1,2486,397,18,1,
2486,398,20,399,4,
24,65,0,84,0,
84,0,65,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,60,1,1,2,
0,1,2487,400,18,
1,2487,401,20,402,
4,22,84,0,73,
0,77,0,69,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
87,1,1,2,0,
1,1931,403,18,1,
1931,274,2,0,1,
1932,404,18,1,1932,
405,20,406,4,4,
73,0,70,0,1,
42,1,1,2,0,
1,262,407,18,1,
262,179,2,0,1,
1377,408,18,1,1377,
179,2,0,1,2492,
409,18,1,2492,410,
20,411,4,32,77,
0,79,0,86,0,
73,0,78,0,71,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,75,1,1,
2,0,1,1876,412,
18,1,1876,135,2,
0,1,2494,413,18,
1,2494,414,20,415,
4,34,83,0,84,
0,65,0,84,0,
69,0,95,0,69,
0,78,0,84,0,
82,0,89,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,85,1,1,
2,0,1,2495,416,
18,1,2495,417,20,
418,4,36,72,0,
84,0,84,0,80,
0,95,0,82,0,
69,0,81,0,85,
0,69,0,83,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
91,1,1,2,0,
1,1939,419,18,1,
1939,179,2,0,1,
2497,420,18,1,2497,
421,20,422,4,22,
77,0,79,0,78,
0,69,0,89,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,74,1,
1,2,0,1,827,
423,18,1,827,179,
2,0,1,2499,424,
18,1,2499,425,20,
426,4,36,76,0,
73,0,78,0,75,
0,95,0,77,0,
69,0,83,0,83,
0,65,0,71,0,
69,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
72,1,1,2,0,
1,2500,427,18,1,
2500,428,20,429,4,
38,72,0,84,0,
84,0,80,0,95,
0,82,0,69,0,
83,0,80,0,79,
0,78,0,83,0,
69,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
68,1,1,2,0,
1,2501,430,18,1,
2501,431,20,432,4,
22,69,0,77,0,
65,0,73,0,76,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,67,
1,1,2,0,1,
2502,433,18,1,2502,
434,20,435,4,32,
68,0,65,0,84,
0,65,0,83,0,
69,0,82,0,86,
0,69,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,66,1,
1,2,0,1,2503,
436,18,1,2503,437,
20,438,4,26,67,
0,79,0,78,0,
84,0,82,0,79,
0,76,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,65,1,1,2,
0,1,2504,439,18,
1,2504,440,20,441,
4,30,65,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,59,1,
1,2,0,1,277,
442,18,1,277,443,
20,444,4,10,83,
0,76,0,65,0,
83,0,72,0,1,
21,1,1,2,0,
1,2506,445,18,1,
2506,135,2,0,1,
2507,446,18,1,2507,
126,2,0,1,2508,
447,18,1,2508,132,
2,0,1,2509,448,
18,1,2509,449,20,
450,4,28,73,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,116,1,2,
2,0,1,2510,451,
18,1,2510,153,2,
0,1,283,452,18,
1,283,179,2,0,
1,2512,453,18,1,
2512,132,2,0,1,
2513,454,18,1,2513,
455,20,456,4,28,
82,0,111,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,118,
1,2,2,0,1,
2514,457,18,1,2514,
153,2,0,1,1958,
458,18,1,1958,163,
2,0,1,2516,459,
18,1,2516,455,2,
0,1,2517,460,18,
1,2517,461,20,462,
4,64,73,0,110,
0,116,0,82,0,
111,0,116,0,82,
0,111,0,116,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,113,1,2,
2,0,1,2518,463,
18,1,2518,163,2,
0,1,1406,464,18,
1,1406,171,2,0,
1,1407,465,18,1,
1407,217,2,0,1,
2522,466,18,1,2522,
135,2,0,1,2523,
467,18,1,2523,114,
2,0,1,2524,468,
18,1,2524,132,2,
0,1,2525,469,18,
1,2525,470,20,471,
4,34,86,0,101,
0,99,0,116,0,
111,0,114,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,117,1,2,
2,0,1,2526,472,
18,1,2526,473,20,
474,4,58,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,112,1,2,
2,0,1,299,475,
18,1,299,476,20,
477,4,8,83,0,
84,0,65,0,82,
0,1,20,1,1,
2,0,1,1370,478,
18,1,1370,171,2,
0,1,2529,479,18,
1,2529,270,2,0,
1,2530,480,18,1,
2530,481,20,482,4,
22,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,1,123,
1,2,2,0,1,
2531,483,18,1,2531,
135,2,0,1,305,
484,18,1,305,179,
2,0,1,2534,485,
18,1,2534,486,20,
487,4,52,73,0,
110,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,111,1,2,2,
0,1,2535,488,18,
1,2535,163,2,0,
1,2458,489,18,1,
2458,274,2,0,1,
2459,490,18,1,2459,
491,20,492,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,13,1,
1,2,0,1,2538,
493,18,1,2538,494,
20,495,4,22,75,
0,101,0,121,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,1,122,1,2,
2,0,1,2539,496,
18,1,2539,135,2,
0,1,2540,497,18,
1,2540,117,2,0,
1,2541,498,18,1,
2541,132,2,0,1,
2542,499,18,1,2542,
500,20,501,4,28,
75,0,101,0,121,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,115,
1,2,2,0,1,
2464,502,18,1,2464,
491,2,0,1,2544,
503,18,1,2544,163,
2,0,1,1989,504,
18,1,1989,274,2,
0,1,1990,505,18,
1,1990,506,20,507,
4,8,69,0,76,
0,83,0,69,0,
1,43,1,1,2,
0,1,2548,508,18,
1,2548,135,2,0,
1,2470,509,18,1,
2470,166,2,0,1,
322,510,18,1,322,
238,2,0,1,2551,
511,18,1,2551,270,
2,0,1,1933,512,
18,1,1933,135,2,
0,1,2553,513,18,
1,2553,135,2,0,
1,883,514,18,1,
883,179,2,0,1,
328,515,18,1,328,
179,2,0,1,1443,
516,18,1,1443,257,
2,0,1,2562,517,
18,1,2562,150,2,
0,1,1449,518,18,
1,1449,179,2,0,
1,2485,519,18,1,
2485,520,20,521,4,
32,79,0,66,0,
74,0,69,0,67,
0,84,0,95,0,
82,0,69,0,90,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,80,
1,1,2,0,1,
2566,522,18,1,2566,
270,2,0,1,2488,
523,18,1,2488,524,
20,525,4,38,78,
0,79,0,84,0,
95,0,65,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,79,1,
1,2,0,1,2489,
526,18,1,2489,527,
20,528,4,46,78,
0,79,0,84,0,
95,0,65,0,84,
0,95,0,82,0,
79,0,84,0,95,
0,84,0,65,0,
82,0,71,0,69,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,78,1,1,2,
0,1,2490,529,18,
1,2490,530,20,531,
4,30,78,0,79,
0,95,0,83,0,
69,0,78,0,83,
0,79,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,77,1,
1,2,0,1,2491,
532,18,1,2491,533,
20,534,4,36,77,
0,79,0,86,0,
73,0,78,0,71,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,76,1,1,2,
0,1,2493,535,18,
1,2493,536,20,537,
4,32,83,0,84,
0,65,0,84,0,
69,0,95,0,69,
0,88,0,73,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
86,1,1,2,0,
1,1413,538,18,1,
1413,179,2,0,1,
346,539,18,1,346,
540,20,541,4,8,
80,0,76,0,85,
0,83,0,1,18,
1,1,2,0,1,
2496,542,18,1,2496,
543,20,544,4,34,
82,0,69,0,77,
0,79,0,84,0,
69,0,95,0,68,
0,65,0,84,0,
65,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
82,1,1,2,0,
1,2021,545,18,1,
2021,274,2,0,1,
2022,546,18,1,2022,
350,2,0,1,352,
547,18,1,352,179,
2,0,1,2024,548,
18,1,2024,132,2,
0,1,2025,549,18,
1,2025,550,20,551,
4,8,74,0,85,
0,77,0,80,0,
1,49,1,1,2,
0,1,2026,552,18,
1,2026,132,2,0,
1,2027,553,18,1,
2027,554,20,555,4,
4,65,0,84,0,
1,23,1,1,2,
0,1,2028,556,18,
1,2028,132,2,0,
1,2029,557,18,1,
2029,270,2,0,1,
2030,558,18,1,2030,
559,20,560,4,14,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
139,1,2,2,0,
1,2031,561,18,1,
2031,562,20,563,4,
32,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,138,
1,2,2,0,1,
2032,564,18,1,2032,
565,20,566,4,28,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,137,
1,2,2,0,1,
2033,567,18,1,2033,
568,20,569,4,22,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,136,1,
2,2,0,1,2034,
570,18,1,2034,571,
20,572,4,22,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,1,135,1,2,
2,0,1,1478,573,
18,1,1478,171,2,
0,1,1479,574,18,
1,1479,291,2,0,
1,2037,575,18,1,
2037,202,2,0,1,
2038,576,18,1,2038,
577,20,578,4,18,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,1,133,
1,2,2,0,1,
2039,579,18,1,2039,
202,2,0,1,2040,
580,18,1,2040,581,
20,582,4,30,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
132,1,2,2,0,
1,2041,583,18,1,
2041,202,2,0,1,
1485,584,18,1,1485,
179,2,0,1,372,
585,18,1,372,191,
2,0,1,373,586,
18,1,373,132,2,
0,1,374,587,18,
1,374,187,2,0,
1,375,588,18,1,
375,132,2,0,1,
376,589,18,1,376,
194,2,0,1,377,
590,18,1,377,132,
2,0,1,378,591,
18,1,378,187,2,
0,1,379,592,18,
1,379,132,2,0,
1,380,593,18,1,
380,594,20,595,4,
16,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,145,1,
2,2,0,1,381,
596,18,1,381,306,
2,0,1,2610,597,
18,1,2610,598,20,
599,4,38,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,107,1,2,
2,0,1,2611,600,
18,1,2611,601,20,
602,4,32,73,0,
110,0,116,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,106,1,2,2,
0,1,371,603,18,
1,371,604,20,605,
4,24,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,1,141,1,2,
2,0,1,942,606,
18,1,942,179,2,
0,1,2533,607,18,
1,2533,449,2,0,
1,387,608,18,1,
387,179,2,0,1,
2616,609,18,1,2616,
610,20,611,4,44,
73,0,110,0,116,
0,82,0,111,0,
116,0,82,0,111,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
108,1,2,2,0,
1,2617,612,18,1,
2617,598,2,0,1,
2537,613,18,1,2537,
270,2,0,1,2619,
614,18,1,2619,615,
20,616,4,32,75,
0,101,0,121,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,105,1,2,
2,0,1,2620,617,
18,1,2620,618,20,
619,4,34,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,104,1,
2,2,0,1,2621,
620,18,1,2621,621,
20,622,4,20,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
103,1,2,2,0,
1,2622,623,18,1,
2622,624,20,625,4,
26,68,0,69,0,
70,0,65,0,85,
0,76,0,84,0,
95,0,83,0,84,
0,65,0,84,0,
69,0,1,47,1,
1,2,0,1,2623,
626,18,1,2623,166,
2,0,1,2543,627,
18,1,2543,628,20,
629,4,52,75,0,
101,0,121,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,110,1,2,2,
0,1,2546,630,18,
1,2546,270,2,0,
1,1514,631,18,1,
1514,171,2,0,1,
1515,632,18,1,1515,
313,2,0,1,2549,
633,18,1,2549,163,
2,0,1,2074,634,
18,1,2074,171,2,
0,1,2075,635,18,
1,2075,163,2,0,
1,2552,636,18,1,
2552,637,20,638,4,
10,69,0,118,0,
101,0,110,0,116,
0,1,120,1,2,
2,0,1,406,639,
18,1,406,153,2,
0,1,1521,640,18,
1,1521,179,2,0,
1,412,641,18,1,
412,179,2,0,1,
2484,642,18,1,2484,
643,20,644,4,26,
67,0,72,0,65,
0,78,0,71,0,
69,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,61,1,1,
2,0,1,2023,645,
18,1,2023,624,2,
0,1,2564,646,18,
1,2564,163,2,0,
1,1442,647,18,1,
1442,171,2,0,1,
2035,648,18,1,2035,
202,2,0,1,2036,
649,18,1,2036,650,
20,651,4,26,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,134,1,2,2,
0,1,431,652,18,
1,431,153,2,0,
1,2105,653,18,1,
2105,274,2,0,1,
2106,654,18,1,2106,
506,2,0,1,1550,
655,18,1,1550,171,
2,0,1,437,656,
18,1,437,179,2,
0,1,2044,657,18,
1,2044,658,20,659,
4,28,69,0,109,
0,112,0,116,0,
121,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,129,1,2,2,
0,1,2045,660,18,
1,2045,202,2,0,
1,1555,661,18,1,
1555,179,2,0,1,
2511,662,18,1,2511,
111,2,0,1,1001,
663,18,1,1001,604,
2,0,1,1002,664,
18,1,1002,594,2,
0,1,447,665,18,
1,447,322,2,0,
1,2520,666,18,1,
2520,270,2,0,1,
1010,667,18,1,1010,
171,2,0,1,1011,
668,18,1,1011,163,
2,0,1,1012,669,
18,1,1012,179,2,
0,1,1013,670,18,
1,1013,163,2,0,
1,459,671,18,1,
459,672,20,673,4,
24,76,0,69,0,
70,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,27,1,1,2,
0,1,1574,674,18,
1,1574,202,2,0,
1,461,675,18,1,
461,676,20,677,4,
24,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,142,1,2,2,
0,1,462,678,18,
1,462,153,2,0,
1,464,679,18,1,
464,680,20,681,4,
16,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,1,143,1,
2,2,0,1,2136,
682,18,1,2136,274,
2,0,1,2612,683,
18,1,2612,615,2,
0,1,2613,684,18,
1,2613,618,2,0,
1,2614,685,18,1,
2614,621,2,0,1,
2615,686,18,1,2615,
491,2,0,1,1585,
687,18,1,1585,688,
20,689,4,12,82,
0,69,0,84,0,
85,0,82,0,78,
0,1,50,1,1,
2,0,1,2618,690,
18,1,2618,601,2,
0,1,476,691,18,
1,476,692,20,693,
4,30,83,0,84,
0,82,0,73,0,
78,0,71,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,3,1,
1,2,0,1,477,
694,18,1,477,695,
20,696,4,28,70,
0,76,0,79,0,
65,0,84,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,95,1,
1,2,0,1,478,
697,18,1,478,698,
20,699,4,40,72,
0,69,0,88,0,
95,0,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,67,0,
79,0,78,0,83,
0,84,0,65,0,
78,0,84,0,1,
94,1,1,2,0,
1,479,700,18,1,
479,701,20,702,4,
32,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,93,
1,1,2,0,1,
480,703,18,1,480,
704,20,705,4,26,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
75,0,69,0,84,
0,1,28,1,1,
2,0,1,481,706,
18,1,481,680,2,
0,1,2711,707,18,
1,2711,491,2,0,
1,2718,708,18,1,
2718,242,2,0,1,
1048,709,18,1,1048,
179,2,0,1,2721,
710,18,1,2721,711,
20,712,4,10,83,
0,116,0,97,0,
116,0,101,0,1,
101,1,2,2,0,
1,2722,713,18,1,
2722,711,2,0,1,
2723,714,18,1,2723,
132,2,0,1,2724,
715,18,1,2724,135,
2,0,1,2042,716,
18,1,2042,717,20,
718,4,20,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,130,
1,2,2,0,1,
2043,719,18,1,2043,
202,2,0,1,2568,
720,18,1,2568,721,
20,722,4,18,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,1,102,1,
2,2,0,1,2733,
723,18,1,2733,150,
2,0,1,1620,724,
18,1,1620,171,2,
0,1,1621,725,18,
1,1621,160,2,0,
1,1622,726,18,1,
1622,313,2,0,1,
509,727,18,1,509,
153,2,0,1,2498,
728,18,1,2498,729,
20,730,4,24,76,
0,73,0,83,0,
84,0,69,0,78,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,73,
1,1,2,0,1,
2739,731,18,1,2739,
160,2,0,1,2740,
732,18,1,2740,313,
2,0,1,1628,733,
18,1,1628,179,2,
0,1,515,734,18,
1,515,179,2,0,
1,2505,735,18,1,
2505,736,20,737,4,
34,73,0,110,0,
116,0,82,0,111,
0,116,0,82,0,
111,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,125,1,2,2,
0,1,2746,738,18,
1,2746,179,2,0,
1,2664,739,18,1,
2664,721,2,0,1,
525,740,18,1,525,
322,2,0,1,2197,
741,18,1,2197,171,
2,0,1,2198,742,
18,1,2198,163,2,
0,1,1591,743,18,
1,1591,179,2,0,
1,2521,744,18,1,
2521,745,20,746,4,
28,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
124,1,2,2,0,
1,1094,747,18,1,
1094,676,2,0,1,
1096,748,18,1,1096,
163,2,0,1,1657,
749,18,1,1657,202,
2,0,1,1658,750,
18,1,1658,751,20,
752,4,6,70,0,
79,0,82,0,1,
46,1,1,2,0,
1,1659,753,18,1,
1659,135,2,0,1,
2609,754,18,1,2609,
610,2,0,1,2776,
755,18,1,2776,202,
2,0,1,2777,756,
18,1,2777,757,20,
758,4,34,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,1,97,1,
2,2,0,1,1665,
759,18,1,1665,179,
2,0,1,1113,760,
18,1,1113,187,2,
0,761,5,0,762,
5,365,1,2,763,
19,146,1,2,764,
5,6,1,2711,765,
17,766,15,767,4,
12,37,0,83,0,
116,0,97,0,116,
0,101,0,1,-1,
1,5,768,20,769,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,49,
0,1,172,1,3,
1,5,1,4,770,
22,1,13,1,2718,
771,17,772,15,773,
4,30,37,0,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,-1,1,
5,774,20,775,4,
32,76,0,83,0,
76,0,80,0,114,
0,111,0,103,0,
114,0,97,0,109,
0,82,0,111,0,
111,0,116,0,95,
0,50,0,1,161,
1,3,1,2,1,
1,776,22,1,2,
1,2721,777,17,778,
15,779,4,14,37,
0,83,0,116,0,
97,0,116,0,101,
0,115,0,1,-1,
1,5,780,20,781,
4,16,83,0,116,
0,97,0,116,0,
101,0,115,0,95,
0,50,0,1,171,
1,3,1,3,1,
2,782,22,1,12,
1,2788,783,17,784,
15,773,1,-1,1,
5,785,20,786,4,
32,76,0,83,0,
76,0,80,0,114,
0,111,0,103,0,
114,0,97,0,109,
0,82,0,111,0,
111,0,116,0,95,
0,49,0,1,160,
1,3,1,3,1,
2,787,22,1,1,
1,2722,788,17,789,
15,779,1,-1,1,
5,790,20,791,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,170,1,
3,1,2,1,1,
792,22,1,11,1,
2615,793,17,794,15,
767,1,-1,1,5,
795,20,796,4,14,
83,0,116,0,97,
0,116,0,101,0,
95,0,50,0,1,
173,1,3,1,6,
1,5,797,22,1,
14,1,3,798,19,
693,1,3,799,5,
95,1,256,800,16,
0,691,1,1261,801,
16,0,691,1,509,
802,16,0,691,1,
1515,803,16,0,691,
1,2021,804,17,805,
15,806,4,24,37,
0,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,807,20,808,
4,26,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,226,
1,3,1,8,1,
7,809,22,1,68,
1,1775,810,16,0,
691,1,2029,811,17,
812,15,813,4,20,
37,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,814,
20,815,4,24,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,51,0,1,220,
1,3,1,2,1,
1,816,22,1,62,
1,2030,817,17,818,
15,813,1,-1,1,
5,819,20,820,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,219,1,3,1,
2,1,1,821,22,
1,61,1,2031,822,
17,823,15,813,1,
-1,1,5,824,20,
825,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
49,0,1,218,1,
3,1,2,1,1,
826,22,1,60,1,
2032,827,17,828,15,
813,1,-1,1,5,
829,20,830,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
217,1,3,1,2,
1,1,831,22,1,
59,1,2033,832,17,
833,15,813,1,-1,
1,5,834,20,835,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,57,0,1,
216,1,3,1,2,
1,1,836,22,1,
58,1,277,837,16,
0,691,1,2035,838,
17,839,15,813,1,
-1,1,5,840,20,
841,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,56,0,
1,215,1,3,1,
3,1,2,842,22,
1,57,1,2037,843,
17,844,15,813,1,
-1,1,5,845,20,
846,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,55,0,
1,214,1,3,1,
3,1,2,847,22,
1,56,1,2039,848,
17,849,15,813,1,
-1,1,5,850,20,
851,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,54,0,
1,213,1,3,1,
3,1,2,852,22,
1,55,1,32,853,
16,0,691,1,2041,
854,17,855,15,813,
1,-1,1,5,856,
20,857,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,53,
0,1,212,1,3,
1,3,1,2,858,
22,1,54,1,2293,
859,16,0,691,1,
2043,860,17,861,15,
813,1,-1,1,5,
862,20,863,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
51,0,1,210,1,
3,1,3,1,2,
864,22,1,52,1,
2045,865,17,866,15,
813,1,-1,1,5,
867,20,868,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,208,1,
3,1,3,1,2,
869,22,1,50,1,
41,870,16,0,691,
1,1297,871,16,0,
691,1,43,872,16,
0,691,1,1803,873,
17,874,15,875,4,
16,37,0,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,1,-1,1,
5,876,20,877,4,
18,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
95,0,49,0,1,
233,1,3,1,10,
1,9,878,22,1,
75,1,1804,879,16,
0,691,1,299,880,
16,0,691,1,52,
881,16,0,691,1,
2318,882,16,0,691,
1,62,883,16,0,
691,1,2075,884,16,
0,691,1,1574,885,
17,886,15,813,1,
-1,1,5,887,20,
888,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,211,1,3,1,
3,1,2,889,22,
1,53,1,71,890,
16,0,691,1,76,
891,16,0,691,1,
1834,892,16,0,691,
1,2337,893,16,0,
691,1,79,894,16,
0,691,1,1335,895,
16,0,691,1,322,
896,16,0,691,1,
85,897,16,0,691,
1,89,898,16,0,
691,1,346,899,16,
0,691,1,2105,900,
17,901,15,806,1,
-1,1,5,902,20,
903,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
227,1,3,1,6,
1,5,904,22,1,
69,1,2106,905,16,
0,691,1,97,906,
16,0,691,1,1860,
907,17,908,15,909,
4,34,37,0,68,
0,111,0,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
910,20,911,4,36,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,231,1,3,
1,8,1,7,912,
22,1,73,1,2364,
913,17,914,15,875,
1,-1,1,5,915,
20,916,4,18,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,95,0,
50,0,1,234,1,
3,1,9,1,8,
917,22,1,76,1,
102,918,16,0,691,
1,112,919,16,0,
691,1,1117,920,16,
0,691,1,1873,921,
17,922,15,909,1,
-1,1,5,923,20,
924,4,36,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
232,1,3,1,8,
1,7,925,22,1,
74,1,1876,926,16,
0,691,1,124,927,
16,0,691,1,2136,
928,17,929,15,806,
1,-1,1,5,930,
20,931,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,228,1,3,1,
8,1,7,932,22,
1,70,1,381,933,
16,0,691,1,525,
934,16,0,691,1,
137,935,16,0,691,
1,1901,936,16,0,
691,1,1153,937,16,
0,691,1,151,938,
16,0,691,1,1407,
939,16,0,691,1,
1659,940,16,0,691,
1,2413,941,16,0,
691,1,406,942,16,
0,691,1,1371,943,
16,0,691,1,166,
944,16,0,691,1,
1622,945,16,0,691,
1,1931,946,17,947,
15,948,4,30,37,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,949,20,
950,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,229,1,3,1,
6,1,5,951,22,
1,71,1,1933,952,
16,0,691,1,431,
953,16,0,691,1,
1585,954,16,0,691,
1,182,955,16,0,
691,1,1189,956,16,
0,691,1,1443,957,
16,0,691,1,1695,
958,16,0,691,1,
2198,959,16,0,691,
1,447,960,16,0,
691,1,2458,961,17,
962,15,963,4,28,
37,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,964,20,965,
4,30,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
50,0,1,206,1,
3,1,3,1,2,
966,22,1,48,1,
2459,967,17,968,15,
969,4,36,37,0,
67,0,111,0,109,
0,112,0,111,0,
117,0,110,0,100,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,970,20,
971,4,38,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,204,1,3,
1,4,1,3,972,
22,1,46,1,1958,
973,16,0,691,1,
2462,974,17,975,15,
963,1,-1,1,5,
976,20,977,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,205,1,3,1,
2,1,1,978,22,
1,47,1,1657,979,
17,980,15,813,1,
-1,1,5,981,20,
982,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,209,1,3,1,
3,1,2,983,22,
1,51,1,2464,984,
17,985,15,969,1,
-1,1,5,986,20,
987,4,38,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,203,1,3,
1,3,1,2,988,
22,1,45,1,199,
989,16,0,691,1,
459,990,16,0,691,
1,462,991,16,0,
691,1,217,992,16,
0,691,1,2227,993,
17,994,15,948,1,
-1,1,5,995,20,
996,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,230,1,3,1,
6,1,5,997,22,
1,72,1,1225,998,
16,0,691,1,1479,
999,16,0,691,1,
1731,1000,16,0,691,
1,2740,1001,16,0,
691,1,1989,1002,17,
1003,15,806,1,-1,
1,5,1004,20,1005,
4,26,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,225,
1,3,1,6,1,
5,1006,22,1,67,
1,1990,1007,16,0,
691,1,236,1008,16,
0,691,1,1756,1009,
16,0,691,1,4,
1010,19,195,1,4,
1011,5,100,1,256,
1012,16,0,589,1,
1261,1013,16,0,589,
1,509,1014,16,0,
589,1,1515,1015,16,
0,589,1,2021,804,
1,1775,1016,16,0,
589,1,2029,811,1,
2030,817,1,2031,822,
1,2032,827,1,2033,
832,1,277,1017,16,
0,589,1,2035,838,
1,2037,843,1,2039,
848,1,32,1018,16,
0,589,1,2041,854,
1,2293,1019,16,0,
589,1,2043,860,1,
2045,865,1,40,1020,
16,0,197,1,41,
1021,16,0,589,1,
1297,1022,16,0,589,
1,43,1023,16,0,
589,1,44,1024,16,
0,197,1,1803,873,
1,1804,1025,16,0,
589,1,299,1026,16,
0,589,1,47,1027,
16,0,193,1,52,
1028,16,0,589,1,
2318,1029,16,0,589,
1,63,1030,16,0,
212,1,66,1031,16,
0,210,1,2075,1032,
16,0,589,1,1574,
885,1,71,1033,16,
0,589,1,76,1034,
16,0,589,1,1834,
1035,16,0,589,1,
2337,1036,16,0,589,
1,79,1037,16,0,
589,1,1335,1038,16,
0,589,1,322,1039,
16,0,589,1,85,
1040,16,0,589,1,
89,1041,16,0,589,
1,346,1042,16,0,
589,1,97,1043,16,
0,589,1,2106,1044,
16,0,589,1,102,
1045,16,0,589,1,
1860,907,1,2364,913,
1,1114,1046,16,0,
193,1,112,1047,16,
0,589,1,1117,1048,
16,0,589,1,1873,
921,1,1876,1049,16,
0,589,1,124,1050,
16,0,589,1,2136,
928,1,381,1051,16,
0,589,1,525,1052,
16,0,589,1,137,
1053,16,0,589,1,
1901,1054,16,0,589,
1,1153,1055,16,0,
589,1,151,1056,16,
0,589,1,1407,1057,
16,0,589,1,1659,
1058,16,0,589,1,
2413,1059,16,0,589,
1,406,1060,16,0,
589,1,1371,1061,16,
0,589,1,2105,900,
1,166,1062,16,0,
589,1,1622,1063,16,
0,589,1,1931,946,
1,1933,1064,16,0,
589,1,431,1065,16,
0,589,1,1585,1066,
16,0,589,1,182,
1067,16,0,589,1,
1189,1068,16,0,589,
1,1443,1069,16,0,
589,1,1695,1070,16,
0,589,1,2198,1071,
16,0,589,1,447,
1072,16,0,589,1,
2458,961,1,2459,967,
1,1958,1073,16,0,
589,1,2462,974,1,
1657,979,1,2464,984,
1,199,1074,16,0,
589,1,459,1075,16,
0,589,1,462,1076,
16,0,589,1,217,
1077,16,0,589,1,
2227,993,1,1225,1078,
16,0,589,1,1479,
1079,16,0,589,1,
1731,1080,16,0,589,
1,2740,1081,16,0,
589,1,1989,1002,1,
1990,1082,16,0,589,
1,236,1083,16,0,
589,1,1756,1084,16,
0,589,1,5,1085,
19,192,1,5,1086,
5,100,1,256,1087,
16,0,585,1,1261,
1088,16,0,585,1,
509,1089,16,0,585,
1,1515,1090,16,0,
585,1,2021,804,1,
1775,1091,16,0,585,
1,2029,811,1,2030,
817,1,2031,822,1,
2032,827,1,2033,832,
1,277,1092,16,0,
585,1,2035,838,1,
2037,843,1,2039,848,
1,32,1093,16,0,
585,1,2041,854,1,
2293,1094,16,0,585,
1,2043,860,1,2045,
865,1,40,1095,16,
0,196,1,41,1096,
16,0,585,1,1297,
1097,16,0,585,1,
43,1098,16,0,585,
1,44,1099,16,0,
196,1,1803,873,1,
1804,1100,16,0,585,
1,299,1101,16,0,
585,1,47,1102,16,
0,190,1,52,1103,
16,0,585,1,2318,
1104,16,0,585,1,
63,1105,16,0,211,
1,66,1106,16,0,
209,1,2075,1107,16,
0,585,1,1574,885,
1,71,1108,16,0,
585,1,76,1109,16,
0,585,1,1834,1110,
16,0,585,1,2337,
1111,16,0,585,1,
79,1112,16,0,585,
1,1335,1113,16,0,
585,1,322,1114,16,
0,585,1,85,1115,
16,0,585,1,89,
1116,16,0,585,1,
346,1117,16,0,585,
1,97,1118,16,0,
585,1,2106,1119,16,
0,585,1,102,1120,
16,0,585,1,1860,
907,1,2364,913,1,
1114,1121,16,0,190,
1,112,1122,16,0,
585,1,1117,1123,16,
0,585,1,1873,921,
1,1876,1124,16,0,
585,1,124,1125,16,
0,585,1,2136,928,
1,381,1126,16,0,
585,1,525,1127,16,
0,585,1,137,1128,
16,0,585,1,1901,
1129,16,0,585,1,
1153,1130,16,0,585,
1,151,1131,16,0,
585,1,1407,1132,16,
0,585,1,1659,1133,
16,0,585,1,2413,
1134,16,0,585,1,
406,1135,16,0,585,
1,1371,1136,16,0,
585,1,2105,900,1,
166,1137,16,0,585,
1,1622,1138,16,0,
585,1,1931,946,1,
1933,1139,16,0,585,
1,431,1140,16,0,
585,1,1585,1141,16,
0,585,1,182,1142,
16,0,585,1,1189,
1143,16,0,585,1,
1443,1144,16,0,585,
1,1695,1145,16,0,
585,1,2198,1146,16,
0,585,1,447,1147,
16,0,585,1,2458,
961,1,2459,967,1,
1958,1148,16,0,585,
1,2462,974,1,1657,
979,1,2464,984,1,
199,1149,16,0,585,
1,459,1150,16,0,
585,1,462,1151,16,
0,585,1,217,1152,
16,0,585,1,2227,
993,1,1225,1153,16,
0,585,1,1479,1154,
16,0,585,1,1731,
1155,16,0,585,1,
2740,1156,16,0,585,
1,1989,1002,1,1990,
1157,16,0,585,1,
236,1158,16,0,585,
1,1756,1159,16,0,
585,1,6,1160,19,
292,1,6,1161,5,
2,1,1114,1162,16,
0,290,1,40,1163,
16,0,574,1,7,
1164,19,258,1,7,
1165,5,2,1,1114,
1166,16,0,256,1,
40,1167,16,0,516,
1,8,1168,19,218,
1,8,1169,5,2,
1,1114,1170,16,0,
216,1,40,1171,16,
0,465,1,9,1172,
19,224,1,9,1173,
5,2,1,1114,1174,
16,0,222,1,40,
1175,16,0,396,1,
10,1176,19,175,1,
10,1177,5,2,1,
1114,1178,16,0,173,
1,40,1179,16,0,
338,1,11,1180,19,
203,1,11,1181,5,
146,1,1260,1182,17,
1183,15,1184,4,34,
37,0,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1185,20,
1186,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,49,
0,1,261,1,3,
1,6,1,5,1187,
22,1,103,1,1011,
1188,17,1189,15,1190,
4,44,37,0,80,
0,97,0,114,0,
101,0,110,0,116,
0,104,0,101,0,
115,0,105,0,115,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1191,20,1192,4,46,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,50,
0,1,308,1,3,
1,4,1,3,1193,
22,1,150,1,1514,
1194,17,1195,15,1184,
1,-1,1,5,1196,
20,1197,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
52,0,1,254,1,
3,1,4,1,3,
1198,22,1,96,1,
9,1199,17,1200,15,
1201,4,24,37,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,1202,20,1203,4,
26,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,198,1,
3,1,3,1,2,
1204,22,1,40,1,
262,1205,17,1206,15,
1207,4,34,37,0,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1208,20,1209,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
53,0,1,290,1,
3,1,4,1,3,
1210,22,1,132,1,
1267,1211,17,1212,15,
1184,1,-1,1,5,
1213,20,1214,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,56,
0,1,248,1,3,
1,6,1,5,1215,
22,1,90,1,2021,
804,1,1521,1216,17,
1217,15,1184,1,-1,
1,5,1218,20,1219,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,241,
1,3,1,4,1,
3,1220,22,1,83,
1,2024,1221,17,1222,
15,1223,4,24,37,
0,83,0,116,0,
97,0,116,0,101,
0,67,0,104,0,
97,0,110,0,103,
0,101,0,1,-1,
1,5,1224,20,1225,
4,26,83,0,116,
0,97,0,116,0,
101,0,67,0,104,
0,97,0,110,0,
103,0,101,0,95,
0,49,0,1,223,
1,3,1,3,1,
2,1226,22,1,65,
1,1775,1227,17,1228,
15,1229,4,30,37,
0,69,0,109,0,
112,0,116,0,121,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1230,20,
1231,4,32,69,0,
109,0,112,0,116,
0,121,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,207,1,3,1,
1,1,0,1232,22,
1,49,1,19,1233,
17,1200,1,2,1204,
1,2028,1234,17,1235,
15,1236,4,20,37,
0,74,0,117,0,
109,0,112,0,76,
0,97,0,98,0,
101,0,108,0,1,
-1,1,5,1237,20,
1238,4,22,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,95,0,49,0,
1,221,1,3,1,
3,1,2,1239,22,
1,63,1,2029,811,
1,2281,1240,17,1241,
15,1242,4,34,37,
0,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1243,20,1244,
4,36,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,236,
1,3,1,2,1,
1,1245,22,1,78,
1,2031,822,1,2032,
827,1,2033,832,1,
2034,1246,16,0,648,
1,2035,838,1,2036,
1247,16,0,575,1,
2037,843,1,2038,1248,
16,0,579,1,2039,
848,1,32,1249,17,
1228,1,0,1232,1,
2041,854,1,2042,1250,
16,0,719,1,2043,
860,1,2044,1251,16,
0,660,1,2045,865,
1,2299,1252,16,0,
240,1,1296,1253,17,
1254,15,1184,1,-1,
1,5,1255,20,1256,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,48,0,
1,260,1,3,1,
6,1,5,1257,22,
1,102,1,283,1258,
17,1259,15,1207,1,
-1,1,5,1260,20,
1261,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
289,1,3,1,4,
1,3,1262,22,1,
131,1,40,1263,17,
1264,15,1265,4,32,
37,0,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1266,20,1267,4,
34,73,0,100,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,275,1,3,1,
2,1,1,1268,22,
1,117,1,44,1269,
17,1264,1,1,1268,
1,1803,873,1,47,
1270,17,1271,15,1272,
4,38,37,0,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1273,
20,1274,4,40,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
276,1,3,1,4,
1,3,1275,22,1,
118,1,48,1276,17,
1277,15,1278,4,58,
37,0,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1279,20,1280,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
52,0,1,280,1,
3,1,5,1,4,
1281,22,1,122,1,
49,1282,17,1283,15,
1278,1,-1,1,5,
1284,20,1285,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,279,1,3,1,
5,1,4,1286,22,
1,121,1,50,1287,
17,1288,15,1278,1,
-1,1,5,1289,20,
1290,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,278,
1,3,1,3,1,
2,1291,22,1,120,
1,51,1292,17,1293,
15,1278,1,-1,1,
5,1294,20,1295,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,277,1,3,
1,3,1,2,1296,
22,1,119,1,305,
1297,17,1298,15,1207,
1,-1,1,5,1299,
20,1300,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,288,1,3,1,
4,1,3,1301,22,
1,130,1,525,1302,
17,1303,15,1304,4,
34,37,0,82,0,
111,0,116,0,97,
0,116,0,105,0,
111,0,110,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1305,
20,1306,4,36,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,273,1,3,1,
10,1,9,1307,22,
1,115,1,63,1308,
17,1309,15,1310,4,
38,37,0,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1311,20,
1312,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,310,
1,3,1,5,1,
4,1313,22,1,152,
1,2739,1314,16,0,
755,1,66,1315,17,
1316,15,1310,1,-1,
1,5,1317,20,1318,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,311,1,
3,1,7,1,6,
1319,22,1,153,1,
67,1320,17,1321,15,
1310,1,-1,1,5,
1322,20,1323,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,55,0,
1,315,1,3,1,
8,1,7,1324,22,
1,157,1,68,1325,
17,1326,15,1310,1,
-1,1,5,1327,20,
1328,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,53,0,1,313,
1,3,1,8,1,
7,1329,22,1,155,
1,69,1330,17,1331,
15,1310,1,-1,1,
5,1332,20,1333,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,54,
0,1,314,1,3,
1,6,1,5,1334,
22,1,156,1,70,
1335,17,1336,15,1310,
1,-1,1,5,1337,
20,1338,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
312,1,3,1,6,
1,5,1339,22,1,
154,1,74,1340,17,
1341,15,1310,1,-1,
1,5,1342,20,1343,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
57,0,1,317,1,
3,1,7,1,6,
1344,22,1,159,1,
1013,1345,17,1346,15,
1190,1,-1,1,5,
1347,20,1348,4,46,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,307,1,3,
1,4,1,3,1349,
22,1,149,1,1332,
1350,17,1351,15,1184,
1,-1,1,5,1352,
20,1353,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
57,0,1,259,1,
3,1,6,1,5,
1354,22,1,101,1,
2337,1355,17,1228,1,
0,1232,1,1585,1356,
17,1357,15,1358,4,
32,37,0,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1359,20,1360,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,266,1,3,
1,2,1,1,1361,
22,1,108,1,2023,
1362,17,1363,15,1223,
1,-1,1,5,1364,
20,1365,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,50,0,
1,224,1,3,1,
3,1,2,1366,22,
1,66,1,2136,928,
1,82,1367,17,1368,
15,1369,4,32,37,
0,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1370,20,1371,4,34,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,51,0,1,
306,1,3,1,3,
1,2,1372,22,1,
148,1,2026,1373,17,
1374,15,1375,4,28,
37,0,74,0,117,
0,109,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1376,20,1377,
4,30,74,0,117,
0,109,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,222,1,
3,1,3,1,2,
1378,22,1,64,1,
1591,1379,17,1380,15,
1358,1,-1,1,5,
1381,20,1382,4,34,
82,0,101,0,116,
0,117,0,114,0,
110,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
265,1,3,1,3,
1,2,1383,22,1,
107,1,1341,1384,17,
1385,15,1184,1,-1,
1,5,1386,20,1387,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,54,0,1,246,
1,3,1,4,1,
3,1388,22,1,88,
1,2030,817,1,328,
1389,17,1390,15,1207,
1,-1,1,5,1391,
20,1392,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,287,1,3,1,
4,1,3,1393,22,
1,129,1,1303,1394,
17,1395,15,1184,1,
-1,1,5,1396,20,
1397,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
247,1,3,1,6,
1,5,1398,22,1,
89,1,1096,1399,17,
1400,15,1401,4,26,
37,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,1,-1,1,5,
1402,20,1403,4,28,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,95,
0,49,0,1,318,
1,3,1,5,1,
4,1404,22,1,160,
1,93,1405,17,1406,
15,1369,1,-1,1,
5,1407,20,1408,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,305,1,3,1,
3,1,2,1409,22,
1,147,1,1550,1410,
17,1411,15,1184,1,
-1,1,5,1412,20,
1413,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,51,
0,1,253,1,3,
1,4,1,3,1414,
22,1,95,1,2040,
1415,16,0,583,1,
2106,1416,17,1228,1,
0,1232,1,1555,1417,
16,0,674,1,827,
1418,17,1419,15,1207,
1,-1,1,5,1420,
20,1421,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
53,0,1,300,1,
3,1,4,1,3,
1422,22,1,142,1,
1859,1423,16,0,319,
1,1860,907,1,1804,
1424,17,1228,1,0,
1232,1,107,1425,17,
1426,15,1369,1,-1,
1,5,1427,20,1428,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,304,1,3,
1,3,1,2,1429,
22,1,146,1,1114,
1430,17,1271,1,3,
1275,1,1048,1431,17,
1432,15,1207,1,-1,
1,5,1433,20,1434,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,56,0,
1,303,1,3,1,
4,1,3,1435,22,
1,145,1,352,1436,
17,1437,15,1207,1,
-1,1,5,1438,20,
1439,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
286,1,3,1,4,
1,3,1440,22,1,
128,1,1872,1441,16,
0,329,1,1873,921,
1,118,1442,17,1443,
15,1207,1,-1,1,
5,1444,20,1445,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,52,0,1,
299,1,3,1,4,
1,3,1446,22,1,
141,1,1123,1447,17,
1448,15,1184,1,-1,
1,5,1449,20,1450,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,252,1,3,1,
6,1,5,1451,22,
1,94,1,371,1452,
17,1453,15,1454,4,
46,37,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1455,20,1456,4,
48,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
285,1,3,1,2,
1,1,1457,22,1,
127,1,1377,1458,17,
1459,15,1184,1,-1,
1,5,1460,20,1461,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,53,0,1,245,
1,3,1,4,1,
3,1462,22,1,87,
1,375,1463,17,1464,
15,1278,1,-1,1,
5,1465,20,1466,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,284,1,3,
1,5,1,4,1467,
22,1,126,1,377,
1468,17,1469,15,1278,
1,-1,1,5,1470,
20,1471,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
281,1,3,1,3,
1,2,1472,22,1,
123,1,379,1473,17,
1474,15,1278,1,-1,
1,5,1475,20,1476,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
55,0,1,283,1,
3,1,5,1,4,
1477,22,1,125,1,
380,1478,17,1479,15,
1480,4,38,37,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1481,20,1482,4,40,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,274,1,3,1,
2,1,1,1483,22,
1,116,1,883,1484,
17,1485,15,1207,1,
-1,1,5,1486,20,
1487,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,54,
0,1,301,1,3,
1,4,1,3,1488,
22,1,143,1,1628,
1489,17,1490,15,1491,
4,22,37,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1492,20,
1493,4,24,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,239,1,
3,1,4,1,3,
1494,22,1,81,1,
2075,1495,17,1228,1,
0,1232,1,373,1496,
17,1497,15,1278,1,
-1,1,5,1498,20,
1499,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,282,
1,3,1,3,1,
2,1500,22,1,124,
1,130,1501,17,1502,
15,1207,1,-1,1,
5,1503,20,1504,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,51,0,1,
298,1,3,1,4,
1,3,1505,22,1,
140,1,143,1506,17,
1507,15,1207,1,-1,
1,5,1508,20,1509,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,50,0,
1,297,1,3,1,
4,1,3,1510,22,
1,139,1,1901,1511,
17,1228,1,0,1232,
1,1152,1512,17,1513,
15,1184,1,-1,1,
5,1514,20,1515,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,52,0,1,
264,1,3,1,6,
1,5,1516,22,1,
106,1,1406,1517,17,
1518,15,1184,1,-1,
1,5,1519,20,1520,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,55,0,
1,257,1,3,1,
4,1,3,1521,22,
1,99,1,1659,1522,
16,0,283,1,2413,
1523,17,1228,1,0,
1232,1,1159,1524,17,
1525,15,1184,1,-1,
1,5,1526,20,1527,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,49,0,
1,251,1,3,1,
6,1,5,1528,22,
1,93,1,157,1529,
17,1530,15,1207,1,
-1,1,5,1531,20,
1532,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,49,
0,1,296,1,3,
1,4,1,3,1533,
22,1,138,1,1413,
1534,17,1535,15,1184,
1,-1,1,5,1536,
20,1537,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,244,1,3,1,
4,1,3,1538,22,
1,86,1,1370,1539,
17,1540,15,1184,1,
-1,1,5,1541,20,
1542,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,56,
0,1,258,1,3,
1,4,1,3,1543,
22,1,100,1,1478,
1544,17,1545,15,1184,
1,-1,1,5,1546,
20,1547,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
53,0,1,255,1,
3,1,4,1,3,
1548,22,1,97,1,
1620,1549,17,1550,15,
1491,1,-1,1,5,
1551,20,1552,4,24,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
240,1,3,1,2,
1,1,1553,22,1,
82,1,1621,1554,16,
0,749,1,1574,885,
1,172,1555,17,1556,
15,1207,1,-1,1,
5,1557,20,1558,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,48,0,1,
295,1,3,1,4,
1,3,1559,22,1,
137,1,1931,946,1,
1665,1560,17,1561,15,
1242,1,-1,1,5,
1562,20,1563,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,235,1,3,
1,2,1,1,1564,
22,1,77,1,2364,
913,1,2105,900,1,
1188,1565,17,1566,15,
1184,1,-1,1,5,
1567,20,1568,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,51,0,1,263,
1,3,1,6,1,
5,1569,22,1,105,
1,1442,1570,17,1571,
15,1184,1,-1,1,
5,1572,20,1573,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,54,0,1,
256,1,3,1,4,
1,3,1574,22,1,
98,1,1694,1575,16,
0,201,1,942,1576,
17,1577,15,1207,1,
-1,1,5,1578,20,
1579,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,55,
0,1,302,1,3,
1,4,1,3,1580,
22,1,144,1,2198,
1581,17,1228,1,0,
1232,1,1195,1582,17,
1583,15,1184,1,-1,
1,5,1584,20,1585,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,48,0,
1,250,1,3,1,
6,1,5,1586,22,
1,92,1,1449,1587,
17,1588,15,1184,1,
-1,1,5,1589,20,
1590,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
243,1,3,1,4,
1,3,1591,22,1,
85,1,1701,1592,17,
1593,15,1242,1,-1,
1,5,1594,20,1595,
4,36,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,237,
1,3,1,4,1,
3,1596,22,1,79,
1,447,1597,17,1598,
15,1599,4,30,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1600,20,
1601,4,32,86,0,
101,0,99,0,116,
0,111,0,114,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,272,1,3,1,
8,1,7,1602,22,
1,114,1,2458,961,
1,2459,967,1,1958,
1603,17,1228,1,0,
1232,1,188,1604,17,
1605,15,1207,1,-1,
1,5,1606,20,1607,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,57,0,1,294,
1,3,1,4,1,
3,1608,22,1,136,
1,2462,974,1,1657,
979,1,2464,984,1,
205,1609,17,1610,15,
1207,1,-1,1,5,
1611,20,1612,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,293,1,3,
1,4,1,3,1613,
22,1,135,1,2227,
993,1,1224,1614,17,
1615,15,1184,1,-1,
1,5,1616,20,1617,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,50,0,
1,262,1,3,1,
6,1,5,1618,22,
1,104,1,223,1619,
17,1620,15,1207,1,
-1,1,5,1621,20,
1622,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,55,0,1,
292,1,3,1,4,
1,3,1623,22,1,
134,1,1730,1624,17,
1625,15,1242,1,-1,
1,5,1626,20,1627,
4,36,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,52,0,1,238,
1,3,1,4,1,
3,1628,22,1,80,
1,476,1629,17,1630,
15,1631,4,18,37,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1632,20,1633,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,52,
0,1,270,1,3,
1,2,1,1,1634,
22,1,112,1,477,
1635,17,1636,15,1631,
1,-1,1,5,1637,
20,1638,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,51,0,1,
269,1,3,1,2,
1,1,1639,22,1,
111,1,1231,1640,17,
1641,15,1184,1,-1,
1,5,1642,20,1643,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,57,0,1,249,
1,3,1,6,1,
5,1644,22,1,91,
1,479,1645,17,1646,
15,1631,1,-1,1,
5,1647,20,1648,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,267,1,3,
1,2,1,1,1649,
22,1,109,1,480,
1650,17,1651,15,1652,
4,26,37,0,76,
0,105,0,115,0,
116,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,-1,
1,5,1653,20,1654,
4,28,76,0,105,
0,115,0,116,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,271,1,3,1,
4,1,3,1655,22,
1,113,1,1485,1656,
17,1657,15,1184,1,
-1,1,5,1658,20,
1659,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
242,1,3,1,4,
1,3,1660,22,1,
84,1,1737,1661,16,
0,285,1,1989,1002,
1,1990,1662,17,1228,
1,0,1232,1,2746,
1663,16,0,297,1,
242,1664,17,1665,15,
1207,1,-1,1,5,
1666,20,1667,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,54,
0,1,291,1,3,
1,4,1,3,1668,
22,1,133,1,478,
1669,17,1670,15,1631,
1,-1,1,5,1671,
20,1672,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,50,0,1,
268,1,3,1,2,
1,1,1673,22,1,
110,1,1001,1674,17,
1675,15,1310,1,-1,
1,5,1676,20,1677,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
56,0,1,316,1,
3,1,5,1,4,
1678,22,1,158,1,
1002,1679,17,1680,15,
1310,1,-1,1,5,
1681,20,1682,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,309,1,3,1,
5,1,4,1683,22,
1,151,1,12,1684,
19,167,1,12,1685,
5,48,1,1901,1686,
16,0,165,1,2033,
832,1,2622,1687,16,
0,626,1,1860,907,
1,1803,873,1,1804,
1688,16,0,165,1,
2735,1689,16,0,165,
1,2518,1690,16,0,
165,1,2413,1691,16,
0,165,1,2198,1692,
16,0,165,1,2527,
1693,16,0,165,1,
1657,979,1,1989,1002,
1,2535,1694,16,0,
165,1,31,1695,16,
0,165,1,32,1696,
16,0,165,1,2105,
900,1,2106,1697,16,
0,165,1,2544,1698,
16,0,165,1,2549,
1699,16,0,165,1,
2227,993,1,2337,1700,
16,0,165,1,2564,
1701,16,0,165,1,
2021,804,1,2458,961,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2469,1702,16,0,509,
1,2035,838,1,2364,
913,1,2039,848,1,
1931,946,1,2041,854,
1,1873,921,1,2043,
860,1,2045,865,1,
1775,1703,16,0,165,
1,1990,1704,16,0,
165,1,2075,1705,16,
0,165,1,2037,843,
1,1574,885,1,1958,
1706,16,0,165,1,
13,1707,19,492,1,
13,1708,5,49,1,
2616,1709,17,1710,15,
1711,4,20,37,0,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,1,-1,
1,5,1712,20,1713,
4,24,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,49,
0,1,184,1,3,
1,2,1,1,1714,
22,1,25,1,2617,
1715,17,1716,15,1711,
1,-1,1,5,1717,
20,1718,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,57,
0,1,182,1,3,
1,2,1,1,1719,
22,1,23,1,2618,
1720,17,1721,15,1711,
1,-1,1,5,1722,
20,1723,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,55,
0,1,180,1,3,
1,2,1,1,1724,
22,1,21,1,2619,
1725,17,1726,15,1711,
1,-1,1,5,1727,
20,1728,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,53,
0,1,178,1,3,
1,2,1,1,1729,
22,1,19,1,2620,
1730,17,1731,15,1711,
1,-1,1,5,1732,
20,1733,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,51,
0,1,176,1,3,
1,2,1,1,1734,
22,1,17,1,2621,
1735,17,1736,15,1711,
1,-1,1,5,1737,
20,1738,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,49,
0,1,174,1,3,
1,2,1,1,1739,
22,1,15,1,1860,
907,1,1803,873,1,
2520,1740,17,1741,15,
1742,4,46,37,0,
73,0,110,0,116,
0,82,0,111,0,
116,0,82,0,111,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1743,20,
1744,4,48,73,0,
110,0,116,0,82,
0,111,0,116,0,
82,0,111,0,116,
0,65,0,114,0,
103,0,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,191,1,3,
1,6,1,5,1745,
22,1,32,1,2413,
1746,16,0,490,1,
1657,979,1,1873,921,
1,2529,1747,17,1748,
15,1749,4,40,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1750,20,
1751,4,42,86,0,
101,0,99,0,116,
0,111,0,114,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,190,1,3,1,
6,1,5,1752,22,
1,31,1,2664,1753,
16,0,707,1,1989,
1002,1,2537,1754,17,
1755,15,1756,4,34,
37,0,73,0,110,
0,116,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1757,20,
1758,4,36,73,0,
110,0,116,0,65,
0,114,0,103,0,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
189,1,3,1,6,
1,5,1759,22,1,
30,1,32,1760,16,
0,502,1,2105,900,
1,2546,1761,17,1762,
15,1763,4,34,37,
0,75,0,101,0,
121,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1764,20,1765,
4,36,75,0,101,
0,121,0,65,0,
114,0,103,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,188,
1,3,1,6,1,
5,1766,22,1,29,
1,2364,913,1,2551,
1767,17,1768,15,1769,
4,36,37,0,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1770,20,1771,
4,38,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,187,1,3,1,
5,1,4,1772,22,
1,28,1,2227,993,
1,1574,885,1,2566,
1773,17,1774,15,1775,
4,22,37,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1776,20,
1777,4,24,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,186,1,
3,1,6,1,5,
1778,22,1,27,1,
2458,961,1,2459,967,
1,2462,974,1,2136,
928,1,2464,984,1,
2029,811,1,2030,817,
1,2031,822,1,2032,
827,1,2033,832,1,
2035,838,1,2037,843,
1,2039,848,1,1931,
946,1,2041,854,1,
2021,804,1,2043,860,
1,2045,865,1,2568,
1779,16,0,686,1,
2609,1780,17,1781,15,
1711,1,-1,1,5,
1782,20,1783,4,24,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,95,0,
49,0,50,0,1,
185,1,3,1,3,
1,2,1784,22,1,
26,1,2610,1785,17,
1786,15,1711,1,-1,
1,5,1787,20,1788,
4,24,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,48,
0,1,183,1,3,
1,3,1,2,1789,
22,1,24,1,2611,
1790,17,1791,15,1711,
1,-1,1,5,1792,
20,1793,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,56,
0,1,181,1,3,
1,3,1,2,1794,
22,1,22,1,2612,
1795,17,1796,15,1711,
1,-1,1,5,1797,
20,1798,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,54,
0,1,179,1,3,
1,3,1,2,1799,
22,1,20,1,2613,
1800,17,1801,15,1711,
1,-1,1,5,1802,
20,1803,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,52,
0,1,177,1,3,
1,3,1,2,1804,
22,1,18,1,2614,
1805,17,1806,15,1711,
1,-1,1,5,1807,
20,1808,4,22,83,
0,116,0,97,0,
116,0,101,0,66,
0,111,0,100,0,
121,0,95,0,50,
0,1,175,1,3,
1,3,1,2,1809,
22,1,16,1,14,
1810,19,154,1,14,
1811,5,109,1,2512,
1812,17,1813,15,1814,
4,30,37,0,82,
0,111,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,1815,20,1816,4,
32,82,0,111,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,49,0,1,202,
1,3,1,3,1,
2,1817,22,1,44,
1,2513,1818,16,0,
457,1,1260,1182,1,
1011,1188,1,1514,1194,
1,9,1199,1,10,
1819,17,1820,15,1821,
4,48,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,150,
1,0,1,0,1822,
22,1,33,1,262,
1205,1,1267,1211,1,
1521,1216,1,1773,1823,
16,0,158,1,19,
1233,1,20,1824,16,
0,152,1,2281,1240,
1,525,1302,1,30,
1825,17,1826,15,1821,
1,-1,1,5,1827,
20,1828,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
193,1,3,1,4,
1,3,1829,22,1,
35,1,1002,1679,1,
283,1258,1,40,1263,
1,41,1830,17,1831,
15,1832,4,26,37,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,676,
1,0,1,0,1833,
22,1,161,1,42,
1834,17,1835,15,1836,
4,38,37,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1837,
20,1838,4,40,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
321,1,3,1,2,
1,1,1839,22,1,
164,1,2553,1840,17,
1841,15,1821,1,-1,
1,5,150,1,0,
1,0,1822,1,44,
1269,1,47,1270,1,
48,1276,1,49,1282,
1,50,1287,1,51,
1292,1,2562,1842,16,
0,152,1,305,1297,
1,2733,1843,16,0,
152,1,63,1308,1,
66,1315,1,67,1320,
1,1478,1544,1,69,
1330,1,70,1335,1,
68,1325,1,74,1340,
1,1013,1345,1,2335,
1844,16,0,158,1,
1332,1350,1,1048,1431,
1,82,1367,1,1296,
1253,1,1341,1384,1,
328,1389,1,1303,1394,
1,1096,1399,1,93,
1405,1,1550,1410,1,
352,1436,1,107,1425,
1,1114,1430,1,1370,
1539,1,118,1442,1,
1123,1447,1,371,1452,
1,1377,1458,1,375,
1463,1,377,1468,1,
379,1473,1,380,1478,
1,883,1484,1,373,
1496,1,130,1501,1,
143,1506,1,1152,1512,
1,387,1845,16,0,
639,1,1406,1517,1,
1159,1524,1,157,1529,
1,1413,1534,1,1665,
1560,1,412,1846,16,
0,652,1,1094,1847,
16,0,678,1,172,
1555,1,827,1418,1,
1188,1565,1,437,1848,
16,0,727,1,1442,
1570,1,1694,1849,16,
0,158,1,942,1576,
1,1195,1582,1,1449,
1587,1,1701,1592,1,
447,1597,1,188,1604,
1,205,1609,1,2467,
1850,17,1851,15,1821,
1,-1,1,5,1852,
20,1853,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
192,1,3,1,2,
1,1,1854,22,1,
34,1,461,1855,16,
0,678,1,464,1856,
17,1857,15,1832,1,
-1,1,5,1858,20,
1859,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,50,
0,1,320,1,3,
1,4,1,3,1860,
22,1,163,1,2724,
1861,17,1862,15,1821,
1,-1,1,5,150,
1,0,1,0,1822,
1,1224,1614,1,223,
1619,1,1730,1624,1,
476,1629,1,477,1635,
1,1231,1640,1,479,
1645,1,480,1650,1,
1485,1656,1,459,1863,
17,1864,15,1832,1,
-1,1,5,676,1,
0,1,0,1833,1,
242,1664,1,478,1669,
1,481,1865,17,1866,
15,1832,1,-1,1,
5,1867,20,1868,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
319,1,3,1,2,
1,1,1869,22,1,
162,1,1001,1674,1,
2508,1870,17,1871,15,
1872,4,30,37,0,
73,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,1873,20,1874,
4,32,73,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
200,1,3,1,3,
1,2,1875,22,1,
42,1,2509,1876,16,
0,451,1,15,1877,
19,314,1,15,1878,
5,6,1,2739,1879,
16,0,732,1,1114,
1880,16,0,312,1,
1621,1881,16,0,726,
1,40,1882,16,0,
632,1,19,1233,1,
9,1199,1,16,1883,
19,136,1,16,1884,
5,144,1,256,1885,
16,0,198,1,1261,
1886,16,0,198,1,
509,1887,16,0,198,
1,9,1888,16,0,
134,1,2521,1889,16,
0,466,1,2021,804,
1,1775,1890,16,0,
198,1,2530,1891,16,
0,483,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2033,832,1,277,1892,
16,0,198,1,2035,
838,1,2538,1893,16,
0,496,1,2037,843,
1,2039,848,1,32,
1894,16,0,198,1,
2041,854,1,2293,1895,
16,0,198,1,2043,
860,1,2547,1896,16,
0,508,1,40,1897,
16,0,177,1,41,
1898,16,0,198,1,
1297,1899,16,0,198,
1,43,1900,16,0,
198,1,44,1901,16,
0,177,1,1803,873,
1,1804,1902,16,0,
198,1,299,1903,16,
0,198,1,2480,1904,
17,1905,15,1906,4,
24,37,0,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1907,
20,1908,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,53,0,
1,353,1,3,1,
2,1,1,1909,22,
1,196,1,52,1910,
16,0,198,1,2484,
1911,17,1912,15,1906,
1,-1,1,5,1913,
20,1914,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,349,1,3,1,
2,1,1,1915,22,
1,192,1,1515,1916,
16,0,198,1,2318,
1917,16,0,198,1,
2491,1918,17,1919,15,
1920,4,26,37,0,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1921,20,
1922,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,342,1,3,
1,2,1,1,1923,
22,1,185,1,62,
1924,16,0,213,1,
63,1925,16,0,177,
1,2495,1926,17,1927,
15,1928,4,12,37,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1929,20,1930,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,338,1,3,
1,2,1,1,1931,
22,1,181,1,2740,
1932,16,0,198,1,
2075,1933,16,0,198,
1,1574,885,1,1479,
1934,16,0,198,1,
71,1935,16,0,198,
1,1658,1936,16,0,
753,1,1833,1937,16,
0,304,1,1834,1938,
16,0,198,1,2337,
1939,16,0,198,1,
79,1940,16,0,198,
1,1335,1941,16,0,
198,1,322,1942,16,
0,198,1,76,1943,
16,0,198,1,85,
1944,16,0,198,1,
89,1945,16,0,198,
1,346,1946,16,0,
198,1,97,1947,16,
0,198,1,2106,1948,
16,0,198,1,102,
1949,16,0,198,1,
1860,907,1,2458,961,
1,2364,913,1,1990,
1950,16,0,198,1,
112,1951,16,0,198,
1,1117,1952,16,0,
198,1,1873,921,1,
1875,1953,16,0,412,
1,1876,1954,16,0,
198,1,2552,1955,16,
0,513,1,124,1956,
16,0,198,1,2478,
1957,17,1958,15,1906,
1,-1,1,5,1959,
20,1960,4,26,73,
0,110,0,116,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,55,0,
1,355,1,3,1,
2,1,1,1961,22,
1,198,1,2136,928,
1,381,1962,16,0,
198,1,525,1963,16,
0,198,1,2723,1964,
16,0,715,1,137,
1965,16,0,198,1,
1901,1966,16,0,198,
1,1153,1967,16,0,
198,1,151,1968,16,
0,198,1,1407,1969,
16,0,198,1,1659,
1970,16,0,198,1,
2413,1971,16,0,198,
1,406,1972,16,0,
198,1,1371,1973,16,
0,198,1,2105,900,
1,166,1974,16,0,
198,1,2045,865,1,
1622,1975,16,0,198,
1,1931,946,1,1932,
1976,16,0,512,1,
1933,1977,16,0,198,
1,431,1978,16,0,
198,1,1585,1979,16,
0,198,1,182,1980,
16,0,198,1,1189,
1981,16,0,198,1,
1443,1982,16,0,198,
1,1695,1983,16,0,
198,1,2198,1984,16,
0,198,1,447,1985,
16,0,198,1,199,
1986,16,0,198,1,
2459,967,1,1958,1987,
16,0,198,1,2462,
974,1,1657,979,1,
2464,984,1,459,1988,
16,0,198,1,462,
1989,16,0,198,1,
2471,1990,17,1991,15,
1992,4,36,37,0,
73,0,110,0,116,
0,82,0,111,0,
116,0,82,0,111,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1993,20,
1994,4,38,73,0,
110,0,116,0,82,
0,111,0,116,0,
82,0,111,0,116,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,362,1,3,
1,2,1,1,1995,
22,1,205,1,2472,
1996,17,1997,15,1998,
4,30,37,0,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,1,-1,1,
5,1999,20,2000,4,
32,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,1,361,
1,3,1,2,1,
1,2001,22,1,204,
1,2473,2002,17,2003,
15,1998,1,-1,1,
5,2004,20,2005,4,
32,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,1,360,
1,3,1,2,1,
1,2006,22,1,203,
1,2474,2007,17,2008,
15,1998,1,-1,1,
5,2009,20,2010,4,
32,86,0,101,0,
99,0,116,0,111,
0,114,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,1,359,
1,3,1,2,1,
1,2011,22,1,202,
1,2475,2012,17,2013,
15,1906,1,-1,1,
5,2014,20,2015,4,
28,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
358,1,3,1,2,
1,1,2016,22,1,
201,1,2476,2017,17,
2018,15,1906,1,-1,
1,5,2019,20,2020,
4,26,73,0,110,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,57,0,1,357,
1,3,1,2,1,
1,2021,22,1,200,
1,2477,2022,17,2023,
15,1906,1,-1,1,
5,2024,20,2025,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
56,0,1,356,1,
3,1,2,1,1,
2026,22,1,199,1,
2227,993,1,2479,2027,
17,2028,15,1906,1,
-1,1,5,2029,20,
2030,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,54,0,1,
354,1,3,1,2,
1,1,2031,22,1,
197,1,1225,2032,16,
0,198,1,2481,2033,
17,2034,15,1906,1,
-1,1,5,2035,20,
2036,4,26,73,0,
110,0,116,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,52,0,1,
352,1,3,1,2,
1,1,2037,22,1,
195,1,2482,2038,17,
2039,15,1906,1,-1,
1,5,2040,20,2041,
4,26,73,0,110,
0,116,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,1,351,
1,3,1,2,1,
1,2042,22,1,194,
1,2483,2043,17,2044,
15,1906,1,-1,1,
5,2045,20,2046,4,
26,73,0,110,0,
116,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,350,1,
3,1,2,1,1,
2047,22,1,193,1,
1731,2048,16,0,198,
1,2485,2049,17,2050,
15,2051,4,24,37,
0,75,0,101,0,
121,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,2052,20,2053,
4,26,75,0,101,
0,121,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,1,348,
1,3,1,2,1,
1,2054,22,1,191,
1,2486,2055,17,2056,
15,2051,1,-1,1,
5,2057,20,2058,4,
26,75,0,101,0,
121,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,347,1,
3,1,2,1,1,
2059,22,1,190,1,
2487,2060,17,2061,15,
1920,1,-1,1,5,
2062,20,2063,4,28,
86,0,111,0,105,
0,100,0,65,0,
114,0,103,0,69,
0,118,0,101,0,
110,0,116,0,95,
0,56,0,1,346,
1,3,1,2,1,
1,2064,22,1,189,
1,2488,2065,17,2066,
15,1920,1,-1,1,
5,2067,20,2068,4,
28,86,0,111,0,
105,0,100,0,65,
0,114,0,103,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
345,1,3,1,2,
1,1,2069,22,1,
188,1,2489,2070,17,
2071,15,1920,1,-1,
1,5,2072,20,2073,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,54,0,
1,344,1,3,1,
2,1,1,2074,22,
1,187,1,2490,2075,
17,2076,15,1920,1,
-1,1,5,2077,20,
2078,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,53,
0,1,343,1,3,
1,2,1,1,2079,
22,1,186,1,1989,
1002,1,2492,2080,17,
2081,15,1920,1,-1,
1,5,2082,20,2083,
4,28,86,0,111,
0,105,0,100,0,
65,0,114,0,103,
0,69,0,118,0,
101,0,110,0,116,
0,95,0,51,0,
1,341,1,3,1,
2,1,1,2084,22,
1,184,1,2493,2085,
17,2086,15,1920,1,
-1,1,5,2087,20,
2088,4,28,86,0,
111,0,105,0,100,
0,65,0,114,0,
103,0,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,1,340,1,3,
1,2,1,1,2089,
22,1,183,1,2494,
2090,17,2091,15,1920,
1,-1,1,5,2092,
20,2093,4,28,86,
0,111,0,105,0,
100,0,65,0,114,
0,103,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,339,1,
3,1,2,1,1,
2094,22,1,182,1,
236,2095,16,0,198,
1,2496,2096,17,2097,
15,1928,1,-1,1,
5,2098,20,2099,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,57,0,
1,337,1,3,1,
2,1,1,2100,22,
1,180,1,2497,2101,
17,2102,15,1928,1,
-1,1,5,2103,20,
2104,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
56,0,1,336,1,
3,1,2,1,1,
2105,22,1,179,1,
2498,2106,17,2107,15,
1928,1,-1,1,5,
2108,20,2109,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
335,1,3,1,2,
1,1,2110,22,1,
178,1,2499,2111,17,
2112,15,1928,1,-1,
1,5,2113,20,2114,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,54,
0,1,334,1,3,
1,2,1,1,2115,
22,1,177,1,2500,
2116,17,2117,15,1928,
1,-1,1,5,2118,
20,2119,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,53,0,1,333,
1,3,1,2,1,
1,2120,22,1,176,
1,2501,2121,17,2122,
15,1928,1,-1,1,
5,2123,20,2124,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,332,1,3,1,
2,1,1,2125,22,
1,175,1,2502,2126,
17,2127,15,1928,1,
-1,1,5,2128,20,
2129,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,1,331,1,
3,1,2,1,1,
2130,22,1,174,1,
2503,2131,17,2132,15,
1928,1,-1,1,5,
2133,20,2134,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,1,
330,1,3,1,2,
1,1,2135,22,1,
173,1,2504,2136,17,
2137,15,1928,1,-1,
1,5,2138,20,2139,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,329,1,3,
1,2,1,1,2140,
22,1,172,1,2505,
2141,16,0,445,1,
217,2142,16,0,198,
1,1756,2143,16,0,
198,1,17,2144,19,
164,1,17,2145,5,
130,1,1,2146,17,
2147,15,2148,4,18,
37,0,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,1,-1,
1,5,2149,20,2150,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
55,0,1,328,1,
3,1,2,1,1,
2151,22,1,171,1,
2,2152,17,2153,15,
2148,1,-1,1,5,
2154,20,2155,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,54,0,
1,327,1,3,1,
2,1,1,2156,22,
1,170,1,3,2157,
17,2158,15,2148,1,
-1,1,5,2159,20,
2160,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,53,0,1,326,
1,3,1,2,1,
1,2161,22,1,169,
1,4,2162,17,2163,
15,2148,1,-1,1,
5,2164,20,2165,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,52,
0,1,325,1,3,
1,2,1,1,2166,
22,1,168,1,5,
2167,17,2168,15,2148,
1,-1,1,5,2169,
20,2170,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,51,0,1,
324,1,3,1,2,
1,1,2171,22,1,
167,1,6,2172,17,
2173,15,2148,1,-1,
1,5,2174,20,2175,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
50,0,1,323,1,
3,1,2,1,1,
2176,22,1,166,1,
7,2177,17,2178,15,
2148,1,-1,1,5,
2179,20,2180,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,49,0,
1,322,1,3,1,
2,1,1,2181,22,
1,165,1,1514,1194,
1,9,1199,1,10,
1819,1,262,1205,1,
1267,1211,1,2524,2182,
17,2183,15,2184,4,
36,37,0,86,0,
101,0,99,0,116,
0,111,0,114,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,2185,20,2186,4,
38,86,0,101,0,
99,0,116,0,111,
0,114,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
201,1,3,1,3,
1,2,2187,22,1,
43,1,2525,2188,17,
2189,15,2190,4,60,
37,0,86,0,101,
0,99,0,116,0,
111,0,114,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
1,-1,1,5,2191,
20,2192,4,62,86,
0,101,0,99,0,
116,0,111,0,114,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,196,1,3,
1,2,1,1,2193,
22,1,38,1,1773,
2194,16,0,252,1,
19,1233,1,20,2195,
16,0,162,1,2281,
1240,1,2533,2196,17,
2197,15,2198,4,54,
37,0,73,0,110,
0,116,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,2199,20,
2200,4,56,73,0,
110,0,116,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
195,1,3,1,2,
1,1,2201,22,1,
37,1,2534,2202,16,
0,488,1,30,1825,
1,2541,2203,17,2204,
15,2205,4,30,37,
0,75,0,101,0,
121,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,2206,20,
2207,4,32,75,0,
101,0,121,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,199,1,3,1,
3,1,2,2208,22,
1,41,1,283,1258,
1,2543,2209,16,0,
503,1,2548,2210,16,
0,633,1,1010,2211,
16,0,668,1,40,
1263,1,41,1830,1,
42,1834,1,2553,1840,
1,44,1269,1,1260,
1182,1,47,1270,1,
1303,1394,1,49,1282,
1,50,1287,1,48,
1276,1,2562,2212,16,
0,646,1,305,1297,
1,51,1292,1,2733,
2213,16,0,169,1,
61,2214,16,0,205,
1,63,1308,1,1521,
1216,1,66,1315,1,
67,1320,1,68,1325,
1,69,1330,1,70,
1335,1,73,2215,16,
0,215,1,74,1340,
1,1013,1345,1,2335,
2216,16,0,254,1,
1332,1350,1,1048,1431,
1,82,1367,1,1840,
2217,16,0,318,1,
2516,2218,17,2219,15,
2220,4,66,37,0,
73,0,110,0,116,
0,82,0,111,0,
116,0,82,0,111,
0,116,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,2221,20,
2222,4,68,73,0,
110,0,116,0,82,
0,111,0,116,0,
82,0,111,0,116,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,197,1,3,
1,6,1,5,2223,
22,1,39,1,2517,
2224,16,0,463,1,
328,1389,1,1094,2225,
16,0,748,1,1096,
1399,1,93,1405,1,
1550,1410,1,525,1302,
1,2526,2226,16,0,
286,1,1002,1679,1,
827,1418,1,1011,1188,
1,107,1425,1,1114,
1430,1,2542,2227,17,
2228,15,2229,4,54,
37,0,75,0,101,
0,121,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,2230,20,
2231,4,56,75,0,
101,0,121,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
194,1,3,1,2,
1,1,2232,22,1,
36,1,1871,2233,16,
0,328,1,1370,1539,
1,1478,1544,1,118,
1442,1,1123,1447,1,
371,1452,1,1377,1458,
1,375,1463,1,1882,
2234,16,0,341,1,
377,1468,1,352,1436,
1,379,1473,1,1341,
1384,1,130,1501,1,
2074,2235,16,0,635,
1,373,1496,1,1012,
2236,16,0,670,1,
380,1478,1,143,1506,
1,1152,1512,1,1406,
1517,1,1159,1524,1,
157,1529,1,1413,1534,
1,883,1484,1,2512,
1812,1,1296,1253,1,
172,1555,1,1665,1560,
1,1939,2237,16,0,
458,1,1188,1565,1,
1442,1570,1,188,1604,
1,942,1576,1,1195,
1582,1,1449,1587,1,
1701,1592,1,447,1597,
1,205,1609,1,2467,
1850,1,464,1856,1,
2724,1861,1,2197,2238,
16,0,742,1,1224,
1614,1,223,1619,1,
1730,1624,1,476,1629,
1,477,1635,1,1231,
1640,1,479,1645,1,
480,1650,1,1485,1656,
1,459,1863,1,242,
1664,1,478,1669,1,
481,1865,1,1001,1674,
1,2508,1870,1,18,
2239,19,541,1,18,
2240,5,84,1,1011,
1188,1,1012,2241,16,
0,539,1,1013,1345,
1,262,1205,1,1267,
2242,16,0,539,1,
515,2243,16,0,539,
1,1521,2244,16,0,
539,1,525,1302,1,
283,1258,1,2299,2245,
16,0,539,1,42,
2246,16,0,539,1,
40,1263,1,44,1269,
1,47,1270,1,1303,
2247,16,0,539,1,
1555,2248,16,0,539,
1,50,1287,1,48,
1276,1,49,1282,1,
51,1292,1,63,1308,
1,305,1297,1,66,
1315,1,67,1320,1,
68,1325,1,69,1330,
1,70,1335,1,73,
2249,16,0,539,1,
74,1340,1,328,1389,
1,1048,2250,16,0,
539,1,82,2251,16,
0,539,1,1840,2252,
16,0,539,1,1591,
2253,16,0,539,1,
1341,2254,16,0,539,
1,1096,1399,1,93,
1405,1,352,1436,1,
107,2255,16,0,539,
1,1114,1430,1,118,
2256,16,0,539,1,
1123,2257,16,0,539,
1,371,1452,1,1628,
2258,16,0,539,1,
375,1463,1,1882,2259,
16,0,539,1,377,
1468,1,379,1473,1,
380,1478,1,883,2260,
16,0,539,1,373,
1496,1,130,2261,16,
0,539,1,143,2262,
16,0,539,1,387,
2263,16,0,539,1,
1159,2264,16,0,539,
1,157,2265,16,0,
539,1,1413,2266,16,
0,539,1,1665,2267,
16,0,539,1,412,
2268,16,0,539,1,
1377,2269,16,0,539,
1,172,2270,16,0,
539,1,1939,2271,16,
0,539,1,437,2272,
16,0,539,1,188,
2273,16,0,539,1,
942,2274,16,0,539,
1,1195,2275,16,0,
539,1,1449,2276,16,
0,539,1,1701,2277,
16,0,539,1,447,
1597,1,205,2278,16,
0,539,1,827,2279,
16,0,539,1,223,
2280,16,0,539,1,
476,1629,1,477,1635,
1,1231,2281,16,0,
539,1,479,1645,1,
480,1650,1,1485,2282,
16,0,539,1,1737,
2283,16,0,539,1,
2746,2284,16,0,539,
1,242,2285,16,0,
539,1,478,1669,1,
1001,1674,1,1002,1679,
1,19,2286,19,239,
1,19,2287,5,176,
1,256,2288,16,0,
237,1,1261,2289,16,
0,237,1,1011,1188,
1,1012,2290,16,0,
510,1,2458,961,1,
262,1205,1,1267,2291,
16,0,510,1,2021,
804,1,1521,2292,16,
0,510,1,1775,2293,
16,0,237,1,2029,
811,1,2030,817,1,
2031,822,1,2032,827,
1,2033,832,1,277,
2294,16,0,237,1,
2035,838,1,2037,843,
1,2039,848,1,32,
2295,16,0,237,1,
2464,984,1,2293,2296,
16,0,237,1,2043,
860,1,2045,865,1,
2299,2297,16,0,510,
1,41,2298,16,0,
237,1,42,2299,16,
0,510,1,40,1263,
1,44,1269,1,43,
2300,16,0,237,1,
1804,2301,16,0,237,
1,48,1276,1,49,
1282,1,47,1270,1,
51,1292,1,52,2302,
16,0,237,1,50,
1287,1,305,1297,1,
1096,1399,1,1515,2303,
16,0,237,1,2318,
2304,16,0,237,1,
283,1258,1,63,1308,
1,66,1315,1,67,
1320,1,68,1325,1,
69,1330,1,70,1335,
1,71,2305,16,0,
237,1,2746,2306,16,
0,510,1,73,2307,
16,0,510,1,74,
1340,1,1013,1345,1,
76,2308,16,0,237,
1,1834,2309,16,0,
237,1,2337,2310,16,
0,237,1,79,2311,
16,0,237,1,1335,
2312,16,0,237,1,
299,2313,16,0,237,
1,82,2314,16,0,
510,1,1840,2315,16,
0,510,1,1297,2316,
16,0,237,1,85,
2317,16,0,237,1,
1341,2318,16,0,510,
1,89,2319,16,0,
237,1,1303,2320,16,
0,510,1,509,2321,
16,0,237,1,93,
1405,1,322,2322,16,
0,237,1,97,2323,
16,0,237,1,2041,
854,1,1555,2324,16,
0,510,1,827,2325,
16,0,510,1,102,
2326,16,0,237,1,
1860,907,1,1803,873,
1,2364,913,1,107,
2327,16,0,510,1,
1114,1430,1,112,2328,
16,0,237,1,1117,
2329,16,0,237,1,
352,1436,1,1873,921,
1,118,2330,16,0,
510,1,1123,2331,16,
0,510,1,371,1452,
1,515,2332,16,0,
510,1,1377,2333,16,
0,510,1,124,2334,
16,0,237,1,1882,
2335,16,0,510,1,
377,1468,1,379,1473,
1,380,1478,1,130,
2336,16,0,510,1,
346,2337,16,0,237,
1,2075,2338,16,0,
237,1,373,1496,1,
387,2339,16,0,510,
1,137,2340,16,0,
237,1,143,2341,16,
0,510,1,1901,2342,
16,0,237,1,1048,
2343,16,0,510,1,
1153,2344,16,0,237,
1,375,1463,1,151,
2345,16,0,237,1,
1407,2346,16,0,237,
1,2740,2347,16,0,
237,1,2413,2348,16,
0,237,1,1159,2349,
16,0,510,1,381,
2350,16,0,237,1,
157,2351,16,0,510,
1,1413,2352,16,0,
510,1,883,2353,16,
0,510,1,1371,2354,
16,0,237,1,328,
1389,1,2105,900,1,
2106,2355,16,0,237,
1,166,2356,16,0,
237,1,525,2357,16,
0,237,1,1622,2358,
16,0,237,1,406,
2359,16,0,237,1,
1574,885,1,172,2360,
16,0,510,1,1931,
946,1,412,2361,16,
0,510,1,1933,2362,
16,0,237,1,1876,
2363,16,0,237,1,
431,2364,16,0,237,
1,1585,2365,16,0,
237,1,182,2366,16,
0,237,1,1628,2367,
16,0,510,1,1189,
2368,16,0,237,1,
437,2369,16,0,510,
1,1591,2370,16,0,
510,1,188,2371,16,
0,510,1,1695,2372,
16,0,237,1,2198,
2373,16,0,237,1,
1195,2374,16,0,510,
1,1449,2375,16,0,
510,1,1701,2376,16,
0,510,1,447,2377,
16,0,237,1,199,
2378,16,0,237,1,
2459,967,1,1958,2379,
16,0,237,1,2462,
974,1,1657,979,1,
205,2380,16,0,510,
1,1659,2381,16,0,
237,1,459,2382,16,
0,237,1,462,2383,
16,0,237,1,1665,
2384,16,0,510,1,
217,2385,16,0,237,
1,2227,993,1,942,
2386,16,0,510,1,
1225,2387,16,0,237,
1,223,2388,16,0,
510,1,1479,2389,16,
0,237,1,1731,2390,
16,0,237,1,477,
1635,1,1231,2391,16,
0,510,1,479,1645,
1,480,1650,1,1485,
2392,16,0,510,1,
1737,2393,16,0,510,
1,1989,1002,1,1990,
2394,16,0,237,1,
1443,2395,16,0,237,
1,236,2396,16,0,
237,1,2136,928,1,
476,1629,1,242,2397,
16,0,510,1,478,
1669,1,1939,2398,16,
0,510,1,1001,1674,
1,1002,1679,1,1756,
2399,16,0,237,1,
20,2400,19,477,1,
20,2401,5,84,1,
1011,1188,1,1012,2402,
16,0,475,1,1013,
1345,1,262,1205,1,
1267,2403,16,0,475,
1,515,2404,16,0,
475,1,1521,2405,16,
0,475,1,525,1302,
1,283,1258,1,2299,
2406,16,0,475,1,
42,2407,16,0,475,
1,40,1263,1,44,
1269,1,47,1270,1,
1303,2408,16,0,475,
1,1555,2409,16,0,
475,1,50,1287,1,
48,1276,1,49,1282,
1,51,1292,1,63,
1308,1,305,1297,1,
66,1315,1,67,1320,
1,68,1325,1,69,
1330,1,70,1335,1,
73,2410,16,0,475,
1,74,1340,1,328,
2411,16,0,475,1,
1048,2412,16,0,475,
1,82,2413,16,0,
475,1,1840,2414,16,
0,475,1,1591,2415,
16,0,475,1,1341,
2416,16,0,475,1,
1096,1399,1,93,1405,
1,352,2417,16,0,
475,1,107,2418,16,
0,475,1,1114,1430,
1,118,2419,16,0,
475,1,1123,2420,16,
0,475,1,371,1452,
1,1628,2421,16,0,
475,1,375,1463,1,
1882,2422,16,0,475,
1,377,1468,1,379,
1473,1,380,1478,1,
883,2423,16,0,475,
1,373,1496,1,130,
2424,16,0,475,1,
143,2425,16,0,475,
1,387,2426,16,0,
475,1,1159,2427,16,
0,475,1,157,2428,
16,0,475,1,1413,
2429,16,0,475,1,
1665,2430,16,0,475,
1,412,2431,16,0,
475,1,1377,2432,16,
0,475,1,172,2433,
16,0,475,1,1939,
2434,16,0,475,1,
437,2435,16,0,475,
1,188,2436,16,0,
475,1,942,2437,16,
0,475,1,1195,2438,
16,0,475,1,1449,
2439,16,0,475,1,
1701,2440,16,0,475,
1,447,1597,1,205,
2441,16,0,475,1,
827,2442,16,0,475,
1,223,2443,16,0,
475,1,476,1629,1,
477,1635,1,1231,2444,
16,0,475,1,479,
1645,1,480,1650,1,
1485,2445,16,0,475,
1,1737,2446,16,0,
475,1,2746,2447,16,
0,475,1,242,2448,
16,0,475,1,478,
1669,1,1001,1674,1,
1002,1679,1,21,2449,
19,444,1,21,2450,
5,84,1,1011,1188,
1,1012,2451,16,0,
442,1,1013,1345,1,
262,1205,1,1267,2452,
16,0,442,1,515,
2453,16,0,442,1,
1521,2454,16,0,442,
1,525,1302,1,283,
1258,1,2299,2455,16,
0,442,1,42,2456,
16,0,442,1,40,
1263,1,44,1269,1,
47,1270,1,1303,2457,
16,0,442,1,1555,
2458,16,0,442,1,
50,1287,1,48,1276,
1,49,1282,1,51,
1292,1,63,1308,1,
305,1297,1,66,1315,
1,67,1320,1,68,
1325,1,69,1330,1,
70,1335,1,73,2459,
16,0,442,1,74,
1340,1,328,2460,16,
0,442,1,1048,2461,
16,0,442,1,82,
2462,16,0,442,1,
1840,2463,16,0,442,
1,1591,2464,16,0,
442,1,1341,2465,16,
0,442,1,1096,1399,
1,93,1405,1,352,
2466,16,0,442,1,
107,2467,16,0,442,
1,1114,1430,1,118,
2468,16,0,442,1,
1123,2469,16,0,442,
1,371,1452,1,1628,
2470,16,0,442,1,
375,1463,1,1882,2471,
16,0,442,1,377,
1468,1,379,1473,1,
380,1478,1,883,2472,
16,0,442,1,373,
1496,1,130,2473,16,
0,442,1,143,2474,
16,0,442,1,387,
2475,16,0,442,1,
1159,2476,16,0,442,
1,157,2477,16,0,
442,1,1413,2478,16,
0,442,1,1665,2479,
16,0,442,1,412,
2480,16,0,442,1,
1377,2481,16,0,442,
1,172,2482,16,0,
442,1,1939,2483,16,
0,442,1,437,2484,
16,0,442,1,188,
2485,16,0,442,1,
942,2486,16,0,442,
1,1195,2487,16,0,
442,1,1449,2488,16,
0,442,1,1701,2489,
16,0,442,1,447,
1597,1,205,2490,16,
0,442,1,827,2491,
16,0,442,1,223,
2492,16,0,442,1,
476,1629,1,477,1635,
1,1231,2493,16,0,
442,1,479,1645,1,
480,1650,1,1485,2494,
16,0,442,1,1737,
2495,16,0,442,1,
2746,2496,16,0,442,
1,242,2497,16,0,
442,1,478,1669,1,
1001,1674,1,1002,1679,
1,22,2498,19,395,
1,22,2499,5,84,
1,1011,1188,1,1012,
2500,16,0,393,1,
1013,1345,1,262,1205,
1,1267,2501,16,0,
393,1,515,2502,16,
0,393,1,1521,2503,
16,0,393,1,525,
1302,1,283,1258,1,
2299,2504,16,0,393,
1,42,2505,16,0,
393,1,40,1263,1,
44,1269,1,47,1270,
1,1303,2506,16,0,
393,1,1555,2507,16,
0,393,1,50,1287,
1,48,1276,1,49,
1282,1,51,1292,1,
63,1308,1,305,1297,
1,66,1315,1,67,
1320,1,68,1325,1,
69,1330,1,70,1335,
1,73,2508,16,0,
393,1,74,1340,1,
328,2509,16,0,393,
1,1048,2510,16,0,
393,1,82,2511,16,
0,393,1,1840,2512,
16,0,393,1,1591,
2513,16,0,393,1,
1341,2514,16,0,393,
1,1096,1399,1,93,
1405,1,352,2515,16,
0,393,1,107,2516,
16,0,393,1,1114,
1430,1,118,2517,16,
0,393,1,1123,2518,
16,0,393,1,371,
1452,1,1628,2519,16,
0,393,1,375,1463,
1,1882,2520,16,0,
393,1,377,1468,1,
379,1473,1,380,1478,
1,883,2521,16,0,
393,1,373,1496,1,
130,2522,16,0,393,
1,143,2523,16,0,
393,1,387,2524,16,
0,393,1,1159,2525,
16,0,393,1,157,
2526,16,0,393,1,
1413,2527,16,0,393,
1,1665,2528,16,0,
393,1,412,2529,16,
0,393,1,1377,2530,
16,0,393,1,172,
2531,16,0,393,1,
1939,2532,16,0,393,
1,437,2533,16,0,
393,1,188,2534,16,
0,393,1,942,2535,
16,0,393,1,1195,
2536,16,0,393,1,
1449,2537,16,0,393,
1,1701,2538,16,0,
393,1,447,1597,1,
205,2539,16,0,393,
1,827,2540,16,0,
393,1,223,2541,16,
0,393,1,476,1629,
1,477,1635,1,1231,
2542,16,0,393,1,
479,1645,1,480,1650,
1,1485,2543,16,0,
393,1,1737,2544,16,
0,393,1,2746,2545,
16,0,393,1,242,
2546,16,0,393,1,
478,1669,1,1001,1674,
1,1002,1679,1,23,
2547,19,555,1,23,
2548,5,38,1,1901,
2549,16,0,553,1,
2075,2550,16,0,553,
1,1860,907,1,1803,
873,1,1804,2551,16,
0,553,1,2413,2552,
16,0,553,1,2198,
2553,16,0,553,1,
1873,921,1,1657,979,
1,1989,1002,1,1990,
2554,16,0,553,1,
1775,2555,16,0,553,
1,32,2556,16,0,
553,1,2105,900,1,
2106,2557,16,0,553,
1,2364,913,1,2227,
993,1,2337,2558,16,
0,553,1,2021,804,
1,2458,961,1,2459,
967,1,2462,974,1,
2136,928,1,2464,984,
1,2029,811,1,2030,
817,1,2031,822,1,
2032,827,1,2033,832,
1,2035,838,1,2037,
843,1,2039,848,1,
1931,946,1,2041,854,
1,2043,860,1,2045,
865,1,1574,885,1,
1958,2559,16,0,553,
1,24,2560,19,188,
1,24,2561,5,5,
1,44,2562,16,0,
186,1,377,2563,16,
0,591,1,40,2564,
16,0,760,1,63,
2565,16,0,207,1,
373,2566,16,0,587,
1,25,2567,19,307,
1,25,2568,5,177,
1,256,2569,16,0,
596,1,1261,2570,16,
0,596,1,1011,1188,
1,1012,2571,16,0,
305,1,2458,961,1,
262,1205,1,1267,2572,
16,0,305,1,2021,
804,1,1521,2573,16,
0,305,1,1775,2574,
16,0,596,1,2029,
811,1,2030,817,1,
2031,822,1,2032,827,
1,2033,832,1,277,
2575,16,0,596,1,
2035,838,1,2037,843,
1,2039,848,1,32,
2576,16,0,596,1,
2464,984,1,2293,2577,
16,0,596,1,2043,
860,1,2045,865,1,
2299,2578,16,0,305,
1,41,2579,16,0,
596,1,42,2580,16,
0,305,1,40,1263,
1,44,1269,1,43,
2581,16,0,596,1,
1804,2582,16,0,596,
1,48,1276,1,49,
1282,1,47,1270,1,
51,1292,1,52,2583,
16,0,596,1,50,
1287,1,305,1297,1,
1096,1399,1,1515,2584,
16,0,596,1,2318,
2585,16,0,596,1,
62,2586,16,0,596,
1,63,1308,1,66,
1315,1,67,1320,1,
68,1325,1,69,1330,
1,70,1335,1,71,
2587,16,0,596,1,
283,1258,1,73,2588,
16,0,305,1,74,
1340,1,1013,1345,1,
76,2589,16,0,596,
1,1834,2590,16,0,
596,1,2337,2591,16,
0,596,1,79,2592,
16,0,596,1,1335,
2593,16,0,596,1,
299,2594,16,0,596,
1,82,2595,16,0,
305,1,1840,2596,16,
0,305,1,1297,2597,
16,0,596,1,85,
2598,16,0,596,1,
1341,2599,16,0,305,
1,89,2600,16,0,
596,1,1303,2601,16,
0,305,1,509,2602,
16,0,596,1,93,
1405,1,322,2603,16,
0,596,1,97,2604,
16,0,596,1,2041,
854,1,1555,2605,16,
0,305,1,827,2606,
16,0,305,1,102,
2607,16,0,596,1,
1860,907,1,1803,873,
1,2364,913,1,107,
2608,16,0,305,1,
1114,1430,1,112,2609,
16,0,596,1,1117,
2610,16,0,596,1,
352,1436,1,1873,921,
1,118,1442,1,1123,
2611,16,0,305,1,
371,1452,1,515,2612,
16,0,305,1,1377,
2613,16,0,305,1,
124,2614,16,0,596,
1,1882,2615,16,0,
305,1,377,1468,1,
379,1473,1,380,1478,
1,130,1501,1,346,
2616,16,0,596,1,
2075,2617,16,0,596,
1,373,1496,1,387,
2618,16,0,305,1,
137,2619,16,0,596,
1,143,2620,16,0,
305,1,1901,2621,16,
0,596,1,1048,1431,
1,1153,2622,16,0,
596,1,375,1463,1,
151,2623,16,0,596,
1,1407,2624,16,0,
596,1,2740,2625,16,
0,596,1,2413,2626,
16,0,596,1,1159,
2627,16,0,305,1,
381,2628,16,0,596,
1,157,2629,16,0,
305,1,1413,2630,16,
0,305,1,883,2631,
16,0,305,1,1371,
2632,16,0,596,1,
328,1389,1,2105,900,
1,2106,2633,16,0,
596,1,166,2634,16,
0,596,1,525,2635,
16,0,596,1,1622,
2636,16,0,596,1,
406,2637,16,0,596,
1,1574,885,1,172,
1555,1,1931,946,1,
412,2638,16,0,305,
1,1933,2639,16,0,
596,1,1876,2640,16,
0,596,1,431,2641,
16,0,596,1,1585,
2642,16,0,596,1,
182,2643,16,0,596,
1,1628,2644,16,0,
305,1,1189,2645,16,
0,596,1,437,2646,
16,0,305,1,1591,
2647,16,0,305,1,
188,1604,1,1695,2648,
16,0,596,1,2198,
2649,16,0,596,1,
1195,2650,16,0,305,
1,1449,2651,16,0,
305,1,1701,2652,16,
0,305,1,447,2653,
16,0,596,1,199,
2654,16,0,596,1,
2459,967,1,1958,2655,
16,0,596,1,2462,
974,1,1657,979,1,
205,2656,16,0,305,
1,1659,2657,16,0,
596,1,459,2658,16,
0,596,1,462,2659,
16,0,596,1,1665,
2660,16,0,305,1,
217,2661,16,0,596,
1,2227,993,1,942,
1576,1,1225,2662,16,
0,596,1,223,2663,
16,0,305,1,1479,
2664,16,0,596,1,
1731,2665,16,0,596,
1,477,1635,1,1231,
2666,16,0,305,1,
479,1645,1,480,1650,
1,1485,2667,16,0,
305,1,1737,2668,16,
0,305,1,1989,1002,
1,1990,2669,16,0,
596,1,1443,2670,16,
0,596,1,236,2671,
16,0,596,1,2136,
928,1,476,1629,1,
242,2672,16,0,305,
1,478,1669,1,1939,
2673,16,0,305,1,
2746,2674,16,0,305,
1,1001,1674,1,1002,
1679,1,1756,2675,16,
0,596,1,26,2676,
19,323,1,26,2677,
5,84,1,1011,1188,
1,1012,2678,16,0,
321,1,1013,1345,1,
262,1205,1,1267,2679,
16,0,321,1,515,
2680,16,0,740,1,
1521,2681,16,0,321,
1,525,1302,1,283,
1258,1,2299,2682,16,
0,321,1,42,2683,
16,0,321,1,40,
1263,1,44,1269,1,
47,1270,1,1303,2684,
16,0,321,1,1555,
2685,16,0,321,1,
50,1287,1,48,1276,
1,49,1282,1,51,
1292,1,63,1308,1,
305,1297,1,66,1315,
1,67,1320,1,68,
1325,1,69,1330,1,
70,1335,1,73,2686,
16,0,321,1,74,
1340,1,328,1389,1,
1048,1431,1,82,2687,
16,0,321,1,1840,
2688,16,0,321,1,
1591,2689,16,0,321,
1,1341,2690,16,0,
321,1,1096,1399,1,
93,1405,1,352,1436,
1,107,2691,16,0,
321,1,1114,1430,1,
118,1442,1,1123,2692,
16,0,321,1,371,
1452,1,1628,2693,16,
0,321,1,375,1463,
1,1882,2694,16,0,
321,1,377,1468,1,
379,1473,1,380,1478,
1,883,2695,16,0,
321,1,373,1496,1,
130,1501,1,143,2696,
16,0,321,1,387,
2697,16,0,321,1,
1159,2698,16,0,321,
1,157,2699,16,0,
321,1,1413,2700,16,
0,321,1,1665,2701,
16,0,321,1,412,
2702,16,0,321,1,
1377,2703,16,0,321,
1,172,1555,1,1939,
2704,16,0,321,1,
437,2705,16,0,665,
1,188,1604,1,942,
1576,1,1195,2706,16,
0,321,1,1449,2707,
16,0,321,1,1701,
2708,16,0,321,1,
447,1597,1,205,2709,
16,0,321,1,827,
2710,16,0,321,1,
223,2711,16,0,321,
1,476,1629,1,477,
1635,1,1231,2712,16,
0,321,1,479,1645,
1,480,1650,1,1485,
2713,16,0,321,1,
1737,2714,16,0,321,
1,2746,2715,16,0,
321,1,242,2716,16,
0,321,1,478,1669,
1,1001,1674,1,1002,
1679,1,27,2717,19,
673,1,27,2718,5,
95,1,256,2719,16,
0,671,1,1261,2720,
16,0,671,1,509,
2721,16,0,671,1,
1515,2722,16,0,671,
1,2021,804,1,1775,
2723,16,0,671,1,
2029,811,1,2030,817,
1,2031,822,1,2032,
827,1,2033,832,1,
277,2724,16,0,671,
1,2035,838,1,2037,
843,1,2039,848,1,
32,2725,16,0,671,
1,2041,854,1,2293,
2726,16,0,671,1,
2043,860,1,2045,865,
1,41,2727,16,0,
671,1,1297,2728,16,
0,671,1,43,2729,
16,0,671,1,1803,
873,1,1804,2730,16,
0,671,1,299,2731,
16,0,671,1,52,
2732,16,0,671,1,
2318,2733,16,0,671,
1,62,2734,16,0,
671,1,2075,2735,16,
0,671,1,1574,885,
1,71,2736,16,0,
671,1,76,2737,16,
0,671,1,1834,2738,
16,0,671,1,2337,
2739,16,0,671,1,
79,2740,16,0,671,
1,1335,2741,16,0,
671,1,322,2742,16,
0,671,1,85,2743,
16,0,671,1,89,
2744,16,0,671,1,
346,2745,16,0,671,
1,2105,900,1,2106,
2746,16,0,671,1,
97,2747,16,0,671,
1,1860,907,1,2364,
913,1,102,2748,16,
0,671,1,112,2749,
16,0,671,1,1117,
2750,16,0,671,1,
1873,921,1,1876,2751,
16,0,671,1,124,
2752,16,0,671,1,
2136,928,1,381,2753,
16,0,671,1,525,
2754,16,0,671,1,
137,2755,16,0,671,
1,1901,2756,16,0,
671,1,1153,2757,16,
0,671,1,151,2758,
16,0,671,1,1407,
2759,16,0,671,1,
1659,2760,16,0,671,
1,2413,2761,16,0,
671,1,406,2762,16,
0,671,1,1371,2763,
16,0,671,1,166,
2764,16,0,671,1,
1622,2765,16,0,671,
1,1931,946,1,1933,
2766,16,0,671,1,
431,2767,16,0,671,
1,1585,2768,16,0,
671,1,182,2769,16,
0,671,1,1189,2770,
16,0,671,1,1443,
2771,16,0,671,1,
1695,2772,16,0,671,
1,2198,2773,16,0,
671,1,447,2774,16,
0,671,1,2458,961,
1,2459,967,1,1958,
2775,16,0,671,1,
2462,974,1,1657,979,
1,2464,984,1,199,
2776,16,0,671,1,
459,2777,16,0,671,
1,462,2778,16,0,
671,1,217,2779,16,
0,671,1,2227,993,
1,1225,2780,16,0,
671,1,1479,2781,16,
0,671,1,1731,2782,
16,0,671,1,2740,
2783,16,0,671,1,
1989,1002,1,1990,2784,
16,0,671,1,236,
2785,16,0,671,1,
1756,2786,16,0,671,
1,28,2787,19,705,
1,28,2788,5,60,
1,328,1389,1,223,
1619,1,1096,1399,1,
118,1442,1,883,1484,
1,525,1302,1,1001,
1674,1,130,1501,1,
459,1863,1,1114,1430,
1,352,1436,1,447,
1597,1,464,1856,1,
1011,1188,1,1013,1345,
1,242,1664,1,143,
1506,1,40,1263,1,
41,1830,1,42,1834,
1,479,1645,1,44,
1269,1,481,1865,1,
373,1496,1,47,1270,
1,157,1529,1,49,
1282,1,50,1287,1,
48,1276,1,379,1473,
1,380,1478,1,51,
1292,1,476,1629,1,
371,1452,1,478,1669,
1,1048,1431,1,375,
1463,1,172,1555,1,
262,1205,1,283,1258,
1,63,1308,1,67,
1320,1,68,1325,1,
69,1330,1,66,1315,
1,461,2789,16,0,
703,1,74,1340,1,
377,1468,1,1002,1679,
1,70,1335,1,188,
1604,1,82,1367,1,
305,1297,1,477,1635,
1,827,1418,1,93,
1405,1,480,1650,1,
205,1609,1,942,1576,
1,107,1425,1,29,
2790,19,295,1,29,
2791,5,84,1,1011,
1188,1,1012,2792,16,
0,293,1,1013,1345,
1,262,1205,1,1267,
2793,16,0,293,1,
515,2794,16,0,293,
1,1521,2795,16,0,
293,1,525,1302,1,
283,1258,1,2299,2796,
16,0,293,1,42,
2797,16,0,293,1,
40,1263,1,44,1269,
1,47,1270,1,1303,
2798,16,0,293,1,
1555,2799,16,0,293,
1,50,1287,1,48,
1276,1,49,1282,1,
51,1292,1,63,1308,
1,305,1297,1,66,
1315,1,67,1320,1,
68,1325,1,69,1330,
1,70,1335,1,73,
2800,16,0,293,1,
74,1340,1,328,1389,
1,1048,1431,1,82,
2801,16,0,293,1,
1840,2802,16,0,293,
1,1591,2803,16,0,
293,1,1341,2804,16,
0,293,1,1096,1399,
1,93,1405,1,352,
1436,1,107,2805,16,
0,293,1,1114,1430,
1,118,1442,1,1123,
2806,16,0,293,1,
371,1452,1,1628,2807,
16,0,293,1,375,
1463,1,1882,2808,16,
0,293,1,377,1468,
1,379,1473,1,380,
1478,1,883,2809,16,
0,293,1,373,1496,
1,130,1501,1,143,
1506,1,387,2810,16,
0,293,1,1159,2811,
16,0,293,1,157,
1529,1,1413,2812,16,
0,293,1,1665,2813,
16,0,293,1,412,
2814,16,0,293,1,
1377,2815,16,0,293,
1,172,1555,1,1939,
2816,16,0,293,1,
437,2817,16,0,293,
1,188,1604,1,942,
1576,1,1195,2818,16,
0,293,1,1449,2819,
16,0,293,1,1701,
2820,16,0,293,1,
447,1597,1,205,2821,
16,0,293,1,827,
2822,16,0,293,1,
223,2823,16,0,293,
1,476,1629,1,477,
1635,1,1231,2824,16,
0,293,1,479,1645,
1,480,1650,1,1485,
2825,16,0,293,1,
1737,2826,16,0,293,
1,2746,2827,16,0,
293,1,242,2828,16,
0,293,1,478,1669,
1,1001,1674,1,1002,
1679,1,30,2829,19,
282,1,30,2830,5,
84,1,1011,1188,1,
1012,2831,16,0,280,
1,1013,1345,1,262,
1205,1,1267,2832,16,
0,280,1,515,2833,
16,0,280,1,1521,
2834,16,0,280,1,
525,1302,1,283,1258,
1,2299,2835,16,0,
280,1,42,2836,16,
0,280,1,40,1263,
1,44,1269,1,47,
1270,1,1303,2837,16,
0,280,1,1555,2838,
16,0,280,1,50,
1287,1,48,1276,1,
49,1282,1,51,1292,
1,63,1308,1,305,
1297,1,66,1315,1,
67,1320,1,68,1325,
1,69,1330,1,70,
1335,1,73,2839,16,
0,280,1,74,1340,
1,328,1389,1,1048,
1431,1,82,2840,16,
0,280,1,1840,2841,
16,0,280,1,1591,
2842,16,0,280,1,
1341,2843,16,0,280,
1,1096,1399,1,93,
1405,1,352,1436,1,
107,2844,16,0,280,
1,1114,1430,1,118,
1442,1,1123,2845,16,
0,280,1,371,1452,
1,1628,2846,16,0,
280,1,375,1463,1,
1882,2847,16,0,280,
1,377,1468,1,379,
1473,1,380,1478,1,
883,2848,16,0,280,
1,373,1496,1,130,
1501,1,143,1506,1,
387,2849,16,0,280,
1,1159,2850,16,0,
280,1,157,1529,1,
1413,2851,16,0,280,
1,1665,2852,16,0,
280,1,412,2853,16,
0,280,1,1377,2854,
16,0,280,1,172,
1555,1,1939,2855,16,
0,280,1,437,2856,
16,0,280,1,188,
1604,1,942,1576,1,
1195,2857,16,0,280,
1,1449,2858,16,0,
280,1,1701,2859,16,
0,280,1,447,1597,
1,205,2860,16,0,
280,1,827,2861,16,
0,280,1,223,2862,
16,0,280,1,476,
1629,1,477,1635,1,
1231,2863,16,0,280,
1,479,1645,1,480,
1650,1,1485,2864,16,
0,280,1,1737,2865,
16,0,280,1,2746,
2866,16,0,280,1,
242,2867,16,0,280,
1,478,1669,1,1001,
1674,1,1002,1679,1,
31,2868,19,268,1,
31,2869,5,84,1,
1011,1188,1,1012,2870,
16,0,266,1,1013,
1345,1,262,1205,1,
1267,2871,16,0,266,
1,515,2872,16,0,
266,1,1521,2873,16,
0,266,1,525,1302,
1,283,1258,1,2299,
2874,16,0,266,1,
42,2875,16,0,266,
1,40,1263,1,44,
1269,1,47,1270,1,
1303,2876,16,0,266,
1,1555,2877,16,0,
266,1,50,1287,1,
48,1276,1,49,1282,
1,51,1292,1,63,
1308,1,305,1297,1,
66,1315,1,67,1320,
1,68,1325,1,69,
1330,1,70,1335,1,
73,2878,16,0,266,
1,74,1340,1,328,
1389,1,1048,1431,1,
82,2879,16,0,266,
1,1840,2880,16,0,
266,1,1591,2881,16,
0,266,1,1341,2882,
16,0,266,1,1096,
1399,1,93,1405,1,
352,1436,1,107,2883,
16,0,266,1,1114,
1430,1,118,1442,1,
1123,2884,16,0,266,
1,371,1452,1,1628,
2885,16,0,266,1,
375,1463,1,1882,2886,
16,0,266,1,377,
1468,1,379,1473,1,
380,1478,1,883,2887,
16,0,266,1,373,
1496,1,130,1501,1,
143,2888,16,0,266,
1,387,2889,16,0,
266,1,1159,2890,16,
0,266,1,157,2891,
16,0,266,1,1413,
2892,16,0,266,1,
1665,2893,16,0,266,
1,412,2894,16,0,
266,1,1377,2895,16,
0,266,1,172,1555,
1,1939,2896,16,0,
266,1,437,2897,16,
0,266,1,188,1604,
1,942,1576,1,1195,
2898,16,0,266,1,
1449,2899,16,0,266,
1,1701,2900,16,0,
266,1,447,1597,1,
205,2901,16,0,266,
1,827,2902,16,0,
266,1,223,2903,16,
0,266,1,476,1629,
1,477,1635,1,1231,
2904,16,0,266,1,
479,1645,1,480,1650,
1,1485,2905,16,0,
266,1,1737,2906,16,
0,266,1,2746,2907,
16,0,266,1,242,
2908,16,0,266,1,
478,1669,1,1001,1674,
1,1002,1679,1,32,
2909,19,261,1,32,
2910,5,84,1,1011,
1188,1,1012,2911,16,
0,259,1,1013,1345,
1,262,1205,1,1267,
2912,16,0,259,1,
515,2913,16,0,259,
1,1521,2914,16,0,
259,1,525,1302,1,
283,1258,1,2299,2915,
16,0,259,1,42,
2916,16,0,259,1,
40,1263,1,44,1269,
1,47,1270,1,1303,
2917,16,0,259,1,
1555,2918,16,0,259,
1,50,1287,1,48,
1276,1,49,1282,1,
51,1292,1,63,1308,
1,305,1297,1,66,
1315,1,67,1320,1,
68,1325,1,69,1330,
1,70,1335,1,73,
2919,16,0,259,1,
74,1340,1,328,1389,
1,1048,1431,1,82,
2920,16,0,259,1,
1840,2921,16,0,259,
1,1591,2922,16,0,
259,1,1341,2923,16,
0,259,1,1096,1399,
1,93,1405,1,352,
1436,1,107,2924,16,
0,259,1,1114,1430,
1,118,1442,1,1123,
2925,16,0,259,1,
371,1452,1,1628,2926,
16,0,259,1,375,
1463,1,1882,2927,16,
0,259,1,377,1468,
1,379,1473,1,380,
1478,1,883,2928,16,
0,259,1,373,1496,
1,130,1501,1,143,
2929,16,0,259,1,
387,2930,16,0,259,
1,1159,2931,16,0,
259,1,157,2932,16,
0,259,1,1413,2933,
16,0,259,1,1665,
2934,16,0,259,1,
412,2935,16,0,259,
1,1377,2936,16,0,
259,1,172,1555,1,
1939,2937,16,0,259,
1,437,2938,16,0,
259,1,188,1604,1,
942,1576,1,1195,2939,
16,0,259,1,1449,
2940,16,0,259,1,
1701,2941,16,0,259,
1,447,1597,1,205,
2942,16,0,259,1,
827,2943,16,0,259,
1,223,2944,16,0,
259,1,476,1629,1,
477,1635,1,1231,2945,
16,0,259,1,479,
1645,1,480,1650,1,
1485,2946,16,0,259,
1,1737,2947,16,0,
259,1,2746,2948,16,
0,259,1,242,2949,
16,0,259,1,478,
1669,1,1001,1674,1,
1002,1679,1,33,2950,
19,346,1,33,2951,
5,84,1,1011,1188,
1,1012,2952,16,0,
344,1,1013,1345,1,
262,1205,1,1267,2953,
16,0,344,1,515,
2954,16,0,344,1,
1521,2955,16,0,344,
1,525,1302,1,283,
1258,1,2299,2956,16,
0,344,1,42,2957,
16,0,344,1,40,
1263,1,44,1269,1,
47,1270,1,1303,2958,
16,0,344,1,1555,
2959,16,0,344,1,
50,1287,1,48,1276,
1,49,1282,1,51,
1292,1,63,1308,1,
305,1297,1,66,1315,
1,67,1320,1,68,
1325,1,69,1330,1,
70,1335,1,73,2960,
16,0,344,1,74,
1340,1,328,1389,1,
1048,1431,1,82,2961,
16,0,344,1,1840,
2962,16,0,344,1,
1591,2963,16,0,344,
1,1341,2964,16,0,
344,1,1096,1399,1,
93,1405,1,352,1436,
1,107,2965,16,0,
344,1,1114,1430,1,
118,1442,1,1123,2966,
16,0,344,1,371,
1452,1,1628,2967,16,
0,344,1,375,1463,
1,1882,2968,16,0,
344,1,377,1468,1,
379,1473,1,380,1478,
1,883,2969,16,0,
344,1,373,1496,1,
130,1501,1,143,1506,
1,387,2970,16,0,
344,1,1159,2971,16,
0,344,1,157,1529,
1,1413,2972,16,0,
344,1,1665,2973,16,
0,344,1,412,2974,
16,0,344,1,1377,
2975,16,0,344,1,
172,1555,1,1939,2976,
16,0,344,1,437,
2977,16,0,344,1,
188,1604,1,942,1576,
1,1195,2978,16,0,
344,1,1449,2979,16,
0,344,1,1701,2980,
16,0,344,1,447,
1597,1,205,2981,16,
0,344,1,827,2982,
16,0,344,1,223,
2983,16,0,344,1,
476,1629,1,477,1635,
1,1231,2984,16,0,
344,1,479,1645,1,
480,1650,1,1485,2985,
16,0,344,1,1737,
2986,16,0,344,1,
2746,2987,16,0,344,
1,242,1664,1,478,
1669,1,1001,1674,1,
1002,1679,1,34,2988,
19,336,1,34,2989,
5,84,1,1011,1188,
1,1012,2990,16,0,
334,1,1013,1345,1,
262,1205,1,1267,2991,
16,0,334,1,515,
2992,16,0,334,1,
1521,2993,16,0,334,
1,525,1302,1,283,
1258,1,2299,2994,16,
0,334,1,42,2995,
16,0,334,1,40,
1263,1,44,1269,1,
47,1270,1,1303,2996,
16,0,334,1,1555,
2997,16,0,334,1,
50,1287,1,48,1276,
1,49,1282,1,51,
1292,1,63,1308,1,
305,1297,1,66,1315,
1,67,1320,1,68,
1325,1,69,1330,1,
70,1335,1,73,2998,
16,0,334,1,74,
1340,1,328,1389,1,
1048,1431,1,82,2999,
16,0,334,1,1840,
3000,16,0,334,1,
1591,3001,16,0,334,
1,1341,3002,16,0,
334,1,1096,1399,1,
93,1405,1,352,1436,
1,107,3003,16,0,
334,1,1114,1430,1,
118,1442,1,1123,3004,
16,0,334,1,371,
1452,1,1628,3005,16,
0,334,1,375,1463,
1,1882,3006,16,0,
334,1,377,1468,1,
379,1473,1,380,1478,
1,883,3007,16,0,
334,1,373,1496,1,
130,1501,1,143,1506,
1,387,3008,16,0,
334,1,1159,3009,16,
0,334,1,157,1529,
1,1413,3010,16,0,
334,1,1665,3011,16,
0,334,1,412,3012,
16,0,334,1,1377,
3013,16,0,334,1,
172,1555,1,1939,3014,
16,0,334,1,437,
3015,16,0,334,1,
188,1604,1,942,1576,
1,1195,3016,16,0,
334,1,1449,3017,16,
0,334,1,1701,3018,
16,0,334,1,447,
1597,1,205,1609,1,
827,3019,16,0,334,
1,223,1619,1,476,
1629,1,477,1635,1,
1231,3020,16,0,334,
1,479,1645,1,480,
1650,1,1485,3021,16,
0,334,1,1737,3022,
16,0,334,1,2746,
3023,16,0,334,1,
242,1664,1,478,1669,
1,1001,1674,1,1002,
1679,1,35,3024,19,
326,1,35,3025,5,
84,1,1011,1188,1,
1012,3026,16,0,324,
1,1013,1345,1,262,
1205,1,1267,3027,16,
0,324,1,515,3028,
16,0,324,1,1521,
3029,16,0,324,1,
525,1302,1,283,1258,
1,2299,3030,16,0,
324,1,42,3031,16,
0,324,1,40,1263,
1,44,1269,1,47,
1270,1,1303,3032,16,
0,324,1,1555,3033,
16,0,324,1,50,
1287,1,48,1276,1,
49,1282,1,51,1292,
1,63,1308,1,305,
1297,1,66,1315,1,
67,1320,1,68,1325,
1,69,1330,1,70,
1335,1,73,3034,16,
0,324,1,74,1340,
1,328,1389,1,1048,
1431,1,82,3035,16,
0,324,1,1840,3036,
16,0,324,1,1591,
3037,16,0,324,1,
1341,3038,16,0,324,
1,1096,1399,1,93,
1405,1,352,1436,1,
107,3039,16,0,324,
1,1114,1430,1,118,
1442,1,1123,3040,16,
0,324,1,371,1452,
1,1628,3041,16,0,
324,1,375,1463,1,
1882,3042,16,0,324,
1,377,1468,1,379,
1473,1,380,1478,1,
883,3043,16,0,324,
1,373,1496,1,130,
1501,1,143,1506,1,
387,3044,16,0,324,
1,1159,3045,16,0,
324,1,157,1529,1,
1413,3046,16,0,324,
1,1665,3047,16,0,
324,1,412,3048,16,
0,324,1,1377,3049,
16,0,324,1,172,
1555,1,1939,3050,16,
0,324,1,437,3051,
16,0,324,1,188,
1604,1,942,1576,1,
1195,3052,16,0,324,
1,1449,3053,16,0,
324,1,1701,3054,16,
0,324,1,447,1597,
1,205,1609,1,827,
3055,16,0,324,1,
223,3056,16,0,324,
1,476,1629,1,477,
1635,1,1231,3057,16,
0,324,1,479,1645,
1,480,1650,1,1485,
3058,16,0,324,1,
1737,3059,16,0,324,
1,2746,3060,16,0,
324,1,242,1664,1,
478,1669,1,1001,1674,
1,1002,1679,1,36,
3061,19,227,1,36,
3062,5,94,1,256,
3063,16,0,225,1,
1261,3064,16,0,225,
1,509,3065,16,0,
225,1,1515,3066,16,
0,225,1,2021,804,
1,1775,3067,16,0,
225,1,2029,811,1,
2030,817,1,2031,822,
1,2032,827,1,2033,
832,1,277,3068,16,
0,225,1,2035,838,
1,2037,843,1,2039,
848,1,32,3069,16,
0,225,1,2041,854,
1,2293,3070,16,0,
225,1,2043,860,1,
2045,865,1,41,3071,
16,0,225,1,1297,
3072,16,0,225,1,
43,3073,16,0,225,
1,1803,873,1,1804,
3074,16,0,225,1,
299,3075,16,0,225,
1,52,3076,16,0,
225,1,2318,3077,16,
0,225,1,2075,3078,
16,0,225,1,1574,
885,1,71,3079,16,
0,225,1,76,3080,
16,0,225,1,1834,
3081,16,0,225,1,
2337,3082,16,0,225,
1,79,3083,16,0,
225,1,1335,3084,16,
0,225,1,322,3085,
16,0,225,1,85,
3086,16,0,225,1,
89,3087,16,0,225,
1,346,3088,16,0,
225,1,2105,900,1,
2106,3089,16,0,225,
1,97,3090,16,0,
225,1,1860,907,1,
2364,913,1,102,3091,
16,0,225,1,112,
3092,16,0,225,1,
1117,3093,16,0,225,
1,1873,921,1,1876,
3094,16,0,225,1,
124,3095,16,0,225,
1,2136,928,1,381,
3096,16,0,225,1,
525,3097,16,0,225,
1,137,3098,16,0,
225,1,1901,3099,16,
0,225,1,1153,3100,
16,0,225,1,151,
3101,16,0,225,1,
1407,3102,16,0,225,
1,1659,3103,16,0,
225,1,2413,3104,16,
0,225,1,406,3105,
16,0,225,1,1371,
3106,16,0,225,1,
166,3107,16,0,225,
1,1622,3108,16,0,
225,1,1931,946,1,
1933,3109,16,0,225,
1,431,3110,16,0,
225,1,1585,3111,16,
0,225,1,182,3112,
16,0,225,1,1189,
3113,16,0,225,1,
1443,3114,16,0,225,
1,1695,3115,16,0,
225,1,2198,3116,16,
0,225,1,447,3117,
16,0,225,1,2458,
961,1,2459,967,1,
1958,3118,16,0,225,
1,2462,974,1,1657,
979,1,2464,984,1,
199,3119,16,0,225,
1,459,3120,16,0,
225,1,462,3121,16,
0,225,1,217,3122,
16,0,225,1,2227,
993,1,1225,3123,16,
0,225,1,1479,3124,
16,0,225,1,1731,
3125,16,0,225,1,
2740,3126,16,0,225,
1,1989,1002,1,1990,
3127,16,0,225,1,
236,3128,16,0,225,
1,1756,3129,16,0,
225,1,37,3130,19,
251,1,37,3131,5,
94,1,256,3132,16,
0,249,1,1261,3133,
16,0,249,1,509,
3134,16,0,249,1,
1515,3135,16,0,249,
1,2021,804,1,1775,
3136,16,0,249,1,
2029,811,1,2030,817,
1,2031,822,1,2032,
827,1,2033,832,1,
277,3137,16,0,249,
1,2035,838,1,2037,
843,1,2039,848,1,
32,3138,16,0,249,
1,2041,854,1,2293,
3139,16,0,249,1,
2043,860,1,2045,865,
1,41,3140,16,0,
249,1,1297,3141,16,
0,249,1,43,3142,
16,0,249,1,1803,
873,1,1804,3143,16,
0,249,1,299,3144,
16,0,249,1,52,
3145,16,0,249,1,
2318,3146,16,0,249,
1,2075,3147,16,0,
249,1,1574,885,1,
71,3148,16,0,249,
1,76,3149,16,0,
249,1,1834,3150,16,
0,249,1,2337,3151,
16,0,249,1,79,
3152,16,0,249,1,
1335,3153,16,0,249,
1,322,3154,16,0,
249,1,85,3155,16,
0,249,1,89,3156,
16,0,249,1,346,
3157,16,0,249,1,
2105,900,1,2106,3158,
16,0,249,1,97,
3159,16,0,249,1,
1860,907,1,2364,913,
1,102,3160,16,0,
249,1,112,3161,16,
0,249,1,1117,3162,
16,0,249,1,1873,
921,1,1876,3163,16,
0,249,1,124,3164,
16,0,249,1,2136,
928,1,381,3165,16,
0,249,1,525,3166,
16,0,249,1,137,
3167,16,0,249,1,
1901,3168,16,0,249,
1,1153,3169,16,0,
249,1,151,3170,16,
0,249,1,1407,3171,
16,0,249,1,1659,
3172,16,0,249,1,
2413,3173,16,0,249,
1,406,3174,16,0,
249,1,1371,3175,16,
0,249,1,166,3176,
16,0,249,1,1622,
3177,16,0,249,1,
1931,946,1,1933,3178,
16,0,249,1,431,
3179,16,0,249,1,
1585,3180,16,0,249,
1,182,3181,16,0,
249,1,1189,3182,16,
0,249,1,1443,3183,
16,0,249,1,1695,
3184,16,0,249,1,
2198,3185,16,0,249,
1,447,3186,16,0,
249,1,2458,961,1,
2459,967,1,1958,3187,
16,0,249,1,2462,
974,1,1657,979,1,
2464,984,1,199,3188,
16,0,249,1,459,
3189,16,0,249,1,
462,3190,16,0,249,
1,217,3191,16,0,
249,1,2227,993,1,
1225,3192,16,0,249,
1,1479,3193,16,0,
249,1,1731,3194,16,
0,249,1,2740,3195,
16,0,249,1,1989,
1002,1,1990,3196,16,
0,249,1,236,3197,
16,0,249,1,1756,
3198,16,0,249,1,
38,3199,19,247,1,
38,3200,5,84,1,
1011,1188,1,1012,3201,
16,0,245,1,1013,
1345,1,262,1205,1,
1267,3202,16,0,245,
1,515,3203,16,0,
245,1,1521,3204,16,
0,245,1,525,1302,
1,283,1258,1,2299,
3205,16,0,245,1,
42,3206,16,0,245,
1,40,1263,1,44,
1269,1,47,1270,1,
1303,3207,16,0,245,
1,1555,3208,16,0,
245,1,50,1287,1,
48,1276,1,49,1282,
1,51,1292,1,63,
1308,1,305,1297,1,
66,1315,1,67,1320,
1,68,1325,1,69,
1330,1,70,1335,1,
73,3209,16,0,245,
1,74,1340,1,328,
1389,1,1048,1431,1,
82,3210,16,0,245,
1,1840,3211,16,0,
245,1,1591,3212,16,
0,245,1,1341,3213,
16,0,245,1,1096,
1399,1,93,1405,1,
352,1436,1,107,3214,
16,0,245,1,1114,
1430,1,118,1442,1,
1123,3215,16,0,245,
1,371,1452,1,1628,
3216,16,0,245,1,
375,1463,1,1882,3217,
16,0,245,1,377,
1468,1,379,1473,1,
380,1478,1,883,1484,
1,373,1496,1,130,
1501,1,143,1506,1,
387,3218,16,0,245,
1,1159,3219,16,0,
245,1,157,1529,1,
1413,3220,16,0,245,
1,1665,3221,16,0,
245,1,412,3222,16,
0,245,1,1377,3223,
16,0,245,1,172,
1555,1,1939,3224,16,
0,245,1,437,3225,
16,0,245,1,188,
1604,1,942,1576,1,
1195,3226,16,0,245,
1,1449,3227,16,0,
245,1,1701,3228,16,
0,245,1,447,1597,
1,205,1609,1,827,
1418,1,223,1619,1,
476,1629,1,477,1635,
1,1231,3229,16,0,
245,1,479,1645,1,
480,1650,1,1485,3230,
16,0,245,1,1737,
3231,16,0,245,1,
2746,3232,16,0,245,
1,242,1664,1,478,
1669,1,1001,1674,1,
1002,1679,1,39,3233,
19,233,1,39,3234,
5,84,1,1011,1188,
1,1012,3235,16,0,
231,1,1013,1345,1,
262,1205,1,1267,3236,
16,0,231,1,515,
3237,16,0,231,1,
1521,3238,16,0,231,
1,525,1302,1,283,
1258,1,2299,3239,16,
0,231,1,42,3240,
16,0,231,1,40,
1263,1,44,1269,1,
47,1270,1,1303,3241,
16,0,231,1,1555,
3242,16,0,231,1,
50,1287,1,48,1276,
1,49,1282,1,51,
1292,1,63,1308,1,
305,1297,1,66,1315,
1,67,1320,1,68,
1325,1,69,1330,1,
70,1335,1,73,3243,
16,0,231,1,74,
1340,1,328,1389,1,
1048,1431,1,82,3244,
16,0,231,1,1840,
3245,16,0,231,1,
1591,3246,16,0,231,
1,1341,3247,16,0,
231,1,1096,1399,1,
93,1405,1,352,1436,
1,107,3248,16,0,
231,1,1114,1430,1,
118,1442,1,1123,3249,
16,0,231,1,371,
1452,1,1628,3250,16,
0,231,1,375,1463,
1,1882,3251,16,0,
231,1,377,1468,1,
379,1473,1,380,1478,
1,883,1484,1,373,
1496,1,130,1501,1,
143,1506,1,387,3252,
16,0,231,1,1159,
3253,16,0,231,1,
157,1529,1,1413,3254,
16,0,231,1,1665,
3255,16,0,231,1,
412,3256,16,0,231,
1,1377,3257,16,0,
231,1,172,1555,1,
1939,3258,16,0,231,
1,437,3259,16,0,
231,1,188,1604,1,
942,1576,1,1195,3260,
16,0,231,1,1449,
3261,16,0,231,1,
1701,3262,16,0,231,
1,447,1597,1,205,
1609,1,827,1418,1,
223,1619,1,476,1629,
1,477,1635,1,1231,
3263,16,0,231,1,
479,1645,1,480,1650,
1,1485,3264,16,0,
231,1,1737,3265,16,
0,231,1,2746,3266,
16,0,231,1,242,
1664,1,478,1669,1,
1001,1674,1,1002,1679,
1,40,3267,19,221,
1,40,3268,5,84,
1,1011,1188,1,1012,
3269,16,0,219,1,
1013,1345,1,262,1205,
1,1267,3270,16,0,
219,1,515,3271,16,
0,219,1,1521,3272,
16,0,219,1,525,
1302,1,283,1258,1,
2299,3273,16,0,219,
1,42,3274,16,0,
219,1,40,1263,1,
44,1269,1,47,1270,
1,1303,3275,16,0,
219,1,1555,3276,16,
0,219,1,50,1287,
1,48,1276,1,49,
1282,1,51,1292,1,
63,1308,1,305,1297,
1,66,1315,1,67,
1320,1,68,1325,1,
69,1330,1,70,1335,
1,73,3277,16,0,
219,1,74,1340,1,
328,1389,1,1048,1431,
1,82,3278,16,0,
219,1,1840,3279,16,
0,219,1,1591,3280,
16,0,219,1,1341,
3281,16,0,219,1,
1096,1399,1,93,1405,
1,352,1436,1,107,
3282,16,0,219,1,
1114,1430,1,118,3283,
16,0,219,1,1123,
3284,16,0,219,1,
371,1452,1,1628,3285,
16,0,219,1,375,
1463,1,1882,3286,16,
0,219,1,377,1468,
1,379,1473,1,380,
1478,1,883,3287,16,
0,219,1,373,1496,
1,130,3288,16,0,
219,1,143,3289,16,
0,219,1,387,3290,
16,0,219,1,1159,
3291,16,0,219,1,
157,3292,16,0,219,
1,1413,3293,16,0,
219,1,1665,3294,16,
0,219,1,412,3295,
16,0,219,1,1377,
3296,16,0,219,1,
172,3297,16,0,219,
1,1939,3298,16,0,
219,1,437,3299,16,
0,219,1,188,3300,
16,0,219,1,942,
1576,1,1195,3301,16,
0,219,1,1449,3302,
16,0,219,1,1701,
3303,16,0,219,1,
447,1597,1,205,3304,
16,0,219,1,827,
3305,16,0,219,1,
223,3306,16,0,219,
1,476,1629,1,477,
1635,1,1231,3307,16,
0,219,1,479,1645,
1,480,1650,1,1485,
3308,16,0,219,1,
1737,3309,16,0,219,
1,2746,3310,16,0,
219,1,242,3311,16,
0,219,1,478,1669,
1,1001,1674,1,1002,
1679,1,41,3312,19,
183,1,41,3313,5,
84,1,1011,1188,1,
1012,3314,16,0,181,
1,1013,1345,1,262,
1205,1,1267,3315,16,
0,181,1,515,3316,
16,0,181,1,1521,
3317,16,0,181,1,
525,1302,1,283,1258,
1,2299,3318,16,0,
181,1,42,3319,16,
0,181,1,40,1263,
1,44,1269,1,47,
1270,1,1303,3320,16,
0,181,1,1555,3321,
16,0,181,1,50,
1287,1,48,1276,1,
49,1282,1,51,1292,
1,63,1308,1,305,
1297,1,66,1315,1,
67,1320,1,68,1325,
1,69,1330,1,70,
1335,1,73,3322,16,
0,181,1,74,1340,
1,328,1389,1,1048,
1431,1,82,3323,16,
0,181,1,1840,3324,
16,0,181,1,1591,
3325,16,0,181,1,
1341,3326,16,0,181,
1,1096,1399,1,93,
1405,1,352,1436,1,
107,3327,16,0,181,
1,1114,1430,1,118,
3328,16,0,181,1,
1123,3329,16,0,181,
1,371,1452,1,1628,
3330,16,0,181,1,
375,1463,1,1882,3331,
16,0,181,1,377,
1468,1,379,1473,1,
380,1478,1,883,3332,
16,0,181,1,373,
1496,1,130,3333,16,
0,181,1,143,3334,
16,0,181,1,387,
3335,16,0,181,1,
1159,3336,16,0,181,
1,157,3337,16,0,
181,1,1413,3338,16,
0,181,1,1665,3339,
16,0,181,1,412,
3340,16,0,181,1,
1377,3341,16,0,181,
1,172,3342,16,0,
181,1,1939,3343,16,
0,181,1,437,3344,
16,0,181,1,188,
3345,16,0,181,1,
942,1576,1,1195,3346,
16,0,181,1,1449,
3347,16,0,181,1,
1701,3348,16,0,181,
1,447,1597,1,205,
3349,16,0,181,1,
827,3350,16,0,181,
1,223,3351,16,0,
181,1,476,1629,1,
477,1635,1,1231,3352,
16,0,181,1,479,
1645,1,480,1650,1,
1485,3353,16,0,181,
1,1737,3354,16,0,
181,1,2746,3355,16,
0,181,1,242,3356,
16,0,181,1,478,
1669,1,1001,1674,1,
1002,1679,1,42,3357,
19,406,1,42,3358,
5,38,1,1901,3359,
16,0,404,1,2075,
3360,16,0,404,1,
1860,907,1,1803,873,
1,1804,3361,16,0,
404,1,2413,3362,16,
0,404,1,2198,3363,
16,0,404,1,1873,
921,1,1657,979,1,
1989,1002,1,1990,3364,
16,0,404,1,1775,
3365,16,0,404,1,
32,3366,16,0,404,
1,2105,900,1,2106,
3367,16,0,404,1,
2364,913,1,2227,993,
1,2337,3368,16,0,
404,1,2021,804,1,
2458,961,1,2459,967,
1,2462,974,1,2136,
928,1,2464,984,1,
2029,811,1,2030,817,
1,2031,822,1,2032,
827,1,2033,832,1,
2035,838,1,2037,843,
1,2039,848,1,1931,
946,1,2041,854,1,
2043,860,1,2045,865,
1,1574,885,1,1958,
3369,16,0,404,1,
43,3370,19,507,1,
43,3371,5,25,1,
2035,838,1,2037,843,
1,2039,848,1,2041,
854,1,2227,993,1,
2043,860,1,1657,979,
1,1860,907,1,2136,
928,1,2021,804,1,
2459,967,1,1574,885,
1,2105,3372,16,0,
654,1,1931,946,1,
1873,921,1,2031,822,
1,1803,873,1,1989,
3373,16,0,505,1,
2464,984,1,2029,811,
1,2030,817,1,2364,
913,1,2032,827,1,
2033,832,1,2045,865,
1,44,3374,19,278,
1,44,3375,5,38,
1,1901,3376,16,0,
276,1,2075,3377,16,
0,276,1,1860,907,
1,1803,873,1,1804,
3378,16,0,276,1,
2413,3379,16,0,276,
1,2198,3380,16,0,
276,1,1873,921,1,
1657,979,1,1989,1002,
1,1990,3381,16,0,
276,1,1775,3382,16,
0,276,1,32,3383,
16,0,276,1,2105,
900,1,2106,3384,16,
0,276,1,2364,913,
1,2227,993,1,2337,
3385,16,0,276,1,
2021,804,1,2458,961,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2033,832,1,2035,838,
1,2037,843,1,2039,
848,1,1931,946,1,
2041,854,1,2043,860,
1,2045,865,1,1574,
885,1,1958,3386,16,
0,276,1,45,3387,
19,303,1,45,3388,
5,39,1,1901,3389,
16,0,330,1,2075,
3390,16,0,330,1,
1860,907,1,1803,873,
1,1804,3391,16,0,
330,1,2413,3392,16,
0,330,1,2198,3393,
16,0,330,1,1873,
921,1,1657,979,1,
1989,1002,1,1990,3394,
16,0,330,1,1775,
3395,16,0,330,1,
32,3396,16,0,330,
1,2105,900,1,2106,
3397,16,0,330,1,
2364,913,1,2227,993,
1,2337,3398,16,0,
330,1,2021,804,1,
2458,961,1,2459,967,
1,2462,974,1,2136,
928,1,2464,984,1,
2029,811,1,2030,817,
1,2031,822,1,2032,
827,1,2033,832,1,
2035,838,1,2037,843,
1,2039,848,1,1931,
946,1,2041,854,1,
2043,860,1,2045,865,
1,1832,3399,16,0,
301,1,1574,885,1,
1958,3400,16,0,330,
1,46,3401,19,752,
1,46,3402,5,38,
1,1901,3403,16,0,
750,1,2075,3404,16,
0,750,1,1860,907,
1,1803,873,1,1804,
3405,16,0,750,1,
2413,3406,16,0,750,
1,2198,3407,16,0,
750,1,1873,921,1,
1657,979,1,1989,1002,
1,1990,3408,16,0,
750,1,1775,3409,16,
0,750,1,32,3410,
16,0,750,1,2105,
900,1,2106,3411,16,
0,750,1,2364,913,
1,2227,993,1,2337,
3412,16,0,750,1,
2021,804,1,2458,961,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2033,832,1,2035,838,
1,2037,843,1,2039,
848,1,1931,946,1,
2041,854,1,2043,860,
1,2045,865,1,1574,
885,1,1958,3413,16,
0,750,1,47,3414,
19,625,1,47,3415,
5,19,1,0,3416,
16,0,623,1,2776,
3417,17,3418,15,3419,
4,52,37,0,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,3420,20,
3421,4,54,71,0,
108,0,111,0,98,
0,97,0,108,0,
86,0,97,0,114,
0,105,0,97,0,
98,0,108,0,101,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,166,1,
3,1,3,1,2,
3422,22,1,7,1,
2777,3423,16,0,623,
1,2711,765,1,2788,
3424,16,0,623,1,
2722,788,1,2022,3425,
16,0,645,1,2459,
967,1,2795,3426,17,
3427,15,3428,4,36,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,1,-1,1,5,
3429,20,3430,4,38,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,95,
0,52,0,1,165,
1,3,1,3,1,
2,3431,22,1,6,
1,2796,3432,17,3433,
15,3428,1,-1,1,
5,3434,20,3435,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,50,0,1,
163,1,3,1,3,
1,2,3436,22,1,
4,1,2797,3437,17,
3438,15,3428,1,-1,
1,5,3439,20,3440,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,51,0,
1,164,1,3,1,
2,1,1,3441,22,
1,5,1,2798,3442,
17,3443,15,3428,1,
-1,1,5,3444,20,
3445,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,49,
0,1,162,1,3,
1,2,1,1,3446,
22,1,3,1,2466,
3447,17,3448,15,3449,
4,50,37,0,71,
0,108,0,111,0,
98,0,97,0,108,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,3450,20,3451,4,
52,71,0,108,0,
111,0,98,0,97,
0,108,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,169,
1,3,1,7,1,
6,3452,22,1,10,
1,2615,793,1,2765,
3453,17,3454,15,3419,
1,-1,1,5,3455,
20,3456,4,54,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,167,
1,3,1,5,1,
4,3457,22,1,8,
1,2464,984,1,2718,
3458,16,0,623,1,
2721,777,1,2737,3459,
17,3460,15,3449,1,
-1,1,5,3461,20,
3462,4,52,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,168,1,3,1,
6,1,5,3463,22,
1,9,1,48,3464,
19,351,1,48,3465,
5,54,1,0,3466,
16,0,349,1,2075,
3467,16,0,546,1,
1860,907,1,1804,3468,
16,0,546,1,2737,
3459,1,2337,3469,16,
0,546,1,2413,3470,
16,0,546,1,2198,
3471,16,0,546,1,
1873,921,1,1657,979,
1,2030,817,1,2032,
827,1,1989,1002,1,
1990,3472,16,0,546,
1,2035,838,1,1775,
3473,16,0,546,1,
32,3474,16,0,546,
1,2105,900,1,2106,
3475,16,0,546,1,
2721,777,1,2765,3453,
1,2227,993,1,1901,
3476,16,0,546,1,
2776,3417,1,2777,3477,
16,0,349,1,1803,
873,1,2458,961,1,
2459,967,1,2788,3478,
16,0,349,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2466,3447,1,2031,
822,1,2795,3426,1,
2796,3432,1,2797,3437,
1,2798,3442,1,2364,
913,1,2039,848,1,
1931,946,1,2041,854,
1,2021,804,1,2043,
860,1,2045,865,1,
2033,832,1,2711,765,
1,2037,843,1,1574,
885,1,2718,3479,16,
0,349,1,1958,3480,
16,0,546,1,2722,
788,1,2615,793,1,
49,3481,19,551,1,
49,3482,5,38,1,
1901,3483,16,0,549,
1,2075,3484,16,0,
549,1,1860,907,1,
1803,873,1,1804,3485,
16,0,549,1,2413,
3486,16,0,549,1,
2198,3487,16,0,549,
1,1873,921,1,1657,
979,1,1989,1002,1,
1990,3488,16,0,549,
1,1775,3489,16,0,
549,1,32,3490,16,
0,549,1,2105,900,
1,2106,3491,16,0,
549,1,2364,913,1,
2227,993,1,2337,3492,
16,0,549,1,2021,
804,1,2458,961,1,
2459,967,1,2462,974,
1,2136,928,1,2464,
984,1,2029,811,1,
2030,817,1,2031,822,
1,2032,827,1,2033,
832,1,2035,838,1,
2037,843,1,2039,848,
1,1931,946,1,2041,
854,1,2043,860,1,
2045,865,1,1574,885,
1,1958,3493,16,0,
549,1,50,3494,19,
689,1,50,3495,5,
38,1,1901,3496,16,
0,687,1,2075,3497,
16,0,687,1,1860,
907,1,1803,873,1,
1804,3498,16,0,687,
1,2413,3499,16,0,
687,1,2198,3500,16,
0,687,1,1873,921,
1,1657,979,1,1989,
1002,1,1990,3501,16,
0,687,1,1775,3502,
16,0,687,1,32,
3503,16,0,687,1,
2105,900,1,2106,3504,
16,0,687,1,2364,
913,1,2227,993,1,
2337,3505,16,0,687,
1,2021,804,1,2458,
961,1,2459,967,1,
2462,974,1,2136,928,
1,2464,984,1,2029,
811,1,2030,817,1,
2031,822,1,2032,827,
1,2033,832,1,2035,
838,1,2037,843,1,
2039,848,1,1931,946,
1,2041,854,1,2043,
860,1,2045,865,1,
1574,885,1,1958,3506,
16,0,687,1,51,
3507,19,127,1,51,
3508,5,55,1,0,
3509,16,0,125,1,
2075,3510,16,0,125,
1,1860,907,1,10,
3511,16,0,125,1,
2737,3459,1,2337,3512,
16,0,125,1,2413,
3513,16,0,125,1,
2198,3514,16,0,125,
1,1873,921,1,21,
3515,16,0,125,1,
1657,979,1,2531,3516,
16,0,446,1,2032,
827,1,1989,1002,1,
1990,3517,16,0,125,
1,2458,961,1,1775,
3518,16,0,125,1,
32,3519,16,0,125,
1,2105,900,1,2106,
3520,16,0,125,1,
2765,3453,1,2553,3521,
16,0,125,1,2227,
993,1,1901,3522,16,
0,125,1,2776,3417,
1,52,3523,16,0,
125,1,1803,873,1,
1804,3524,16,0,125,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2466,3447,1,2031,
822,1,2795,3426,1,
2796,3432,1,2797,3437,
1,2798,3442,1,2364,
913,1,2039,848,1,
1931,946,1,2041,854,
1,2021,804,1,2043,
860,1,2045,865,1,
2724,3525,16,0,125,
1,2030,817,1,2033,
832,1,2035,838,1,
2037,843,1,2777,3526,
16,0,125,1,1574,
885,1,1958,3527,16,
0,125,1,2506,3528,
16,0,446,1,52,
3529,19,124,1,52,
3530,5,53,1,0,
3531,16,0,122,1,
2075,3532,16,0,122,
1,1860,907,1,1804,
3533,16,0,122,1,
10,3534,16,0,122,
1,2737,3459,1,2337,
3535,16,0,122,1,
2413,3536,16,0,122,
1,2198,3537,16,0,
122,1,1873,921,1,
21,3538,16,0,122,
1,1657,979,1,2030,
817,1,2032,827,1,
1989,1002,1,1990,3539,
16,0,122,1,2035,
838,1,1775,3540,16,
0,122,1,32,3541,
16,0,122,1,2105,
900,1,2106,3542,16,
0,122,1,2765,3453,
1,2553,3543,16,0,
122,1,2227,993,1,
1901,3544,16,0,122,
1,2776,3417,1,52,
3545,16,0,122,1,
1803,873,1,2458,961,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2466,3447,1,2031,
822,1,2795,3426,1,
2796,3432,1,2797,3437,
1,2798,3442,1,2364,
913,1,2039,848,1,
1931,946,1,2041,854,
1,2021,804,1,2043,
860,1,2045,865,1,
2033,832,1,2037,843,
1,2777,3546,16,0,
122,1,1574,885,1,
1958,3547,16,0,122,
1,2724,3548,16,0,
122,1,53,3549,19,
121,1,53,3550,5,
53,1,0,3551,16,
0,119,1,2075,3552,
16,0,119,1,1860,
907,1,1804,3553,16,
0,119,1,10,3554,
16,0,119,1,2737,
3459,1,2337,3555,16,
0,119,1,2413,3556,
16,0,119,1,2198,
3557,16,0,119,1,
1873,921,1,21,3558,
16,0,119,1,1657,
979,1,2030,817,1,
2032,827,1,1989,1002,
1,1990,3559,16,0,
119,1,2035,838,1,
1775,3560,16,0,119,
1,32,3561,16,0,
119,1,2105,900,1,
2106,3562,16,0,119,
1,2765,3453,1,2553,
3563,16,0,119,1,
2227,993,1,1901,3564,
16,0,119,1,2776,
3417,1,52,3565,16,
0,119,1,1803,873,
1,2458,961,1,2459,
967,1,2462,974,1,
2136,928,1,2464,984,
1,2029,811,1,2466,
3447,1,2031,822,1,
2795,3426,1,2796,3432,
1,2797,3437,1,2798,
3442,1,2364,913,1,
2039,848,1,1931,946,
1,2041,854,1,2021,
804,1,2043,860,1,
2045,865,1,2033,832,
1,2037,843,1,2777,
3566,16,0,119,1,
1574,885,1,1958,3567,
16,0,119,1,2724,
3568,16,0,119,1,
54,3569,19,118,1,
54,3570,5,54,1,
0,3571,16,0,116,
1,2539,3572,16,0,
497,1,1860,907,1,
1804,3573,16,0,116,
1,10,3574,16,0,
116,1,2737,3459,1,
2337,3575,16,0,116,
1,2413,3576,16,0,
116,1,2198,3577,16,
0,116,1,1873,921,
1,21,3578,16,0,
116,1,1657,979,1,
2030,817,1,2032,827,
1,1989,1002,1,1990,
3579,16,0,116,1,
2035,838,1,1775,3580,
16,0,116,1,32,
3581,16,0,116,1,
2105,900,1,2106,3582,
16,0,116,1,2765,
3453,1,2553,3583,16,
0,116,1,2227,993,
1,1901,3584,16,0,
116,1,2776,3417,1,
52,3585,16,0,116,
1,1803,873,1,2458,
961,1,2459,967,1,
2462,974,1,2136,928,
1,2464,984,1,2029,
811,1,2466,3447,1,
2031,822,1,2795,3426,
1,2796,3432,1,2797,
3437,1,2798,3442,1,
2364,913,1,2039,848,
1,1931,946,1,2041,
854,1,2021,804,1,
2043,860,1,2045,865,
1,2033,832,1,2075,
3586,16,0,116,1,
2037,843,1,2777,3587,
16,0,116,1,1574,
885,1,1958,3588,16,
0,116,1,2724,3589,
16,0,116,1,55,
3590,19,115,1,55,
3591,5,54,1,0,
3592,16,0,113,1,
2075,3593,16,0,113,
1,1860,907,1,1804,
3594,16,0,113,1,
10,3595,16,0,113,
1,2737,3459,1,2337,
3596,16,0,113,1,
2413,3597,16,0,113,
1,2198,3598,16,0,
113,1,1873,921,1,
21,3599,16,0,113,
1,1657,979,1,2030,
817,1,2032,827,1,
1989,1002,1,1990,3600,
16,0,113,1,2035,
838,1,1775,3601,16,
0,113,1,32,3602,
16,0,113,1,2105,
900,1,2106,3603,16,
0,113,1,2765,3453,
1,2553,3604,16,0,
113,1,2227,993,1,
1901,3605,16,0,113,
1,2776,3417,1,52,
3606,16,0,113,1,
1803,873,1,2458,961,
1,2459,967,1,2462,
974,1,2136,928,1,
2464,984,1,2029,811,
1,2466,3447,1,2031,
822,1,2795,3426,1,
2796,3432,1,2797,3437,
1,2798,3442,1,2364,
913,1,2039,848,1,
1931,946,1,2041,854,
1,2021,804,1,2043,
860,1,2045,865,1,
2033,832,1,2522,3607,
16,0,467,1,2037,
843,1,2777,3608,16,
0,113,1,1574,885,
1,1958,3609,16,0,
113,1,2724,3610,16,
0,113,1,56,3611,
19,112,1,56,3612,
5,55,1,0,3613,
16,0,110,1,2510,
3614,16,0,662,1,
2075,3615,16,0,110,
1,1860,907,1,10,
3616,16,0,110,1,
2737,3459,1,2337,3617,
16,0,110,1,2413,
3618,16,0,110,1,
2198,3619,16,0,110,
1,1873,921,1,21,
3620,16,0,110,1,
1657,979,1,2030,817,
1,2032,827,1,1989,
1002,1,1990,3621,16,
0,110,1,2458,961,
1,1775,3622,16,0,
110,1,32,3623,16,
0,110,1,2105,900,
1,2106,3624,16,0,
110,1,2765,3453,1,
2553,3625,16,0,110,
1,2227,993,1,1901,
3626,16,0,110,1,
2776,3417,1,52,3627,
16,0,110,1,1803,
873,1,1804,3628,16,
0,110,1,2459,967,
1,2462,974,1,2136,
928,1,2464,984,1,
2029,811,1,2466,3447,
1,2031,822,1,2795,
3426,1,2796,3432,1,
2797,3437,1,2798,3442,
1,2364,913,1,2039,
848,1,1931,946,1,
2041,854,1,2021,804,
1,2043,860,1,2045,
865,1,2514,3629,16,
0,662,1,2033,832,
1,2035,838,1,2037,
843,1,2777,3630,16,
0,110,1,1574,885,
1,1958,3631,16,0,
110,1,2724,3632,16,
0,110,1,57,3633,
19,109,1,57,3634,
5,53,1,0,3635,
16,0,107,1,2075,
3636,16,0,107,1,
1860,907,1,1804,3637,
16,0,107,1,10,
3638,16,0,107,1,
2737,3459,1,2337,3639,
16,0,107,1,2413,
3640,16,0,107,1,
2198,3641,16,0,107,
1,1873,921,1,21,
3642,16,0,107,1,
1657,979,1,2030,817,
1,2032,827,1,1989,
1002,1,1990,3643,16,
0,107,1,2035,838,
1,1775,3644,16,0,
107,1,32,3645,16,
0,107,1,2105,900,
1,2106,3646,16,0,
107,1,2765,3453,1,
2553,3647,16,0,107,
1,2227,993,1,1901,
3648,16,0,107,1,
2776,3417,1,52,3649,
16,0,107,1,1803,
873,1,2458,961,1,
2459,967,1,2462,974,
1,2136,928,1,2464,
984,1,2029,811,1,
2466,3447,1,2031,822,
1,2795,3426,1,2796,
3432,1,2797,3437,1,
2798,3442,1,2364,913,
1,2039,848,1,1931,
946,1,2041,854,1,
2021,804,1,2043,860,
1,2045,865,1,2033,
832,1,2037,843,1,
2777,3650,16,0,107,
1,1574,885,1,1958,
3651,16,0,107,1,
2724,3652,16,0,107,
1,58,3653,19,356,
1,58,3654,5,24,
1,2664,3655,16,0,
354,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3656,
16,0,354,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3657,16,0,
354,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3658,16,0,
354,1,2551,1767,1,
59,3659,19,441,1,
59,3660,5,24,1,
2664,3661,16,0,439,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3662,16,
0,439,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3663,16,0,439,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3664,16,0,439,
1,2551,1767,1,60,
3665,19,399,1,60,
3666,5,24,1,2664,
3667,16,0,397,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3668,16,0,
397,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3669,16,0,397,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3670,16,0,397,1,
2551,1767,1,61,3671,
19,644,1,61,3672,
5,24,1,2664,3673,
16,0,642,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3674,16,0,642,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3675,
16,0,642,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3676,
16,0,642,1,2551,
1767,1,62,3677,19,
392,1,62,3678,5,
24,1,2664,3679,16,
0,390,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3680,16,0,390,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3681,16,
0,390,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3682,16,
0,390,1,2551,1767,
1,63,3683,19,389,
1,63,3684,5,24,
1,2664,3685,16,0,
387,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3686,
16,0,387,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3687,16,0,
387,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3688,16,0,
387,1,2551,1767,1,
64,3689,19,386,1,
64,3690,5,24,1,
2664,3691,16,0,384,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3692,16,
0,384,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3693,16,0,384,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3694,16,0,384,
1,2551,1767,1,65,
3695,19,438,1,65,
3696,5,24,1,2664,
3697,16,0,436,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3698,16,0,
436,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3699,16,0,436,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3700,16,0,436,1,
2551,1767,1,66,3701,
19,435,1,66,3702,
5,24,1,2664,3703,
16,0,433,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3704,16,0,433,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3705,
16,0,433,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3706,
16,0,433,1,2551,
1767,1,67,3707,19,
432,1,67,3708,5,
24,1,2664,3709,16,
0,430,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3710,16,0,430,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3711,16,
0,430,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3712,16,
0,430,1,2551,1767,
1,68,3713,19,429,
1,68,3714,5,24,
1,2664,3715,16,0,
427,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3716,
16,0,427,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3717,16,0,
427,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3718,16,0,
427,1,2551,1767,1,
69,3719,19,365,1,
69,3720,5,24,1,
2664,3721,16,0,363,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3722,16,
0,363,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3723,16,0,363,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3724,16,0,363,
1,2551,1767,1,70,
3725,19,362,1,70,
3726,5,24,1,2664,
3727,16,0,360,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3728,16,0,
360,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3729,16,0,360,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3730,16,0,360,1,
2551,1767,1,71,3731,
19,359,1,71,3732,
5,24,1,2664,3733,
16,0,357,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3734,16,0,357,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3735,
16,0,357,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3736,
16,0,357,1,2551,
1767,1,72,3737,19,
426,1,72,3738,5,
24,1,2664,3739,16,
0,424,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3740,16,0,424,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3741,16,
0,424,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3742,16,
0,424,1,2551,1767,
1,73,3743,19,730,
1,73,3744,5,24,
1,2664,3745,16,0,
728,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3746,
16,0,728,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3747,16,0,
728,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3748,16,0,
728,1,2551,1767,1,
74,3749,19,422,1,
74,3750,5,24,1,
2664,3751,16,0,420,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3752,16,
0,420,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3753,16,0,420,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3754,16,0,420,
1,2551,1767,1,75,
3755,19,411,1,75,
3756,5,24,1,2664,
3757,16,0,409,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3758,16,0,
409,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3759,16,0,409,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3760,16,0,409,1,
2551,1767,1,76,3761,
19,534,1,76,3762,
5,24,1,2664,3763,
16,0,532,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3764,16,0,532,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3765,
16,0,532,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3766,
16,0,532,1,2551,
1767,1,77,3767,19,
531,1,77,3768,5,
24,1,2664,3769,16,
0,529,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3770,16,0,529,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3771,16,
0,529,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3772,16,
0,529,1,2551,1767,
1,78,3773,19,528,
1,78,3774,5,24,
1,2664,3775,16,0,
526,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3776,
16,0,526,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3777,16,0,
526,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3778,16,0,
526,1,2551,1767,1,
79,3779,19,525,1,
79,3780,5,24,1,
2664,3781,16,0,523,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3782,16,
0,523,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3783,16,0,523,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3784,16,0,523,
1,2551,1767,1,80,
3785,19,521,1,80,
3786,5,24,1,2664,
3787,16,0,519,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3788,16,0,
519,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3789,16,0,519,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3790,16,0,519,1,
2551,1767,1,81,3791,
19,383,1,81,3792,
5,24,1,2664,3793,
16,0,381,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3794,16,0,381,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3795,
16,0,381,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3796,
16,0,381,1,2551,
1767,1,82,3797,19,
544,1,82,3798,5,
24,1,2664,3799,16,
0,542,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3800,16,0,542,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3801,16,
0,542,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3802,16,
0,542,1,2551,1767,
1,83,3803,19,380,
1,83,3804,5,24,
1,2664,3805,16,0,
378,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3806,
16,0,378,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3807,16,0,
378,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3808,16,0,
378,1,2551,1767,1,
84,3809,19,377,1,
84,3810,5,24,1,
2664,3811,16,0,375,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3812,16,
0,375,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3813,16,0,375,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3814,16,0,375,
1,2551,1767,1,85,
3815,19,415,1,85,
3816,5,24,1,2664,
3817,16,0,413,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3818,16,0,
413,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3819,16,0,413,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3820,16,0,413,1,
2551,1767,1,86,3821,
19,537,1,86,3822,
5,24,1,2664,3823,
16,0,535,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3824,16,0,535,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3825,
16,0,535,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3826,
16,0,535,1,2551,
1767,1,87,3827,19,
402,1,87,3828,5,
24,1,2664,3829,16,
0,400,1,2546,1761,
1,2620,1730,1,2621,
1735,1,2612,1795,1,
2618,1720,1,2520,1740,
1,2566,1773,1,2568,
3830,16,0,400,1,
2459,967,1,2609,1780,
1,2610,1785,1,2611,
1790,1,2464,984,1,
2613,1800,1,2614,1805,
1,2616,1709,1,2617,
1715,1,2470,3831,16,
0,400,1,2619,1725,
1,2537,1754,1,2529,
1747,1,2623,3832,16,
0,400,1,2551,1767,
1,88,3833,19,374,
1,88,3834,5,24,
1,2664,3835,16,0,
372,1,2546,1761,1,
2620,1730,1,2621,1735,
1,2612,1795,1,2618,
1720,1,2520,1740,1,
2566,1773,1,2568,3836,
16,0,372,1,2459,
967,1,2609,1780,1,
2610,1785,1,2611,1790,
1,2464,984,1,2613,
1800,1,2614,1805,1,
2616,1709,1,2617,1715,
1,2470,3837,16,0,
372,1,2619,1725,1,
2537,1754,1,2529,1747,
1,2623,3838,16,0,
372,1,2551,1767,1,
89,3839,19,368,1,
89,3840,5,24,1,
2664,3841,16,0,366,
1,2546,1761,1,2620,
1730,1,2621,1735,1,
2612,1795,1,2618,1720,
1,2520,1740,1,2566,
1773,1,2568,3842,16,
0,366,1,2459,967,
1,2609,1780,1,2610,
1785,1,2611,1790,1,
2464,984,1,2613,1800,
1,2614,1805,1,2616,
1709,1,2617,1715,1,
2470,3843,16,0,366,
1,2619,1725,1,2537,
1754,1,2529,1747,1,
2623,3844,16,0,366,
1,2551,1767,1,90,
3845,19,371,1,90,
3846,5,24,1,2664,
3847,16,0,369,1,
2546,1761,1,2620,1730,
1,2621,1735,1,2612,
1795,1,2618,1720,1,
2520,1740,1,2566,1773,
1,2568,3848,16,0,
369,1,2459,967,1,
2609,1780,1,2610,1785,
1,2611,1790,1,2464,
984,1,2613,1800,1,
2614,1805,1,2616,1709,
1,2617,1715,1,2470,
3849,16,0,369,1,
2619,1725,1,2537,1754,
1,2529,1747,1,2623,
3850,16,0,369,1,
2551,1767,1,91,3851,
19,418,1,91,3852,
5,24,1,2664,3853,
16,0,416,1,2546,
1761,1,2620,1730,1,
2621,1735,1,2612,1795,
1,2618,1720,1,2520,
1740,1,2566,1773,1,
2568,3854,16,0,416,
1,2459,967,1,2609,
1780,1,2610,1785,1,
2611,1790,1,2464,984,
1,2613,1800,1,2614,
1805,1,2616,1709,1,
2617,1715,1,2470,3855,
16,0,416,1,2619,
1725,1,2537,1754,1,
2529,1747,1,2623,3856,
16,0,416,1,2551,
1767,1,92,3857,19,
133,1,92,3858,5,
129,1,0,3859,16,
0,714,1,1,2146,
1,2,2152,1,3,
2157,1,4,2162,1,
5,2167,1,6,2172,
1,7,2177,1,8,
3860,16,0,131,1,
1515,3861,16,0,176,
1,2523,3862,16,0,
468,1,2022,3863,16,
0,548,1,256,3864,
16,0,184,1,2777,
3865,16,0,714,1,
2025,3866,16,0,552,
1,18,3867,16,0,
148,1,2027,3868,16,
0,556,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2033,832,1,277,3869,
16,0,184,1,2035,
838,1,2037,843,1,
2540,3870,16,0,498,
1,2039,848,1,32,
3871,16,0,176,1,
2041,854,1,2795,3426,
1,2796,3432,1,2797,
3437,1,2798,3442,1,
41,3872,16,0,184,
1,1297,3873,16,0,
176,1,43,3874,16,
0,184,1,46,3875,
16,0,189,1,1804,
3876,16,0,176,1,
299,3877,16,0,184,
1,52,3878,16,0,
176,1,509,3879,16,
0,184,1,2318,3880,
16,0,176,1,62,
3881,16,0,206,1,
65,3882,16,0,208,
1,2075,3883,16,0,
176,1,1574,885,1,
71,3884,16,0,184,
1,1775,3885,16,0,
176,1,76,3886,16,
0,184,1,1834,3887,
16,0,176,1,2337,
3888,16,0,176,1,
79,3889,16,0,184,
1,1335,3890,16,0,
176,1,2511,3891,16,
0,453,1,322,3892,
16,0,184,1,85,
3893,16,0,184,1,
1261,3894,16,0,176,
1,89,3895,16,0,
184,1,2765,3453,1,
346,3896,16,0,184,
1,97,3897,16,0,
184,1,2106,3898,16,
0,176,1,2043,860,
1,102,3899,16,0,
184,1,1860,907,1,
1803,873,1,2364,913,
1,2293,3900,16,0,
184,1,1113,3901,16,
0,168,1,112,3902,
16,0,184,1,1117,
3903,16,0,176,1,
1873,921,1,1876,3904,
16,0,176,1,372,
3905,16,0,586,1,
374,3906,16,0,588,
1,124,3907,16,0,
184,1,376,3908,16,
0,590,1,378,3909,
16,0,592,1,2136,
928,1,381,3910,16,
0,184,1,525,3911,
16,0,184,1,137,
3912,16,0,184,1,
2021,804,1,1901,3913,
16,0,176,1,1153,
3914,16,0,176,1,
151,3915,16,0,184,
1,1407,3916,16,0,
176,1,1659,3917,16,
0,176,1,2413,3918,
16,0,176,1,406,
3919,16,0,184,1,
1371,3920,16,0,176,
1,2105,900,1,166,
3921,16,0,184,1,
2045,865,1,1622,3922,
16,0,184,1,1931,
946,1,1933,3923,16,
0,176,1,431,3924,
16,0,184,1,1585,
3925,16,0,184,1,
182,3926,16,0,184,
1,1189,3927,16,0,
176,1,1443,3928,16,
0,176,1,1695,3929,
16,0,176,1,2198,
3930,16,0,176,1,
2776,3417,1,447,3931,
16,0,184,1,2458,
961,1,2459,967,1,
1958,3932,16,0,176,
1,2462,974,1,1657,
979,1,2464,984,1,
2466,3447,1,459,3933,
16,0,184,1,2468,
3934,16,0,352,1,
462,3935,16,0,184,
1,199,3936,16,0,
184,1,217,3937,16,
0,184,1,2227,993,
1,1225,3938,16,0,
176,1,1479,3939,16,
0,176,1,1731,3940,
16,0,184,1,2737,
3459,1,2740,3941,16,
0,184,1,1989,1002,
1,1990,3942,16,0,
176,1,236,3943,16,
0,184,1,2507,3944,
16,0,447,1,1756,
3945,16,0,176,1,
93,3946,19,702,1,
93,3947,5,95,1,
256,3948,16,0,700,
1,1261,3949,16,0,
700,1,509,3950,16,
0,700,1,1515,3951,
16,0,700,1,2021,
804,1,1775,3952,16,
0,700,1,2029,811,
1,2030,817,1,2031,
822,1,2032,827,1,
2033,832,1,277,3953,
16,0,700,1,2035,
838,1,2037,843,1,
2039,848,1,32,3954,
16,0,700,1,2041,
854,1,2293,3955,16,
0,700,1,2043,860,
1,2045,865,1,41,
3956,16,0,700,1,
1297,3957,16,0,700,
1,43,3958,16,0,
700,1,1803,873,1,
1804,3959,16,0,700,
1,299,3960,16,0,
700,1,52,3961,16,
0,700,1,2318,3962,
16,0,700,1,62,
3963,16,0,700,1,
2075,3964,16,0,700,
1,1574,885,1,71,
3965,16,0,700,1,
76,3966,16,0,700,
1,1834,3967,16,0,
700,1,2337,3968,16,
0,700,1,79,3969,
16,0,700,1,1335,
3970,16,0,700,1,
322,3971,16,0,700,
1,85,3972,16,0,
700,1,89,3973,16,
0,700,1,346,3974,
16,0,700,1,2105,
900,1,2106,3975,16,
0,700,1,97,3976,
16,0,700,1,1860,
907,1,2364,913,1,
102,3977,16,0,700,
1,112,3978,16,0,
700,1,1117,3979,16,
0,700,1,1873,921,
1,1876,3980,16,0,
700,1,124,3981,16,
0,700,1,2136,928,
1,381,3982,16,0,
700,1,525,3983,16,
0,700,1,137,3984,
16,0,700,1,1901,
3985,16,0,700,1,
1153,3986,16,0,700,
1,151,3987,16,0,
700,1,1407,3988,16,
0,700,1,1659,3989,
16,0,700,1,2413,
3990,16,0,700,1,
406,3991,16,0,700,
1,1371,3992,16,0,
700,1,166,3993,16,
0,700,1,1622,3994,
16,0,700,1,1931,
946,1,1933,3995,16,
0,700,1,431,3996,
16,0,700,1,1585,
3997,16,0,700,1,
182,3998,16,0,700,
1,1189,3999,16,0,
700,1,1443,4000,16,
0,700,1,1695,4001,
16,0,700,1,2198,
4002,16,0,700,1,
447,4003,16,0,700,
1,2458,961,1,2459,
967,1,1958,4004,16,
0,700,1,2462,974,
1,1657,979,1,2464,
984,1,199,4005,16,
0,700,1,459,4006,
16,0,700,1,462,
4007,16,0,700,1,
217,4008,16,0,700,
1,2227,993,1,1225,
4009,16,0,700,1,
1479,4010,16,0,700,
1,1731,4011,16,0,
700,1,2740,4012,16,
0,700,1,1989,1002,
1,1990,4013,16,0,
700,1,236,4014,16,
0,700,1,1756,4015,
16,0,700,1,94,
4016,19,699,1,94,
4017,5,95,1,256,
4018,16,0,697,1,
1261,4019,16,0,697,
1,509,4020,16,0,
697,1,1515,4021,16,
0,697,1,2021,804,
1,1775,4022,16,0,
697,1,2029,811,1,
2030,817,1,2031,822,
1,2032,827,1,2033,
832,1,277,4023,16,
0,697,1,2035,838,
1,2037,843,1,2039,
848,1,32,4024,16,
0,697,1,2041,854,
1,2293,4025,16,0,
697,1,2043,860,1,
2045,865,1,41,4026,
16,0,697,1,1297,
4027,16,0,697,1,
43,4028,16,0,697,
1,1803,873,1,1804,
4029,16,0,697,1,
299,4030,16,0,697,
1,52,4031,16,0,
697,1,2318,4032,16,
0,697,1,62,4033,
16,0,697,1,2075,
4034,16,0,697,1,
1574,885,1,71,4035,
16,0,697,1,76,
4036,16,0,697,1,
1834,4037,16,0,697,
1,2337,4038,16,0,
697,1,79,4039,16,
0,697,1,1335,4040,
16,0,697,1,322,
4041,16,0,697,1,
85,4042,16,0,697,
1,89,4043,16,0,
697,1,346,4044,16,
0,697,1,2105,900,
1,2106,4045,16,0,
697,1,97,4046,16,
0,697,1,1860,907,
1,2364,913,1,102,
4047,16,0,697,1,
112,4048,16,0,697,
1,1117,4049,16,0,
697,1,1873,921,1,
1876,4050,16,0,697,
1,124,4051,16,0,
697,1,2136,928,1,
381,4052,16,0,697,
1,525,4053,16,0,
697,1,137,4054,16,
0,697,1,1901,4055,
16,0,697,1,1153,
4056,16,0,697,1,
151,4057,16,0,697,
1,1407,4058,16,0,
697,1,1659,4059,16,
0,697,1,2413,4060,
16,0,697,1,406,
4061,16,0,697,1,
1371,4062,16,0,697,
1,166,4063,16,0,
697,1,1622,4064,16,
0,697,1,1931,946,
1,1933,4065,16,0,
697,1,431,4066,16,
0,697,1,1585,4067,
16,0,697,1,182,
4068,16,0,697,1,
1189,4069,16,0,697,
1,1443,4070,16,0,
697,1,1695,4071,16,
0,697,1,2198,4072,
16,0,697,1,447,
4073,16,0,697,1,
2458,961,1,2459,967,
1,1958,4074,16,0,
697,1,2462,974,1,
1657,979,1,2464,984,
1,199,4075,16,0,
697,1,459,4076,16,
0,697,1,462,4077,
16,0,697,1,217,
4078,16,0,697,1,
2227,993,1,1225,4079,
16,0,697,1,1479,
4080,16,0,697,1,
1731,4081,16,0,697,
1,2740,4082,16,0,
697,1,1989,1002,1,
1990,4083,16,0,697,
1,236,4084,16,0,
697,1,1756,4085,16,
0,697,1,95,4086,
19,696,1,95,4087,
5,95,1,256,4088,
16,0,694,1,1261,
4089,16,0,694,1,
509,4090,16,0,694,
1,1515,4091,16,0,
694,1,2021,804,1,
1775,4092,16,0,694,
1,2029,811,1,2030,
817,1,2031,822,1,
2032,827,1,2033,832,
1,277,4093,16,0,
694,1,2035,838,1,
2037,843,1,2039,848,
1,32,4094,16,0,
694,1,2041,854,1,
2293,4095,16,0,694,
1,2043,860,1,2045,
865,1,41,4096,16,
0,694,1,1297,4097,
16,0,694,1,43,
4098,16,0,694,1,
1803,873,1,1804,4099,
16,0,694,1,299,
4100,16,0,694,1,
52,4101,16,0,694,
1,2318,4102,16,0,
694,1,62,4103,16,
0,694,1,2075,4104,
16,0,694,1,1574,
885,1,71,4105,16,
0,694,1,76,4106,
16,0,694,1,1834,
4107,16,0,694,1,
2337,4108,16,0,694,
1,79,4109,16,0,
694,1,1335,4110,16,
0,694,1,322,4111,
16,0,694,1,85,
4112,16,0,694,1,
89,4113,16,0,694,
1,346,4114,16,0,
694,1,2105,900,1,
2106,4115,16,0,694,
1,97,4116,16,0,
694,1,1860,907,1,
2364,913,1,102,4117,
16,0,694,1,112,
4118,16,0,694,1,
1117,4119,16,0,694,
1,1873,921,1,1876,
4120,16,0,694,1,
124,4121,16,0,694,
1,2136,928,1,381,
4122,16,0,694,1,
525,4123,16,0,694,
1,137,4124,16,0,
694,1,1901,4125,16,
0,694,1,1153,4126,
16,0,694,1,151,
4127,16,0,694,1,
1407,4128,16,0,694,
1,1659,4129,16,0,
694,1,2413,4130,16,
0,694,1,406,4131,
16,0,694,1,1371,
4132,16,0,694,1,
166,4133,16,0,694,
1,1622,4134,16,0,
694,1,1931,946,1,
1933,4135,16,0,694,
1,431,4136,16,0,
694,1,1585,4137,16,
0,694,1,182,4138,
16,0,694,1,1189,
4139,16,0,694,1,
1443,4140,16,0,694,
1,1695,4141,16,0,
694,1,2198,4142,16,
0,694,1,447,4143,
16,0,694,1,2458,
961,1,2459,967,1,
1958,4144,16,0,694,
1,2462,974,1,1657,
979,1,2464,984,1,
199,4145,16,0,694,
1,459,4146,16,0,
694,1,462,4147,16,
0,694,1,217,4148,
16,0,694,1,2227,
993,1,1225,4149,16,
0,694,1,1479,4150,
16,0,694,1,1731,
4151,16,0,694,1,
2740,4152,16,0,694,
1,1989,1002,1,1990,
4153,16,0,694,1,
236,4154,16,0,694,
1,1756,4155,16,0,
694,1,96,4156,19,
103,1,96,4157,5,
1,1,0,4158,16,
0,104,1,97,4159,
19,758,1,97,4160,
5,1,1,0,4161,
16,0,756,1,98,
4162,19,139,1,98,
4163,5,2,1,0,
4164,16,0,143,1,
2777,4165,16,0,137,
1,99,4166,19,142,
1,99,4167,5,2,
1,0,4168,16,0,
140,1,2777,4169,16,
0,248,1,100,4170,
19,243,1,100,4171,
5,2,1,0,4172,
16,0,708,1,2777,
4173,16,0,241,1,
101,4174,19,712,1,
101,4175,5,4,1,
0,4176,16,0,713,
1,2718,4177,16,0,
710,1,2777,4178,16,
0,713,1,2788,4179,
16,0,710,1,102,
4180,19,722,1,102,
4181,5,2,1,2623,
4182,16,0,739,1,
2470,4183,16,0,720,
1,103,4184,19,622,
1,103,4185,5,4,
1,2664,4186,16,0,
685,1,2623,4187,16,
0,620,1,2470,4188,
16,0,620,1,2568,
4189,16,0,685,1,
104,4190,19,619,1,
104,4191,5,4,1,
2664,4192,16,0,684,
1,2623,4193,16,0,
617,1,2470,4194,16,
0,617,1,2568,4195,
16,0,684,1,105,
4196,19,616,1,105,
4197,5,4,1,2664,
4198,16,0,683,1,
2623,4199,16,0,614,
1,2470,4200,16,0,
614,1,2568,4201,16,
0,683,1,106,4202,
19,602,1,106,4203,
5,4,1,2664,4204,
16,0,600,1,2623,
4205,16,0,690,1,
2470,4206,16,0,690,
1,2568,4207,16,0,
600,1,107,4208,19,
599,1,107,4209,5,
4,1,2664,4210,16,
0,597,1,2623,4211,
16,0,612,1,2470,
4212,16,0,612,1,
2568,4213,16,0,597,
1,108,4214,19,611,
1,108,4215,5,4,
1,2664,4216,16,0,
754,1,2623,4217,16,
0,609,1,2470,4218,
16,0,609,1,2568,
4219,16,0,754,1,
109,4220,19,151,1,
109,4221,5,3,1,
2553,4222,16,0,517,
1,2724,4223,16,0,
723,1,10,4224,16,
0,149,1,110,4225,
19,629,1,110,4226,
5,1,1,2539,4227,
16,0,627,1,111,
4228,19,487,1,111,
4229,5,1,1,2531,
4230,16,0,485,1,
112,4231,19,474,1,
112,4232,5,1,1,
2522,4233,16,0,472,
1,113,4234,19,462,
1,113,4235,5,1,
1,2506,4236,16,0,
460,1,114,4237,19,
161,1,114,4238,5,
17,1,0,4239,16,
0,731,1,2777,4240,
16,0,731,1,2075,
4241,16,0,725,1,
2337,4242,16,0,725,
1,2413,4243,16,0,
725,1,2553,4244,16,
0,348,1,10,4245,
16,0,348,1,1901,
4246,16,0,725,1,
2198,4247,16,0,725,
1,21,4248,16,0,
159,1,2106,4249,16,
0,725,1,2724,4250,
16,0,348,1,1804,
4251,16,0,725,1,
1990,4252,16,0,725,
1,32,4253,16,0,
725,1,1958,4254,16,
0,725,1,1775,4255,
16,0,725,1,115,
4256,19,501,1,115,
4257,5,1,1,2539,
4258,16,0,499,1,
116,4259,19,450,1,
116,4260,5,2,1,
2531,4261,16,0,607,
1,2506,4262,16,0,
448,1,117,4263,19,
471,1,117,4264,5,
1,1,2522,4265,16,
0,469,1,118,4266,
19,456,1,118,4267,
5,2,1,2510,4268,
16,0,454,1,2514,
4269,16,0,459,1,
119,4270,19,130,1,
119,4271,5,18,1,
0,4272,16,0,128,
1,2777,4273,16,0,
128,1,2075,4274,16,
0,147,1,2337,4275,
16,0,147,1,2413,
4276,16,0,147,1,
2553,4277,16,0,147,
1,10,4278,16,0,
147,1,2198,4279,16,
0,147,1,1901,4280,
16,0,147,1,52,
4281,16,0,204,1,
21,4282,16,0,147,
1,2106,4283,16,0,
147,1,2724,4284,16,
0,147,1,1804,4285,
16,0,147,1,1990,
4286,16,0,147,1,
32,4287,16,0,147,
1,1958,4288,16,0,
147,1,1775,4289,16,
0,147,1,120,4290,
19,638,1,120,4291,
5,4,1,2664,4292,
16,0,636,1,2623,
4293,16,0,636,1,
2470,4294,16,0,636,
1,2568,4295,16,0,
636,1,121,4296,19,
236,1,121,4297,5,
4,1,2664,4298,16,
0,234,1,2623,4299,
16,0,234,1,2470,
4300,16,0,234,1,
2568,4301,16,0,234,
1,122,4302,19,495,
1,122,4303,5,4,
1,2664,4304,16,0,
493,1,2623,4305,16,
0,493,1,2470,4306,
16,0,493,1,2568,
4307,16,0,493,1,
123,4308,19,482,1,
123,4309,5,4,1,
2664,4310,16,0,480,
1,2623,4311,16,0,
480,1,2470,4312,16,
0,480,1,2568,4313,
16,0,480,1,124,
4314,19,746,1,124,
4315,5,4,1,2664,
4316,16,0,744,1,
2623,4317,16,0,744,
1,2470,4318,16,0,
744,1,2568,4319,16,
0,744,1,125,4320,
19,737,1,125,4321,
5,4,1,2664,4322,
16,0,735,1,2623,
4323,16,0,735,1,
2470,4324,16,0,735,
1,2568,4325,16,0,
735,1,126,4326,19,
271,1,126,4327,5,
19,1,2544,4328,16,
0,630,1,2518,4329,
16,0,666,1,2075,
4330,16,0,557,1,
2337,4331,16,0,557,
1,2413,4332,16,0,
557,1,2527,4333,16,
0,479,1,1901,4334,
16,0,557,1,2198,
4335,16,0,557,1,
2535,4336,16,0,613,
1,2564,4337,16,0,
522,1,2106,4338,16,
0,557,1,1958,4339,
16,0,557,1,1804,
4340,16,0,557,1,
1990,4341,16,0,557,
1,31,4342,16,0,
347,1,32,4343,16,
0,557,1,2549,4344,
16,0,511,1,2735,
4345,16,0,269,1,
1775,4346,16,0,557,
1,127,4347,19,317,
1,127,4348,5,1,
1,32,4349,16,0,
315,1,128,4350,19,
275,1,128,4351,5,
11,1,2075,4352,16,
0,653,1,2337,4353,
16,0,279,1,2413,
4354,16,0,489,1,
1901,4355,16,0,403,
1,2198,4356,16,0,
333,1,2106,4357,16,
0,682,1,1804,4358,
16,0,300,1,1990,
4359,16,0,545,1,
32,4360,16,0,343,
1,1958,4361,16,0,
504,1,1775,4362,16,
0,273,1,129,4363,
19,659,1,129,4364,
5,11,1,2075,4365,
16,0,657,1,2337,
4366,16,0,657,1,
2413,4367,16,0,657,
1,1901,4368,16,0,
657,1,2198,4369,16,
0,657,1,2106,4370,
16,0,657,1,1804,
4371,16,0,657,1,
1990,4372,16,0,657,
1,32,4373,16,0,
657,1,1958,4374,16,
0,657,1,1775,4375,
16,0,657,1,130,
4376,19,718,1,130,
4377,5,11,1,2075,
4378,16,0,716,1,
2337,4379,16,0,716,
1,2413,4380,16,0,
716,1,1901,4381,16,
0,716,1,2198,4382,
16,0,716,1,2106,
4383,16,0,716,1,
1804,4384,16,0,716,
1,1990,4385,16,0,
716,1,32,4386,16,
0,716,1,1958,4387,
16,0,716,1,1775,
4388,16,0,716,1,
131,4389,19,172,1,
131,4390,5,31,1,
1901,4391,16,0,724,
1,1479,4392,16,0,
631,1,2075,4393,16,
0,724,1,1695,4394,
16,0,200,1,1756,
4395,16,0,199,1,
2413,4396,16,0,724,
1,2198,4397,16,0,
724,1,1876,4398,16,
0,741,1,1659,4399,
16,0,199,1,1443,
4400,16,0,573,1,
1117,4401,16,0,170,
1,1990,4402,16,0,
724,1,1189,4403,16,
0,255,1,1775,4404,
16,0,724,1,32,
4405,16,0,724,1,
2106,4406,16,0,724,
1,1515,4407,16,0,
655,1,2337,4408,16,
0,724,1,52,4409,
16,0,667,1,1804,
4410,16,0,724,1,
1261,4411,16,0,311,
1,1153,4412,16,0,
262,1,1225,4413,16,
0,289,1,1335,4414,
16,0,478,1,1933,
4415,16,0,634,1,
1834,4416,16,0,327,
1,1297,4417,16,0,
337,1,1407,4418,16,
0,647,1,2318,4419,
16,0,199,1,1958,
4420,16,0,724,1,
1371,4421,16,0,464,
1,132,4422,19,582,
1,132,4423,5,11,
1,2075,4424,16,0,
580,1,2337,4425,16,
0,580,1,2413,4426,
16,0,580,1,1901,
4427,16,0,580,1,
2198,4428,16,0,580,
1,2106,4429,16,0,
580,1,1804,4430,16,
0,580,1,1990,4431,
16,0,580,1,32,
4432,16,0,580,1,
1958,4433,16,0,580,
1,1775,4434,16,0,
580,1,133,4435,19,
578,1,133,4436,5,
11,1,2075,4437,16,
0,576,1,2337,4438,
16,0,576,1,2413,
4439,16,0,576,1,
1901,4440,16,0,576,
1,2198,4441,16,0,
576,1,2106,4442,16,
0,576,1,1804,4443,
16,0,576,1,1990,
4444,16,0,576,1,
32,4445,16,0,576,
1,1958,4446,16,0,
576,1,1775,4447,16,
0,576,1,134,4448,
19,651,1,134,4449,
5,11,1,2075,4450,
16,0,649,1,2337,
4451,16,0,649,1,
2413,4452,16,0,649,
1,1901,4453,16,0,
649,1,2198,4454,16,
0,649,1,2106,4455,
16,0,649,1,1804,
4456,16,0,649,1,
1990,4457,16,0,649,
1,32,4458,16,0,
649,1,1958,4459,16,
0,649,1,1775,4460,
16,0,649,1,135,
4461,19,572,1,135,
4462,5,11,1,2075,
4463,16,0,570,1,
2337,4464,16,0,570,
1,2413,4465,16,0,
570,1,1901,4466,16,
0,570,1,2198,4467,
16,0,570,1,2106,
4468,16,0,570,1,
1804,4469,16,0,570,
1,1990,4470,16,0,
570,1,32,4471,16,
0,570,1,1958,4472,
16,0,570,1,1775,
4473,16,0,570,1,
136,4474,19,569,1,
136,4475,5,11,1,
2075,4476,16,0,567,
1,2337,4477,16,0,
567,1,2413,4478,16,
0,567,1,1901,4479,
16,0,567,1,2198,
4480,16,0,567,1,
2106,4481,16,0,567,
1,1804,4482,16,0,
567,1,1990,4483,16,
0,567,1,32,4484,
16,0,567,1,1958,
4485,16,0,567,1,
1775,4486,16,0,567,
1,137,4487,19,566,
1,137,4488,5,11,
1,2075,4489,16,0,
564,1,2337,4490,16,
0,564,1,2413,4491,
16,0,564,1,1901,
4492,16,0,564,1,
2198,4493,16,0,564,
1,2106,4494,16,0,
564,1,1804,4495,16,
0,564,1,1990,4496,
16,0,564,1,32,
4497,16,0,564,1,
1958,4498,16,0,564,
1,1775,4499,16,0,
564,1,138,4500,19,
563,1,138,4501,5,
11,1,2075,4502,16,
0,561,1,2337,4503,
16,0,561,1,2413,
4504,16,0,561,1,
1901,4505,16,0,561,
1,2198,4506,16,0,
561,1,2106,4507,16,
0,561,1,1804,4508,
16,0,561,1,1990,
4509,16,0,561,1,
32,4510,16,0,561,
1,1958,4511,16,0,
561,1,1775,4512,16,
0,561,1,139,4513,
19,560,1,139,4514,
5,11,1,2075,4515,
16,0,558,1,2337,
4516,16,0,558,1,
2413,4517,16,0,558,
1,1901,4518,16,0,
558,1,2198,4519,16,
0,558,1,2106,4520,
16,0,558,1,1804,
4521,16,0,558,1,
1990,4522,16,0,558,
1,32,4523,16,0,
558,1,1958,4524,16,
0,558,1,1775,4525,
16,0,558,1,140,
4526,19,157,1,140,
4527,5,3,1,1756,
4528,16,0,299,1,
2318,4529,16,0,310,
1,1659,4530,16,0,
155,1,141,4531,19,
605,1,141,4532,5,
68,1,1901,4533,16,
0,603,1,1479,4534,
16,0,603,1,112,
4535,16,0,603,1,
2293,4536,16,0,603,
1,1804,4537,16,0,
603,1,431,4538,16,
0,603,1,1443,4539,
16,0,603,1,1756,
4540,16,0,603,1,
124,4541,16,0,603,
1,525,4542,16,0,
603,1,236,4543,16,
0,603,1,346,4544,
16,0,603,1,1876,
4545,16,0,603,1,
1659,4546,16,0,603,
1,1225,4547,16,0,
603,1,1117,4548,16,
0,603,1,137,4549,
16,0,603,1,2318,
4550,16,0,603,1,
1775,4551,16,0,603,
1,32,4552,16,0,
603,1,1407,4553,16,
0,603,1,2740,4554,
16,0,603,1,256,
4555,16,0,603,1,
459,4556,16,0,603,
1,406,4557,16,0,
603,1,41,4558,16,
0,603,1,151,4559,
16,0,603,1,43,
4560,16,0,603,1,
1585,4561,16,0,603,
1,1990,4562,16,0,
603,1,2337,4563,16,
0,603,1,509,4564,
16,0,603,1,52,
4565,16,0,603,1,
381,4566,16,0,603,
1,447,4567,16,0,
603,1,166,4568,16,
0,603,1,462,4569,
16,0,603,1,277,
4570,16,0,603,1,
1695,4571,16,0,603,
1,62,4572,16,0,
663,1,1153,4573,16,
0,603,1,2106,4574,
16,0,603,1,1335,
4575,16,0,603,1,
71,4576,16,0,603,
1,182,4577,16,0,
603,1,76,4578,16,
0,603,1,79,4579,
16,0,603,1,1933,
4580,16,0,603,1,
299,4581,16,0,603,
1,85,4582,16,0,
603,1,1515,4583,16,
0,603,1,2198,4584,
16,0,603,1,89,
4585,16,0,603,1,
1834,4586,16,0,603,
1,1622,4587,16,0,
603,1,2413,4588,16,
0,603,1,2075,4589,
16,0,603,1,1731,
4590,16,0,603,1,
97,4591,16,0,603,
1,1297,4592,16,0,
603,1,1189,4593,16,
0,603,1,102,4594,
16,0,603,1,1261,
4595,16,0,603,1,
322,4596,16,0,603,
1,1958,4597,16,0,
603,1,199,4598,16,
0,603,1,1371,4599,
16,0,603,1,217,
4600,16,0,603,1,
142,4601,19,677,1,
142,4602,5,2,1,
459,4603,16,0,675,
1,41,4604,16,0,
747,1,143,4605,19,
681,1,143,4606,5,
3,1,462,4607,16,
0,679,1,459,4608,
16,0,706,1,41,
4609,16,0,706,1,
144,4610,19,4611,4,
36,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,1,144,4606,
1,145,4612,19,595,
1,145,4613,5,68,
1,1901,4614,16,0,
593,1,1479,4615,16,
0,593,1,112,4616,
16,0,593,1,2293,
4617,16,0,593,1,
1804,4618,16,0,593,
1,431,4619,16,0,
593,1,1443,4620,16,
0,593,1,1756,4621,
16,0,593,1,124,
4622,16,0,593,1,
525,4623,16,0,593,
1,236,4624,16,0,
593,1,346,4625,16,
0,593,1,1876,4626,
16,0,593,1,1659,
4627,16,0,593,1,
1225,4628,16,0,593,
1,1117,4629,16,0,
593,1,137,4630,16,
0,593,1,2318,4631,
16,0,593,1,1775,
4632,16,0,593,1,
32,4633,16,0,593,
1,1407,4634,16,0,
593,1,2740,4635,16,
0,593,1,256,4636,
16,0,593,1,459,
4637,16,0,593,1,
406,4638,16,0,593,
1,41,4639,16,0,
593,1,151,4640,16,
0,593,1,43,4641,
16,0,593,1,1585,
4642,16,0,593,1,
1990,4643,16,0,593,
1,2337,4644,16,0,
593,1,509,4645,16,
0,593,1,52,4646,
16,0,593,1,381,
4647,16,0,593,1,
447,4648,16,0,593,
1,166,4649,16,0,
593,1,462,4650,16,
0,593,1,277,4651,
16,0,593,1,1695,
4652,16,0,593,1,
62,4653,16,0,664,
1,1153,4654,16,0,
593,1,2106,4655,16,
0,593,1,1335,4656,
16,0,593,1,71,
4657,16,0,593,1,
182,4658,16,0,593,
1,76,4659,16,0,
593,1,79,4660,16,
0,593,1,1933,4661,
16,0,593,1,299,
4662,16,0,593,1,
85,4663,16,0,593,
1,1515,4664,16,0,
593,1,2198,4665,16,
0,593,1,89,4666,
16,0,593,1,1834,
4667,16,0,593,1,
1622,4668,16,0,593,
1,2413,4669,16,0,
593,1,2075,4670,16,
0,593,1,1731,4671,
16,0,593,1,97,
4672,16,0,593,1,
1297,4673,16,0,593,
1,1189,4674,16,0,
593,1,102,4675,16,
0,593,1,1261,4676,
16,0,593,1,322,
4677,16,0,593,1,
1958,4678,16,0,593,
1,199,4679,16,0,
593,1,1371,4680,16,
0,593,1,217,4681,
16,0,593,1,146,
4682,19,4683,4,28,
86,0,101,0,99,
0,116,0,111,0,
114,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,146,
4613,1,147,4684,19,
4685,4,32,82,0,
111,0,116,0,97,
0,116,0,105,0,
111,0,110,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,147,4613,1,148,
4686,19,4687,4,24,
76,0,105,0,115,
0,116,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
148,4613,1,149,4688,
19,180,1,149,4689,
5,67,1,1901,4690,
16,0,661,1,1479,
4691,16,0,584,1,
112,4692,16,0,264,
1,2293,4693,16,0,
288,1,1804,4694,16,
0,661,1,431,4695,
16,0,656,1,1443,
4696,16,0,518,1,
1756,4697,16,0,759,
1,124,4698,16,0,
272,1,525,4699,16,
0,320,1,236,4700,
16,0,353,1,346,
4701,16,0,547,1,
1876,4702,16,0,332,
1,1659,4703,16,0,
759,1,1225,4704,16,
0,263,1,1117,4705,
16,0,230,1,137,
4706,16,0,287,1,
2318,4707,16,0,759,
1,1775,4708,16,0,
661,1,32,4709,16,
0,661,1,1407,4710,
16,0,538,1,2740,
4711,16,0,738,1,
256,4712,16,0,407,
1,459,4713,16,0,
178,1,406,4714,16,
0,641,1,41,4715,
16,0,178,1,151,
4716,16,0,298,1,
43,4717,16,0,709,
1,1990,4718,16,0,
661,1,2337,4719,16,
0,661,1,509,4720,
16,0,734,1,52,
4721,16,0,669,1,
381,4722,16,0,608,
1,447,4723,16,0,
320,1,166,4724,16,
0,309,1,462,4725,
16,0,178,1,277,
4726,16,0,452,1,
1695,4727,16,0,284,
1,1261,4728,16,0,
296,1,1153,4729,16,
0,185,1,2106,4730,
16,0,661,1,1335,
4731,16,0,340,1,
71,4732,16,0,214,
1,182,4733,16,0,
320,1,76,4734,16,
0,606,1,79,4735,
16,0,229,1,1933,
4736,16,0,419,1,
299,4737,16,0,484,
1,85,4738,16,0,
514,1,1515,4739,16,
0,640,1,2198,4740,
16,0,661,1,89,
4741,16,0,244,1,
1834,4742,16,0,308,
1,1622,4743,16,0,
733,1,2413,4744,16,
0,661,1,2075,4745,
16,0,661,1,1731,
4746,16,0,265,1,
97,4747,16,0,423,
1,1297,4748,16,0,
342,1,1189,4749,16,
0,228,1,102,4750,
16,0,253,1,1585,
4751,16,0,743,1,
322,4752,16,0,515,
1,1958,4753,16,0,
661,1,199,4754,16,
0,331,1,1371,4755,
16,0,408,1,217,
4756,16,0,339,1,
150,4757,19,4758,4,
36,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,150,4689,
1,151,4759,19,4760,
4,30,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,151,4689,
1,152,4761,19,4762,
4,36,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,152,
4689,1,153,4763,19,
4764,4,44,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,153,4689,
1,154,4765,19,4766,
4,32,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
154,4689,1,155,4767,
19,4768,4,30,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
155,4689,1,156,4769,
19,4770,4,36,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,156,4689,1,157,
4771,19,4772,4,42,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,157,4689,
1,158,4773,19,4774,
4,56,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,158,
4689,1,160,4775,19,
786,1,160,4157,1,
161,4776,19,775,1,
161,4157,1,162,4777,
19,3445,1,162,4160,
1,163,4778,19,3435,
1,163,4160,1,164,
4779,19,3440,1,164,
4160,1,165,4780,19,
3430,1,165,4160,1,
166,4781,19,3421,1,
166,4163,1,167,4782,
19,3456,1,167,4163,
1,168,4783,19,3462,
1,168,4167,1,169,
4784,19,3451,1,169,
4167,1,170,4785,19,
791,1,170,4171,1,
171,4786,19,781,1,
171,4171,1,172,4787,
19,769,1,172,4175,
1,173,4788,19,796,
1,173,4175,1,174,
4789,19,1738,1,174,
4181,1,175,4790,19,
1808,1,175,4181,1,
176,4791,19,1733,1,
176,4181,1,177,4792,
19,1803,1,177,4181,
1,178,4793,19,1728,
1,178,4181,1,179,
4794,19,1798,1,179,
4181,1,180,4795,19,
1723,1,180,4181,1,
181,4796,19,1793,1,
181,4181,1,182,4797,
19,1718,1,182,4181,
1,183,4798,19,1788,
1,183,4181,1,184,
4799,19,1713,1,184,
4181,1,185,4800,19,
1783,1,185,4181,1,
186,4801,19,1777,1,
186,4185,1,187,4802,
19,1771,1,187,4191,
1,188,4803,19,1765,
1,188,4197,1,189,
4804,19,1758,1,189,
4203,1,190,4805,19,
1751,1,190,4209,1,
191,4806,19,1744,1,
191,4215,1,192,4807,
19,1853,1,192,4221,
1,193,4808,19,1828,
1,193,4221,1,194,
4809,19,2231,1,194,
4226,1,195,4810,19,
2200,1,195,4229,1,
196,4811,19,2192,1,
196,4232,1,197,4812,
19,2222,1,197,4235,
1,198,4813,19,1203,
1,198,4238,1,199,
4814,19,2207,1,199,
4257,1,200,4815,19,
1874,1,200,4260,1,
201,4816,19,2186,1,
201,4264,1,202,4817,
19,1816,1,202,4267,
1,203,4818,19,987,
1,203,4327,1,204,
4819,19,971,1,204,
4327,1,205,4820,19,
977,1,205,4348,1,
206,4821,19,965,1,
206,4348,1,207,4822,
19,1231,1,207,4364,
1,208,4823,19,868,
1,208,4351,1,209,
4824,19,982,1,209,
4351,1,210,4825,19,
863,1,210,4351,1,
211,4826,19,888,1,
211,4351,1,212,4827,
19,857,1,212,4351,
1,213,4828,19,851,
1,213,4351,1,214,
4829,19,846,1,214,
4351,1,215,4830,19,
841,1,215,4351,1,
216,4831,19,835,1,
216,4351,1,217,4832,
19,830,1,217,4351,
1,218,4833,19,825,
1,218,4351,1,219,
4834,19,820,1,219,
4351,1,220,4835,19,
815,1,220,4351,1,
221,4836,19,1238,1,
221,4436,1,222,4837,
19,1377,1,222,4449,
1,223,4838,19,1225,
1,223,4462,1,224,
4839,19,1365,1,224,
4462,1,225,4840,19,
1005,1,225,4475,1,
226,4841,19,808,1,
226,4475,1,227,4842,
19,903,1,227,4475,
1,228,4843,19,931,
1,228,4475,1,229,
4844,19,950,1,229,
4488,1,230,4845,19,
996,1,230,4488,1,
231,4846,19,911,1,
231,4501,1,232,4847,
19,924,1,232,4501,
1,233,4848,19,877,
1,233,4514,1,234,
4849,19,916,1,234,
4514,1,235,4850,19,
1563,1,235,4527,1,
236,4851,19,1244,1,
236,4527,1,237,4852,
19,1595,1,237,4527,
1,238,4853,19,1627,
1,238,4527,1,239,
4854,19,1493,1,239,
4377,1,240,4855,19,
1552,1,240,4377,1,
241,4856,19,1219,1,
241,4390,1,242,4857,
19,1659,1,242,4390,
1,243,4858,19,1590,
1,243,4390,1,244,
4859,19,1537,1,244,
4390,1,245,4860,19,
1461,1,245,4390,1,
246,4861,19,1387,1,
246,4390,1,247,4862,
19,1397,1,247,4390,
1,248,4863,19,1214,
1,248,4390,1,249,
4864,19,1643,1,249,
4390,1,250,4865,19,
1585,1,250,4390,1,
251,4866,19,1527,1,
251,4390,1,252,4867,
19,1450,1,252,4390,
1,253,4868,19,1413,
1,253,4390,1,254,
4869,19,1197,1,254,
4390,1,255,4870,19,
1547,1,255,4390,1,
256,4871,19,1573,1,
256,4390,1,257,4872,
19,1520,1,257,4390,
1,258,4873,19,1542,
1,258,4390,1,259,
4874,19,1353,1,259,
4390,1,260,4875,19,
1256,1,260,4390,1,
261,4876,19,1186,1,
261,4390,1,262,4877,
19,1617,1,262,4390,
1,263,4878,19,1568,
1,263,4390,1,264,
4879,19,1515,1,264,
4390,1,265,4880,19,
1382,1,265,4423,1,
266,4881,19,1360,1,
266,4423,1,267,4882,
19,1648,1,267,4613,
1,268,4883,19,1672,
1,268,4613,1,269,
4884,19,1638,1,269,
4613,1,270,4885,19,
1633,1,270,4613,1,
271,4886,19,1654,1,
271,4613,1,272,4887,
19,1601,1,272,4613,
1,273,4888,19,1306,
1,273,4613,1,274,
4889,19,1482,1,274,
4689,1,275,4890,19,
1267,1,275,4689,1,
276,4891,19,1274,1,
276,4689,1,277,4892,
19,1295,1,277,4689,
1,278,4893,19,1290,
1,278,4689,1,279,
4894,19,1285,1,279,
4689,1,280,4895,19,
1280,1,280,4689,1,
281,4896,19,1471,1,
281,4689,1,282,4897,
19,1499,1,282,4689,
1,283,4898,19,1476,
1,283,4689,1,284,
4899,19,1466,1,284,
4689,1,285,4900,19,
1456,1,285,4689,1,
286,4901,19,1439,1,
286,4689,1,287,4902,
19,1392,1,287,4689,
1,288,4903,19,1300,
1,288,4689,1,289,
4904,19,1261,1,289,
4689,1,290,4905,19,
1209,1,290,4689,1,
291,4906,19,1667,1,
291,4689,1,292,4907,
19,1622,1,292,4689,
1,293,4908,19,1612,
1,293,4689,1,294,
4909,19,1607,1,294,
4689,1,295,4910,19,
1558,1,295,4689,1,
296,4911,19,1532,1,
296,4689,1,297,4912,
19,1509,1,297,4689,
1,298,4913,19,1504,
1,298,4689,1,299,
4914,19,1445,1,299,
4689,1,300,4915,19,
1421,1,300,4689,1,
301,4916,19,1487,1,
301,4689,1,302,4917,
19,1579,1,302,4689,
1,303,4918,19,1434,
1,303,4689,1,304,
4919,19,1428,1,304,
4689,1,305,4920,19,
1408,1,305,4689,1,
306,4921,19,1371,1,
306,4689,1,307,4922,
19,1348,1,307,4689,
1,308,4923,19,1192,
1,308,4689,1,309,
4924,19,1682,1,309,
4689,1,310,4925,19,
1312,1,310,4689,1,
311,4926,19,1318,1,
311,4689,1,312,4927,
19,1338,1,312,4689,
1,313,4928,19,1328,
1,313,4689,1,314,
4929,19,1333,1,314,
4689,1,315,4930,19,
1323,1,315,4689,1,
316,4931,19,1677,1,
316,4689,1,317,4932,
19,1343,1,317,4689,
1,318,4933,19,1403,
1,318,4532,1,319,
4934,19,1868,1,319,
4602,1,320,4935,19,
1859,1,320,4602,1,
321,4936,19,1838,1,
321,4606,1,322,4937,
19,2180,1,322,4271,
1,323,4938,19,2175,
1,323,4271,1,324,
4939,19,2170,1,324,
4271,1,325,4940,19,
2165,1,325,4271,1,
326,4941,19,2160,1,
326,4271,1,327,4942,
19,2155,1,327,4271,
1,328,4943,19,2150,
1,328,4271,1,329,
4944,19,2139,1,329,
4291,1,330,4945,19,
2134,1,330,4291,1,
331,4946,19,2129,1,
331,4291,1,332,4947,
19,2124,1,332,4291,
1,333,4948,19,2119,
1,333,4291,1,334,
4949,19,2114,1,334,
4291,1,335,4950,19,
2109,1,335,4291,1,
336,4951,19,2104,1,
336,4291,1,337,4952,
19,2099,1,337,4291,
1,338,4953,19,1930,
1,338,4291,1,339,
4954,19,2093,1,339,
4297,1,340,4955,19,
2088,1,340,4297,1,
341,4956,19,2083,1,
341,4297,1,342,4957,
19,1922,1,342,4297,
1,343,4958,19,2078,
1,343,4297,1,344,
4959,19,2073,1,344,
4297,1,345,4960,19,
2068,1,345,4297,1,
346,4961,19,2063,1,
346,4297,1,347,4962,
19,2058,1,347,4303,
1,348,4963,19,2053,
1,348,4303,1,349,
4964,19,1914,1,349,
4309,1,350,4965,19,
2046,1,350,4309,1,
351,4966,19,2041,1,
351,4309,1,352,4967,
19,2036,1,352,4309,
1,353,4968,19,1908,
1,353,4309,1,354,
4969,19,2030,1,354,
4309,1,355,4970,19,
1960,1,355,4309,1,
356,4971,19,2025,1,
356,4309,1,357,4972,
19,2020,1,357,4309,
1,358,4973,19,2015,
1,358,4309,1,359,
4974,19,2010,1,359,
4315,1,360,4975,19,
2005,1,360,4315,1,
361,4976,19,2000,1,
361,4315,1,362,4977,
19,1994,1,362,4321,
1,363,4978,19,4979,
4,50,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
51,0,1,363,4221,
1,364,4980,19,4981,
4,28,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,51,0,
1,364,4602,1,365,
4982,19,4983,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,52,0,
1,365,4221,1,366,
4984,19,4985,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,366,
4602,1,367,4986,19,
4987,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,53,0,1,367,
4221,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"VectorArgStateEvent",new SCreator(VectorArgStateEvent_factory));
new Sfactory(this,"IntArgStateEvent_1",new SCreator(IntArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"RotDeclaration_1",new SCreator(RotDeclaration_1_factory));
new Sfactory(this,"IntRotRotArgEvent_1",new SCreator(IntRotRotArgEvent_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"EmptyStatement",new SCreator(EmptyStatement_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"VectorDeclaration_1",new SCreator(VectorDeclaration_1_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"IntRotRotArgEvent",new SCreator(IntRotRotArgEvent_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"VectorArgEvent",new SCreator(VectorArgEvent_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"VoidArgStateEvent_1",new SCreator(VoidArgStateEvent_1_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"IntRotRotArgStateEvent",new SCreator(IntRotRotArgStateEvent_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"KeyArgEvent_1",new SCreator(KeyArgEvent_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"IntArgStateEvent",new SCreator(IntArgStateEvent_factory));
new Sfactory(this,"IntArgEvent_6",new SCreator(IntArgEvent_6_factory));
new Sfactory(this,"IntRotRotArgumentDeclarationList_1",new SCreator(IntRotRotArgumentDeclarationList_1_factory));
new Sfactory(this,"IntArgEvent_9",new SCreator(IntArgEvent_9_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"StateBody_10",new SCreator(StateBody_10_factory));
new Sfactory(this,"StateBody_11",new SCreator(StateBody_11_factory));
new Sfactory(this,"StateBody_12",new SCreator(StateBody_12_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"VoidArgEvent_4",new SCreator(VoidArgEvent_4_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"VoidArgEvent_2",new SCreator(VoidArgEvent_2_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"IntArgumentDeclarationList_1",new SCreator(IntArgumentDeclarationList_1_factory));
new Sfactory(this,"IntDeclaration_1",new SCreator(IntDeclaration_1_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"VectorArgumentDeclarationList_1",new SCreator(VectorArgumentDeclarationList_1_factory));
new Sfactory(this,"KeyArgumentDeclarationList",new SCreator(KeyArgumentDeclarationList_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"KeyArgStateEvent",new SCreator(KeyArgStateEvent_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"IntArgEvent_5",new SCreator(IntArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"KeyArgEvent",new SCreator(KeyArgEvent_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"KeyArgStateEvent_1",new SCreator(KeyArgStateEvent_1_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"KeyDeclaration",new SCreator(KeyDeclaration_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"IntArgEvent_10",new SCreator(IntArgEvent_10_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"IntArgumentDeclarationList",new SCreator(IntArgumentDeclarationList_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"IntArgEvent_3",new SCreator(IntArgEvent_3_factory));
new Sfactory(this,"IntArgEvent_4",new SCreator(IntArgEvent_4_factory));
new Sfactory(this,"KeyDeclaration_1",new SCreator(KeyDeclaration_1_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"IntArgEvent_7",new SCreator(IntArgEvent_7_factory));
new Sfactory(this,"IntArgEvent_8",new SCreator(IntArgEvent_8_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"IntRotRotArgStateEvent_1",new SCreator(IntRotRotArgStateEvent_1_factory));
new Sfactory(this,"VectorArgEvent_2",new SCreator(VectorArgEvent_2_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"StateBody_3",new SCreator(StateBody_3_factory));
new Sfactory(this,"StateBody_4",new SCreator(StateBody_4_factory));
new Sfactory(this,"StateBody_5",new SCreator(StateBody_5_factory));
new Sfactory(this,"StateBody_6",new SCreator(StateBody_6_factory));
new Sfactory(this,"StateBody_7",new SCreator(StateBody_7_factory));
new Sfactory(this,"StateBody_8",new SCreator(StateBody_8_factory));
new Sfactory(this,"StateBody_9",new SCreator(StateBody_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"IntArgEvent",new SCreator(IntArgEvent_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"VectorDeclaration",new SCreator(VectorDeclaration_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"VoidArgEvent_6",new SCreator(VoidArgEvent_6_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"VoidArgEvent_1",new SCreator(VoidArgEvent_1_factory));
new Sfactory(this,"VoidArgEvent_3",new SCreator(VoidArgEvent_3_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"VoidArgEvent_5",new SCreator(VoidArgEvent_5_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"VoidArgEvent_7",new SCreator(VoidArgEvent_7_factory));
new Sfactory(this,"VoidArgEvent_8",new SCreator(VoidArgEvent_8_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"VectorArgEvent_1",new SCreator(VectorArgEvent_1_factory));
new Sfactory(this,"IntDeclaration",new SCreator(IntDeclaration_factory));
new Sfactory(this,"VectorArgEvent_3",new SCreator(VectorArgEvent_3_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"KeyArgEvent_2",new SCreator(KeyArgEvent_2_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"EmptyStatement_1",new SCreator(EmptyStatement_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"ForLoop_2",new SCreator(ForLoop_2_factory));
new Sfactory(this,"KeyArgumentDeclarationList_1",new SCreator(KeyArgumentDeclarationList_1_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"IntRotRotArgumentDeclarationList",new SCreator(IntRotRotArgumentDeclarationList_factory));
new Sfactory(this,"IntArgEvent_1",new SCreator(IntArgEvent_1_factory));
new Sfactory(this,"IntArgEvent_2",new SCreator(IntArgEvent_2_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"VoidArgEvent",new SCreator(VoidArgEvent_factory));
new Sfactory(this,"RotDeclaration",new SCreator(RotDeclaration_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"VectorArgStateEvent_1",new SCreator(VectorArgStateEvent_1_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"VectorArgumentDeclarationList",new SCreator(VectorArgumentDeclarationList_factory));
new Sfactory(this,"States",new SCreator(States_factory));
new Sfactory(this,"VoidArgStateEvent",new SCreator(VoidArgStateEvent_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object VectorArgStateEvent_factory(Parser yyp) { return new VectorArgStateEvent(yyp); }
public static object IntArgStateEvent_1_factory(Parser yyp) { return new IntArgStateEvent_1(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object RotDeclaration_1_factory(Parser yyp) { return new RotDeclaration_1(yyp); }
public static object IntRotRotArgEvent_1_factory(Parser yyp) { return new IntRotRotArgEvent_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object EmptyStatement_factory(Parser yyp) { return new EmptyStatement(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object VectorDeclaration_1_factory(Parser yyp) { return new VectorDeclaration_1(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object IntRotRotArgEvent_factory(Parser yyp) { return new IntRotRotArgEvent(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object VectorArgEvent_factory(Parser yyp) { return new VectorArgEvent(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object VoidArgStateEvent_1_factory(Parser yyp) { return new VoidArgStateEvent_1(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object IntRotRotArgStateEvent_factory(Parser yyp) { return new IntRotRotArgStateEvent(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object KeyArgEvent_1_factory(Parser yyp) { return new KeyArgEvent_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object IntArgStateEvent_factory(Parser yyp) { return new IntArgStateEvent(yyp); }
public static object IntArgEvent_6_factory(Parser yyp) { return new IntArgEvent_6(yyp); }
public static object IntRotRotArgumentDeclarationList_1_factory(Parser yyp) { return new IntRotRotArgumentDeclarationList_1(yyp); }
public static object IntArgEvent_9_factory(Parser yyp) { return new IntArgEvent_9(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object StateBody_10_factory(Parser yyp) { return new StateBody_10(yyp); }
public static object StateBody_11_factory(Parser yyp) { return new StateBody_11(yyp); }
public static object StateBody_12_factory(Parser yyp) { return new StateBody_12(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object VoidArgEvent_4_factory(Parser yyp) { return new VoidArgEvent_4(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object VoidArgEvent_2_factory(Parser yyp) { return new VoidArgEvent_2(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object IntArgumentDeclarationList_1_factory(Parser yyp) { return new IntArgumentDeclarationList_1(yyp); }
public static object IntDeclaration_1_factory(Parser yyp) { return new IntDeclaration_1(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object VectorArgumentDeclarationList_1_factory(Parser yyp) { return new VectorArgumentDeclarationList_1(yyp); }
public static object KeyArgumentDeclarationList_factory(Parser yyp) { return new KeyArgumentDeclarationList(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object KeyArgStateEvent_factory(Parser yyp) { return new KeyArgStateEvent(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object IntArgEvent_5_factory(Parser yyp) { return new IntArgEvent_5(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object KeyArgEvent_factory(Parser yyp) { return new KeyArgEvent(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object KeyArgStateEvent_1_factory(Parser yyp) { return new KeyArgStateEvent_1(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object KeyDeclaration_factory(Parser yyp) { return new KeyDeclaration(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object IntArgEvent_10_factory(Parser yyp) { return new IntArgEvent_10(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object IntArgumentDeclarationList_factory(Parser yyp) { return new IntArgumentDeclarationList(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object IntArgEvent_3_factory(Parser yyp) { return new IntArgEvent_3(yyp); }
public static object IntArgEvent_4_factory(Parser yyp) { return new IntArgEvent_4(yyp); }
public static object KeyDeclaration_1_factory(Parser yyp) { return new KeyDeclaration_1(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object IntArgEvent_7_factory(Parser yyp) { return new IntArgEvent_7(yyp); }
public static object IntArgEvent_8_factory(Parser yyp) { return new IntArgEvent_8(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object IntRotRotArgStateEvent_1_factory(Parser yyp) { return new IntRotRotArgStateEvent_1(yyp); }
public static object VectorArgEvent_2_factory(Parser yyp) { return new VectorArgEvent_2(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object StateBody_3_factory(Parser yyp) { return new StateBody_3(yyp); }
public static object StateBody_4_factory(Parser yyp) { return new StateBody_4(yyp); }
public static object StateBody_5_factory(Parser yyp) { return new StateBody_5(yyp); }
public static object StateBody_6_factory(Parser yyp) { return new StateBody_6(yyp); }
public static object StateBody_7_factory(Parser yyp) { return new StateBody_7(yyp); }
public static object StateBody_8_factory(Parser yyp) { return new StateBody_8(yyp); }
public static object StateBody_9_factory(Parser yyp) { return new StateBody_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object IntArgEvent_factory(Parser yyp) { return new IntArgEvent(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object VectorDeclaration_factory(Parser yyp) { return new VectorDeclaration(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object VoidArgEvent_6_factory(Parser yyp) { return new VoidArgEvent_6(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object VoidArgEvent_1_factory(Parser yyp) { return new VoidArgEvent_1(yyp); }
public static object VoidArgEvent_3_factory(Parser yyp) { return new VoidArgEvent_3(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object VoidArgEvent_5_factory(Parser yyp) { return new VoidArgEvent_5(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object VoidArgEvent_7_factory(Parser yyp) { return new VoidArgEvent_7(yyp); }
public static object VoidArgEvent_8_factory(Parser yyp) { return new VoidArgEvent_8(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object VectorArgEvent_1_factory(Parser yyp) { return new VectorArgEvent_1(yyp); }
public static object IntDeclaration_factory(Parser yyp) { return new IntDeclaration(yyp); }
public static object VectorArgEvent_3_factory(Parser yyp) { return new VectorArgEvent_3(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object KeyArgEvent_2_factory(Parser yyp) { return new KeyArgEvent_2(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object EmptyStatement_1_factory(Parser yyp) { return new EmptyStatement_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object ForLoop_2_factory(Parser yyp) { return new ForLoop_2(yyp); }
public static object KeyArgumentDeclarationList_1_factory(Parser yyp) { return new KeyArgumentDeclarationList_1(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object IntRotRotArgumentDeclarationList_factory(Parser yyp) { return new IntRotRotArgumentDeclarationList(yyp); }
public static object IntArgEvent_1_factory(Parser yyp) { return new IntArgEvent_1(yyp); }
public static object IntArgEvent_2_factory(Parser yyp) { return new IntArgEvent_2(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object VoidArgEvent_factory(Parser yyp) { return new VoidArgEvent(yyp); }
public static object RotDeclaration_factory(Parser yyp) { return new RotDeclaration(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object VectorArgStateEvent_1_factory(Parser yyp) { return new VectorArgStateEvent_1(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object VectorArgumentDeclarationList_factory(Parser yyp) { return new VectorArgumentDeclarationList(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
public static object VoidArgStateEvent_factory(Parser yyp) { return new VoidArgStateEvent(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
